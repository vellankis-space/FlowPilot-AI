[
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Create group",
    "description": "Creates a group in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Group name",
        "Type": "Text value",
        "Description": "The name of the newly created group"
      },
      {
        "Argument": "Location",
        "Type": "Text value",
        "Description": "The location that the group will be created in"
      },
      {
        "Argument": "Description",
        "Type": "Text value",
        "Description": "The description for the group"
      },
      {
        "Argument": "Group scope",
        "Type": "Local, Global, Universal",
        "Description": "The scope of the group in the Active Directory"
      },
      {
        "Argument": "Group type",
        "Type": "Security, Distribution",
        "Description": "The type of the group"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object already exists",
        "Description": "Indicates that an object with the specified name already exists in the Active Directory"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Get group info",
    "description": "Gets information about a group from the Active Directory server.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      }
    ],
    "Variables produced": [
      {
        "Argument": "GroupInfo",
        "Type": "Group info",
        "Description": "The group's info"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Get group members",
    "description": "Gets the members of a group in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      }
    ],
    "Variables produced": [
      {
        "Argument": "GroupMembers",
        "Type": "List of Group members",
        "Description": "The variable that holds the members of the group"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Modify group",
    "description": "Modifies a group in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      },
      {
        "Argument": "Operation",
        "Type": "Rename group, Delete group, Add user, Remove user",
        "Description": "Select the operation to perform"
      },
      {
        "Argument": "New name",
        "Type": "Text value",
        "Description": "The new name for the group"
      },
      {
        "Argument": "User distinguished name",
        "Type": "Text value",
        "Description": "Specify the user's distinguished name"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Object already exists",
        "Description": "Indicates that an object with the specified name already exists in the Active Directory"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Create object",
    "description": "Creates an object in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Location",
        "Type": "Text value",
        "Description": "The location that the group will be created in"
      },
      {
        "Argument": "Object type",
        "Type": "Computer, Organizational unit",
        "Description": "The type of the object"
      },
      {
        "Argument": "Object name",
        "Type": "Text value",
        "Description": "The name of the newly created object"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object already exists",
        "Description": "Indicates that an object with the specified name already exists in the Active Directory"
      },
      {
        "Exception": "Invalid attribute syntax",
        "Description": "Indicates that a given attribute is invalid"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Delete object",
    "description": "Deletes an object in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Move object",
    "description": "Moves an object in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      },
      {
        "Argument": "Move to location",
        "Type": "Text value",
        "Description": "The location for the object to be moved to"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      },
      {
        "Exception": "Location can't be empty",
        "Description": "Indicates that an Active Directory object location is empty"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Rename object",
    "description": "Renames an object in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      },
      {
        "Argument": "New name",
        "Type": "Text value",
        "Description": "Type the new name for the group"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Object already exists",
        "Description": "Indicates that an object with the specified name already exists in the Active Directory"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Create user",
    "description": "Creates a user in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Location",
        "Type": "Text value",
        "Description": "The location that the group will be created in"
      },
      {
        "Argument": "First name",
        "Type": "Text value",
        "Description": "The first name of the user"
      },
      {
        "Argument": "Initials",
        "Type": "Text value",
        "Description": "The initials of the user"
      },
      {
        "Argument": "Last name",
        "Type": "Text value",
        "Description": "The last name of the user"
      },
      {
        "Argument": "Username",
        "Type": "Text value",
        "Description": "The username of the user"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password of the user"
      },
      {
        "Argument": "Password never expires",
        "Type": "Boolean value",
        "Description": "Specify whether the password of the user will expire"
      },
      {
        "Argument": "Disabled account",
        "Type": "Boolean value",
        "Description": "Specify whether the account will be disabled"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object already exists",
        "Description": "Indicates that an object with the specified name already exists in the Active Directory"
      },
      {
        "Exception": "Couldn't set or update password",
        "Description": "Indicates a problem setting or updating the user's password"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Get user info",
    "description": "Gets a user's information in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      }
    ],
    "Variables produced": [
      {
        "Argument": "UserInfo",
        "Type": "User info",
        "Description": "The user's info"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Modify user",
    "description": "Modify a user in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      },
      {
        "Argument": "Operation",
        "Type": "Enable/disable user, Rename user, Delete user, Reset password",
        "Description": "Select the operation to be performed"
      },
      {
        "Argument": "Enable user",
        "Type": "Boolean value",
        "Description": "Enable or disable the user"
      },
      {
        "Argument": "New name",
        "Type": "Text value",
        "Description": "Type the new name for the group"
      },
      {
        "Argument": "New password",
        "Type": "Direct encrypted input or Text value",
        "Description": "Type the new password for the group"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Object already exists",
        "Description": "Indicates that an object with the specified name already exists in the Active Directory"
      },
      {
        "Exception": "Invalid attribute syntax",
        "Description": "Indicates that a given attribute is invalid"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      },
      {
        "Exception": "Couldn't set or update password",
        "Description": "Indicates a problem setting or updating the user's password"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Unlock user",
    "description": "Unlocks an Active Directory user.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Update user info",
    "description": "Updates a user's information in the Active Directory.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      },
      {
        "Argument": "Distinguished name",
        "Type": "Text value",
        "Description": "The distinguished name of the Active Directory entry"
      },
      {
        "Argument": "Display name",
        "Type": "Text value",
        "Description": "The display name of the user"
      },
      {
        "Argument": "First name",
        "Type": "Text value",
        "Description": "The first name of the user"
      },
      {
        "Argument": "Initials",
        "Type": "Text value",
        "Description": "The initials of the user"
      },
      {
        "Argument": "Last name",
        "Type": "Text value",
        "Description": "The last name of the user"
      },
      {
        "Argument": "Title",
        "Type": "Text value",
        "Description": "The title of the user"
      },
      {
        "Argument": "The email of the user",
        "Type": "Text value",
        "Description": "The email of the user"
      },
      {
        "Argument": "The company of the user",
        "Type": "Text value",
        "Description": "The company of the user"
      },
      {
        "Argument": "Telephone number",
        "Type": "Text value",
        "Description": "The telephone number of the user"
      },
      {
        "Argument": "Extension",
        "Type": "Text value",
        "Description": "The extension of the user"
      },
      {
        "Argument": "City",
        "Type": "Text value",
        "Description": "The city of the user"
      },
      {
        "Argument": "Postal code",
        "Type": "Text value",
        "Description": "The postal code of the user"
      },
      {
        "Argument": "State",
        "Type": "Text value",
        "Description": "The state of the user"
      },
      {
        "Argument": "Country",
        "Type": "Afghanistan, Åland Islands, Albania, Algeria, American Samoa, Andorra, Angola, Anguilla, Antarctica, Antigua and Barbuda, Argentina, Armenia, Aruba, Australia, Austria, Azerbaijan, Bahamas, Bahrain, Bangladesh, Barbados, Belarus, Belgium, Belize, Benin, Bermuda, Bhutan, State of Bolivia Plurinational, Bonaire, Bosnia and Herzegovina, Botswana, Bouvet Island, Brazil, British Indian Ocean Territory, Brunei Darussalam, Bulgaria, Burkina Faso, Burundi, Cabo Verde, Cambodia, Cameroon, Canada, Cayman Islands, Central African Republic, Chad, Chile, China, Christmas Island, Cocos (Keeling) Islands, Colombia, Comoros, Congo, Democratic Republic of the Congo, Cook Islands, Costa Rica, Côte d'Ivoire, Croatia, Cuba, Curaçao, Cyprus, Czech Republic, Denmark, Djibouti, Dominica, Dominican Republic, Ecuador, Egypt, El Salvador, Equatorial Guinea, Eritrea, Estonia, Ethiopia, Falkland Islands, Faroe Islands, Fiji, Finland, France, French Guiana, French Polynesia, French Southern Territories, Gabon, Gambia, Georgia, Germany, Ghana, Gibraltar, Greece, Greenland, Grenada, Guadeloupe, Guam, Guatemala, Guernsey, Guinea, Guinea-Bissau, Guyana, Haiti, Heard Island and McDonald Islands, Holy See, Honduras, Hong Kong Special Administrative Region, Hungary, Iceland, India, Indonesia, Islamic Republic of Iran, Iraq, Ireland, Isle of Man, Israel, Italy, Jamaica, Japan, Jersey, Jordan, Kazakhstan, Kenya, Kiribati, Democratic Peoples Republic of Korea, Republic of Korea, Kuwait, Kyrgyzstan, Lao People's Democratic Republic, Latvia, Lebanon, Lesotho, Liberia, Libya, Liechtenstein, Lithuania, Luxembourg, Macao Special Administrative Region, North Macedonia, Madagascar, Malawi, Malaysia, Maldives, Mali, Malta, Marshall Islands, Martinique, Mauritania, Mauritius, Mayotte, Mexico, Micronesia, Moldova, Monaco, Mongolia, Montenegro, Montserrat, Morocco, Mozambique, Myanmar, Namibia, Nauru, Nepal, Netherlands, New Caledonia, New Zealand, Nicaragua, Niger, Nigeria, Niue, Norfolk Island, Northern Mariana Islands, Norway, Oman, Pakistan, Palau, Palestinian Authority, Panama, Papua New Guinea, Paraguay, Peru, Philippines, Pitcairn, Poland, Portugal, Puerto Rico, Qatar, Réunion, Romania, Russia, Rwanda, Saint Barthélemy, Saint Helena, Ascension, Tristan da Cunha, Saint Kitts and Nevis, Saint Lucia, Saint Martin (French part), Saint Pierre and Miquelon, Saint Vincent and the Grenadines, Samoa, San Marino, São Tomé and Príncipe, Saudi Arabia, Senegal, Serbia, Seychelles, Sierra Leone, Singapore, Sint Maarten (Dutch part), Slovakia, Slovenia, Solomon Islands, Somalia, South Africa, South Georgia and the South Sandwich Islands, South Sudan, Spain, Sri Lanka, Sudan, Suriname, Svalbard and Jan Mayen, Swaziland, Sweden, Switzerland, Syrian Arab Republic, Taiwan, Tajikistan, Tanzania, Thailand, Timor-Leste, Togo, Tokelau, Tonga, Trinidad and Tobago, Tunisia, Türkiye, Turkmenistan, Turks and Caicos Islands, Tuvalu, Uganda, Ukraine, United Arab Emirates, United Kingdom of Great Britain and Northern Ireland, United States of America, United States Minor Outlying Islands, Uruguay, Uzbekistan, Vanuatu, Bolivarian Republic of Venezuela, Vietnam, Virgin Islands (British), Virgin Islands (U.S.), Wallis and Futuna, Yemen, Zambia, Zimbabwe, None",
        "Description": "The country of the user as a two-letter code (ISO 3166-1 alpha-2)"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "Active Directory entry not found",
        "Description": "Indicates that the Active Directory entry given isn't found on the Active Directory server"
      },
      {
        "Exception": "Object doesn't exist on server",
        "Description": "Indicates that the object doesn't exist in the Active Directory server"
      },
      {
        "Exception": "Couldn't set or update password",
        "Description": "Indicates a problem setting or updating the user's password"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Connect to server",
    "description": "Connects to an Active Directory server.",
    "Input parameters": [
      {
        "Argument": "LDAP path",
        "Type": "Text value",
        "Description": "The LDAP path of the Active Directory server"
      },
      {
        "Argument": "Use authentication",
        "Type": "Boolean value",
        "Description": "Specify whether authentication is needed to connect to the server"
      },
      {
        "Argument": "Username",
        "Type": "Text value",
        "Description": "The user's username"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The user's password"
      },
      {
        "Argument": "Authentication type",
        "Type": "None, Secure, Encryption, Secure sockets layer, Read-only server, Anonymous, Fast bind, Signing, Sealing, Delegation, Server bind",
        "Description": "Specify the type of authentication to be used"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ParentDirectoryEntry",
        "Type": "Active Directory entry",
        "Description": "The parent of the Active Directory entry for use with later Active Directory actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication error",
        "Description": "Indicates an error with the user's authentication"
      },
      {
        "Exception": "Unauthorized access",
        "Description": "Indicates that an authorization error occurred"
      },
      {
        "Exception": "The server isn't operational",
        "Description": "Indicates that the Active Directory server isn't operational"
      },
      {
        "Exception": "Invalid operation",
        "Description": "Indicates an invalid operation error"
      },
      {
        "Exception": "Active Directory error",
        "Description": "General Active Directory error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Active Directory",
    "action": "Close connection",
    "description": "Closes the connection with the Active Directory server.",
    "Input parameters": [
      {
        "Argument": "Parent directory entry",
        "Type": "Active Directory entry",
        "Description": "The parent entry of the Active Directory server"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Database",
    "action": "Open SQL connection",
    "description": "Open a new connection to a database.",
    "Input parameters": [
      {
        "Argument": "Connection string",
        "Type": "Text value",
        "Description": "The connection string to use to connect to the database"
      }
    ],
    "Variables produced": [
      {
        "Argument": "SQLConnection",
        "Type": "SQL connection",
        "Description": "A handle for the new SQL connection"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't connect to data source",
        "Description": "Indicates a problem connecting to the data source"
      },
      {
        "Exception": "Invalid connection string",
        "Description": "Indicates that the specified connection string is invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Database",
    "action": "Natural language to script powered by copilot (preview)",
    "description": "[This topic is prerelease documentation and is subject to change.]",
    "Input parameters": [
      {
        "Argument": "Get connection by",
        "Type": "Connection string, [SQL connection variable]",
        "Description": "Specifies whether to create a new connection from a given connection string or select an already open connection"
      },
      {
        "Argument": "SQL connection",
        "Type": "SQL connection",
        "Description": "The handle for the new SQL connection"
      },
      {
        "Argument": "Connection string",
        "Type": "Text value",
        "Description": "The connection string to use to connect to the database"
      },
      {
        "Argument": "SQL statement",
        "Type": "Text value",
        "Description": "The SQL statement to execute to the database"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The maximum amount of time to wait for a result from the database"
      }
    ],
    "Variables produced": [
      {
        "Argument": "QueryResult",
        "Type": "Datatable",
        "Description": "The result from the database in the form of a data table, with rows and columns"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't connect to data source",
        "Description": "Indicates a problem connecting to the data source"
      },
      {
        "Exception": "Invalid connection string",
        "Description": "Indicates that the specified connection string is invalid"
      },
      {
        "Exception": "Error in SQL statement",
        "Description": "Indicates there's an error in the given SQL statement"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Database",
    "action": "Close SQL connection",
    "description": "Close an open connection to a database.",
    "Input parameters": [
      {
        "Argument": "SQL connection",
        "Type": "SQL connection",
        "Description": "The handle for the new SQL connection"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "IBM Cognitive",
    "action": "Convert document",
    "description": "Invokes the IBM service named 'Convert Document'.",
    "Input parameters": [
      {
        "Argument": "Username",
        "Type": "Text value",
        "Description": "The username to be used for this call"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password to use for this call"
      },
      {
        "Argument": "Version date",
        "Type": "Text value",
        "Description": "The release date of the API to use"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The path to the file to analyze"
      },
      {
        "Argument": "Mime type",
        "Type": "text/html, text/xhtml+xml, application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "Description": "The MIME type of the file"
      },
      {
        "Argument": "Conversion target",
        "Type": "Answer units, Normalized HTML, Normalized text",
        "Description": "The output format of the conversion"
      },
      {
        "Argument": "Answer units",
        "Type": "Text value",
        "Description": "The heading levels as a comma-separated string"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The results of the API call"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code of the API call"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "IBM Cognitive",
    "action": "Translate",
    "description": "Invokes the IBM service named 'Translate'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The API key to use for this call"
      },
      {
        "Argument": "Version date",
        "Type": "Text value",
        "Description": "The release date of the API to use"
      },
      {
        "Argument": "Service endpoint location",
        "Type": "US South, US East, Europe, Australia, Japan, UK, Korea",
        "Description": "The account's service location. Can be seen through IBM \"Manage\" in the resources section"
      },
      {
        "Argument": "Instance ID",
        "Type": "Text value",
        "Description": "The Instance ID of the service."
      },
      {
        "Argument": "Translate mode",
        "Type": "Model ID, Source and target",
        "Description": "Specify the mode to be used for this call"
      },
      {
        "Argument": "Model ID",
        "Type": "Text value",
        "Description": "The unique model_id of the translation model that will be used to translate the text"
      },
      {
        "Argument": "Source",
        "Type": "Text value",
        "Description": "The source language of the text"
      },
      {
        "Argument": "Target",
        "Type": "Text value",
        "Description": "The translation target language in 2 or 5 letter language code"
      },
      {
        "Argument": "Text",
        "Type": "List of Text values",
        "Description": "The text to send or list of words to be separately translated"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The results of the API call"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "IBM Cognitive",
    "action": "Identify language",
    "description": "Invokes the IBM service named 'Identify Language'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The API key to use for this call"
      },
      {
        "Argument": "Version date",
        "Type": "Text value",
        "Description": "The release date of the API to use"
      },
      {
        "Argument": "Service endpoint location",
        "Type": "US South, US East, Europe, Australia, Japan, UK, Korea",
        "Description": "The account's service location. Can be seen through IBM \"Manage\" in the resources section"
      },
      {
        "Argument": "Instance ID",
        "Type": "Text value",
        "Description": "The Instance ID of the service."
      },
      {
        "Argument": "Text",
        "Type": "Text value",
        "Description": "The text to analyze"
      },
      {
        "Argument": "Content type",
        "Type": "Text value",
        "Description": "The format of the requested values"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The results of the API call"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code of the API call"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "IBM Cognitive",
    "action": "Analyze tone",
    "description": "Invokes the IBM service named 'Analyze Tone'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The API key to use for this call"
      },
      {
        "Argument": "Version date",
        "Type": "Text value",
        "Description": "The release date of the API to use"
      },
      {
        "Argument": "Service endpoint location",
        "Type": "US South, US East, Europe, Australia, Japan, UK, Korea",
        "Description": "The account's service location. Can be seen through IBM \"Manage\" in the resources section"
      },
      {
        "Argument": "Instance ID",
        "Type": "Text value",
        "Description": "The Instance ID of the service."
      },
      {
        "Argument": "Provide text",
        "Type": "From text, From file",
        "Description": "Specify how the text to be analyzed will be provided"
      },
      {
        "Argument": "Text",
        "Type": "Text value",
        "Description": "The text to analyze"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The path to the file to analyze"
      },
      {
        "Argument": "Content type",
        "Type": "text/plain, text/html, application/json",
        "Description": "The content type of the text that will be sent"
      },
      {
        "Argument": "Tones",
        "Type": "Text value",
        "Description": "The tone with which the results will be filtered (optional)"
      },
      {
        "Argument": "Sentences",
        "Type": "Text value",
        "Description": "Specify whether to remove the sentence analysis"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The results of the API call"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code of the API call"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "IBM Cognitive",
    "action": "Classify Image",
    "description": "Invokes the IBM service named 'Classify Image'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The API key to use for this call"
      },
      {
        "Argument": "Version date",
        "Type": "Text value",
        "Description": "The release date of the API to use"
      },
      {
        "Argument": "Service endpoint location",
        "Type": "US South, Europe, Korea",
        "Description": "The account's service location. Can be seen through IBM \"Manage\" in the resources section"
      },
      {
        "Argument": "Instance ID",
        "Type": "Text value",
        "Description": "The Instance ID of the service."
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify how the image will be provided"
      },
      {
        "Argument": "Image file path",
        "Type": "File",
        "Description": "The path to the image to be analyzed"
      },
      {
        "Argument": "Image URL",
        "Type": "Text value",
        "Description": "The URL of the image to be analyzed"
      },
      {
        "Argument": "Owners",
        "Type": "Text value",
        "Description": "The classifiers to be used as a comma separated list"
      },
      {
        "Argument": "Classifier IDs",
        "Type": "Text value",
        "Description": "The classifier Ids to be used as a comma separated list"
      },
      {
        "Argument": "Threshold",
        "Type": "Text value",
        "Description": "The minimum score a class must have to be displayed in the response as a floating value"
      },
      {
        "Argument": "Language",
        "Type": "Text value",
        "Description": "The language of the output"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The results of the API call"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code of the API call"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Launch SAP",
    "description": "Open the SAP GUI application and connect to an SAP system.",
    "Input parameters": [
      {
        "Argument": "Connection mode",
        "Type": "Server description and server connection string",
        "Description": "Specify how to connect to the SAP GUI server."
      },
      {
        "Argument": "Login mode",
        "Type": "Manual login and single sign-on (SSO)",
        "Description": "Specify how to log in to the SAP GUI server, either log in to the server by manually entering your username and password or using single sign-on (SSO)."
      },
      {
        "Argument": "Server description",
        "Type": "Text value",
        "Description": "Specifies SAP system name or IP address for connection."
      },
      {
        "Argument": "Connection string",
        "Type": "Text value",
        "Description": "Specifies the connection string for the SAP GUI server. The connection string is a unique identifier that specifies the server's name, system number, and other connection details."
      },
      {
        "Argument": "Client",
        "Type": "Text value",
        "Description": "Specifies the SAP client number for connection."
      },
      {
        "Argument": "Username",
        "Type": "Text value",
        "Description": "Specifies the SAP user ID for login."
      },
      {
        "Argument": "Password",
        "Type": "Text value",
        "Description": "Specifies the SAP user password for login."
      },
      {
        "Argument": "Language",
        "Type": "Text value",
        "Description": "Specifies the SAP login language for the user interface."
      },
      {
        "Argument": "Multiple logon options",
        "Type": "Terminate this logon, continue this logon and end any other logons, Continue this logon without ending any other logons in the system",
        "Description": "Multiple logon options specify how the SAP system behaves when the user tries to log in when they're already logged in."
      }
    ],
    "Variables produced": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "The SAP instance to use with SAP automation actions. The SAP instance refers to the specific SAP window."
      },
      {
        "Argument": "CurrentSAPLoginTerminated",
        "Type": "Boolean value",
        "Description": "Whether the SAP login being performed with the specific action is terminated or not."
      },
      {
        "Argument": "OtherSAPLoginTerminated",
        "Type": "Boolean value",
        "Description": "Whether the other SAP logins are terminated or not."
      }
    ],
    "Exceptions": [
      {
        "Exception": "SAP GUI login action fails",
        "Description": "Indicates a problem logging in to an SAP GUI system."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Attach",
    "description": "Attach the running SAP GUI application to an SAP instance.",
    "Input parameters": [
      {
        "Argument": "Attach mode",
        "Type": "Foreground or last activated, Window title",
        "Description": "Specifies the mode for attaching the SAP instance to a window. If Foreground or last activated option is selected, the SAP instance is attached to the SAP session in the foreground. If there's no SAP session in the foreground, it attaches to the last SAP session that was launched and isn't closed yet."
      },
      {
        "Argument": "Window title",
        "Type": "Text",
        "Description": "Specifies the title of the SAP window to which the instance is attached. The window title can be selected from the drop-down list of existing SAP sessions or entered manually."
      }
    ],
    "Variables produced": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "The SAP instance to use with SAP automation actions. The SAP instance refers to the specific SAP window."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Attach to SAP error",
        "Description": "Indicates a problem attaching to an SAP instance."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Create new SAP session",
    "description": "Creates a new SAP session based on the same SAP instance.",
    "Input parameters": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "Select the variable that holds the SAP instance you want to work with. This variable should be defined in a previous SAP login action."
      }
    ],
    "Variables produced": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "The SAP instance to use with SAP automation actions. The SAP instance refers to the specific SAP window."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Create new SAP session action fails",
        "Description": "Indicates a problem creating a new SAP session."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Select SAP navigation item",
    "description": "Select an SAP menu item in the application toolbar of the SAP window.",
    "Input parameters": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "Select the variable that holds the SAP instance you want to work with. Define this variable in a previous SAP login action."
      },
      {
        "Argument": "Navigation item name",
        "Type": "Text value",
        "Description": "The name of the item in the navigation toolbar to select, such as 'System'. You can also specify an option from a submenu by using the '>' symbol to indicate the parent-child relationship. For example, 'Program > Execute' means that the 'Execute' option, which is part of the submenu under 'Program', is selected."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "SAP GUI select navigation toolbar item error",
        "Description": "Indicates a problem selecting a navigation toolbar item."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Select SAP menu item",
    "description": "Select an SAP menu item in the window tool bar. Enter the name of the item in the respective input parameter manually, in the same language as the SAP GUI screen is being displayed.",
    "Input parameters": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "Select the variable that holds the SAP instance you want to work with. This variable should be defined in a previous SAP login action."
      },
      {
        "Argument": "Menu item name",
        "Type": "Text value",
        "Description": "The name of the menu item in the toolbar to be selected, such as ‘Save’. Insert the name of the menu item as it's displayed in the machine’s SAP installation."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Select SAP menu item action fails",
        "Description": "Indicates a problem selecting a menu item."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Close SAP connection",
    "description": "Close the SAP connection of the selected SAP instance. Note that all instances related to the specific connection will be terminated.",
    "Input parameters": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "Select the variable that holds the SAP instance you want to work with. This variable should be defined in a previous SAP login action."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Close SAP session action fails",
        "Description": "Indicates a problem closing an SAP session."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Start SAP transaction",
    "description": "Opens a specific transaction code in existing session.",
    "Input parameters": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "Select the variable that holds the SAP instance you want to work with. This variable should be defined in a previous SAP login action."
      },
      {
        "Argument": "Transaction code",
        "Type": "Text value",
        "Description": "The transaction code that you desire to execute."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Start SAP transaction action fails",
        "Description": "Indicates a problem starting an SAP transaction."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "End SAP transaction",
    "description": "Closes the SAP transaction in a specific SAP instance and returns to the SAP easy access menu. An SAP transaction must be started before for the specific SAP session.",
    "Input parameters": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "Select the variable that holds the SAP instance you want to work with. This variable should be defined in a previous SAP login action."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "End SAP transaction action fails",
        "Description": "Indicates a problem ending an SAP transaction."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Click SAP UI element",
    "description": "Interacts through click action on any UI element of an SAP window.",
    "Input parameters": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "Select the variable that holds the SAP instance you want to work with. This variable should be defined in a previous SAP login action."
      },
      {
        "Argument": "Element type",
        "Type": "Basic SAP element, Checkbox, Label, Drop-down list, Grid element",
        "Description": "Select the SAP element type you want to interact with. The ‘Click SAP element’ option performs a click action on any SAP element like buttons, radio buttons, tabs, text fields, or trees."
      },
      {
        "Argument": "SAP element ID",
        "Type": "Numeric",
        "Description": "The SAP element’s ID. This parameter determines the UI element in SAP that action interacts with. You can use the below button for indication the SAP UI element in the SAP screen or insert the value manually."
      },
      {
        "Argument": "SAP element ID",
        "Type": "Numeric",
        "Description": "The SAP element’s ID. This parameter determines the UI element in SAP that action interacts with. You can use the below button for indication the SAP UI element in the SAP screen or insert the value manually."
      },
      {
        "Argument": "Set SAP checkbox state to",
        "Type": "Checked, Unchecked",
        "Description": "Specify whether the checkbox becomes checked or unchecked."
      },
      {
        "Argument": "SAP label operation",
        "Type": "Expand, Collapse, Choose",
        "Description": "Specify whether to expand or collapse the SAP label."
      },
      {
        "Argument": "Drop-down option value",
        "Type": "Text value",
        "Description": "Specify the drop-down option is selected."
      },
      {
        "Argument": "SAP grid element",
        "Type": "Cell, Row, Header, List, Button, Toolbar Button, Checkbox, Radio Button",
        "Description": "Select the SAP grid element type you want to interact with."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Click Sap GUI Element error",
        "Description": "Indicates that the click failed."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Get details of SAP UI element",
    "description": "Gets the value of an SAP UI element's attribute in an SAP window.",
    "Input parameters": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "Select the variable that holds the SAP instance you want to work with. This variable should be defined in a previous SAP login action."
      },
      {
        "Argument": "SAP element ID",
        "Type": "Numeric",
        "Description": "The SAP element’s ID. This parameter determines the UI element in SAP that action interacts with. You can use the below button for indication the SAP UI element in the SAP screen or insert the value manually."
      },
      {
        "Argument": "Attribute name",
        "Type": "Text value",
        "Description": "The attribute whose value is retrieved."
      }
    ],
    "Variables produced": [
      {
        "Argument": "AttributeValue",
        "Type": "Text value",
        "Description": "The value of the SAP UI element's attribute."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Get SAP element detail error",
        "Description": "Indicates a problem retrieving the UI element's attribute."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "SAP automation",
    "action": "Populate SAP text field in element",
    "description": "Fills a text box in an SAP window with the specified text.",
    "Input parameters": [
      {
        "Argument": "SAPInstance",
        "Type": "SAP instance",
        "Description": "Select the variable that holds the SAP instance you want to work with. This variable should be defined in a previous SAP login action."
      },
      {
        "Argument": "SAP element ID",
        "Type": "Numeric",
        "Description": "The SAP element’s ID. This parameter determines the UI element in SAP that action interacts with. You can use the below button for indication the SAP UI element in the SAP screen or insert the value manually."
      },
      {
        "Argument": "Text to fill in",
        "Type": "Direct encrypted input or Text value",
        "Description": "The text to fill in the SAP text field"
      },
      {
        "Argument": "If field isn't empty",
        "Type": "Replace text, Append text",
        "Description": "Specify whether to replace existing content, or to append."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Populate Sap Text Field Value error",
        "Description": "Indicates a problem populating the specified SAP text field."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AI Builder (Preview)",
    "action": "Create text with GPT (preview)",
    "description": "Get a response generated by GPT.",
    "Input parameters": [
      {
        "Argument": "Instructions",
        "Type": "Text value",
        "Description": "Provide instructions for the GPT model to perform a task"
      }
    ],
    "Variables produced": [
      {
        "Argument": "PredictV2Response",
        "Type": "Connector object"
      },
      {
        "Argument": "PredictV2TextResponse",
        "Type": "Text"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Endpoint failure",
        "Description": "Indicates an endpoint failure"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Date time",
    "action": "Add to datetime",
    "description": "Adds (or subtracts) a specific number of seconds, minutes, hours or days to a datetime value.",
    "Input parameters": [
      {
        "Argument": "Datetime",
        "Type": "Datetime",
        "Description": "The datetime value to alter"
      },
      {
        "Argument": "Add",
        "Type": "Numeric value",
        "Description": "The numeric value to add. To subtract a time, the value should be negative. For example, add -7 days here to go back one week"
      },
      {
        "Argument": "Time unit",
        "Type": "Seconds, Minutes, Hours, Days, Months, Years",
        "Description": "The time unit the time to add represents"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ResultedDate",
        "Type": "Datetime",
        "Description": "The new, altered datetime value"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Date time",
    "action": "Subtract dates",
    "description": "Finds the time difference between two given dates in days, hours, minutes, or seconds.",
    "Input parameters": [
      {
        "Argument": "From date",
        "Type": "Datetime",
        "Description": "The datetime to subtract the first datetime from. This will be the base datetime, so generally put the later date/time in this attribute"
      },
      {
        "Argument": "Subtract date",
        "Type": "Datetime",
        "Description": "The datetime to subtract"
      },
      {
        "Argument": "Get difference in",
        "Type": "Seconds, Minutes, Hours, Days",
        "Description": "The unit of time to express the difference in"
      }
    ],
    "Variables produced": [
      {
        "Argument": "TimeDifference",
        "Type": "Numeric value",
        "Description": "The difference in time as a numeric value"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Date time",
    "action": "Get current date and time",
    "description": "Retrieves the current date or the current date and time.",
    "Input parameters": [
      {
        "Argument": "Retrieve",
        "Type": "Current date and time, Current date only",
        "Description": "Specify whether to get the date and time, or just the date. If the latter is chosen, the time value will be stored as midnight (0:00:00)"
      },
      {
        "Argument": "Time zone",
        "Type": "System time zone, Specific time zone (to be deprecated), Windows time zone, Custom input",
        "Description": "Specify whether to use the system's time zone or select a specific one or set up a time zone manually"
      },
      {
        "Argument": "Country/region",
        "Type": "Text value",
        "Description": "The country/region to get the time of or add a numeric value as the hours that will be added in the UTC time zone"
      },
      {
        "Argument": "Windows time zone",
        "Type": "Available Windows time zones",
        "Description": "Specify the country/region to obtain the time zone from"
      },
      {
        "Argument": "Input Type",
        "Type": "Offset, Windows time zone",
        "Description": "Choose whether to set the offset via a numeric value or by providing a Windows format time zone"
      },
      {
        "Argument": "Offset",
        "Type": "Numeric value",
        "Description": "Specify the number of hours the offset is going to be. Time format is UTC."
      },
      {
        "Argument": "Time zone",
        "Type": "Text value",
        "Description": "Specify the time zone (Windows time zone)"
      }
    ],
    "Variables produced": [
      {
        "Argument": "CurrentDateTime",
        "Type": "Datetime",
        "Description": "The current datetime value"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to get current date and time",
        "Description": "Indicates that there was a problem retrieving the current date and time"
      },
      {
        "Exception": "Specified country/region not found",
        "Description": "Indicates that the specified country or region wasn't found"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Logging",
    "action": "Log message",
    "description": "Adds a custom text message to the flow run action details.",
    "Input parameters": [
      {
        "Argument": "Message",
        "Type": "Text value",
        "Description": "The message to log"
      },
      {
        "Argument": "Log level",
        "Type": "Info, Warning, Error",
        "Description": "The severity level of the message"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Scripting",
    "action": "Run DOS command",
    "description": "Executes a DOS command or console application in invisible mode and retrieves its output upon completion.",
    "Input parameters": [
      {
        "Argument": "DOS command or application",
        "Type": "File",
        "Description": "The name of DOS command or a console application, with arguments if applicable"
      },
      {
        "Argument": "Working folder",
        "Type": "Folder",
        "Description": "The full path of the folder to work out of, if applicable"
      },
      {
        "Argument": "Fail after timeout",
        "Type": "Boolean value",
        "Description": "Specify whether the DOS command or application will run indefinitely or fail after a set period of time"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The maximum number of seconds to wait for the script to complete (-1 for indefinitely)"
      },
      {
        "Argument": "Change code page",
        "Type": "Boolean value",
        "Description": "Specifies whether to change the session's current code page"
      },
      {
        "Argument": "Encoding",
        "Type": "ASMO-708: Arabic (ASMO 708), big5: Chinese Traditional (Big5), cp1025: IBM EBCDIC (Cyrillic Serbian-Bulgarian), cp866: Cyrillic (DOS), cp875: IBM EBCDIC (Greek Modern), csISO2022JP: Japanese (JIS-Allow 1 byte Kana), DOS-720: Arabic (DOS), DOS-862: Hebrew (DOS), EUC-CN: Chinese Simplified (EUC), EUC-JP: Japanese (JIS 0208-1990 and 0212-1990), euc-jp: Japanese (EUC), euc-kr: Korean (EUC), GB18030: Chinese Simplified (GB18030), gb2312: Chinese Simplified (GB2312), hz-gb-2312: Chinese Simplified (HZ), IBM-Thai: IBM EBCDIC (Thai), IBM00858: OEM Multilingual Latin I, IBM00924: IBM Latin-1, IBM01047: IBM Latin-1, IBM01140: IBM EBCDIC (US-Canada-Euro), IBM01141: IBM EBCDIC (Germany-Euro), IBM01142: IBM EBCDIC (Denmark-Norway-Euro), IBM01143: IBM EBCDIC (Finland-Sweden-Euro), IBM01144: IBM EBCDIC (Italy Euro), IBM01145: IBM EBCDIC (Spain-Euro), IBM01146: IBM EBCDIC (UK-Euro), IBM01147: IBM EBCDIC (France-Euro), IBM01148: IBM EBCDIC (International-Euro), IBM01149: IBM EBCDIC (Icelandic-Euro), IBM037: IBM EBCDIC (US-Canada), IBM1026: IBM EBCDIC (Turkish Latin-5), IBM273: IBM EBCDIC (Germany), IBM277: IBM EBCDIC (Denmark-Norway), IBM278: IBM EBCDIC (Finland-Sweden), IBM280: IBM EBCDIC (Italy), IBM284: IBM EBCDIC (Spain), IBM285: IBM EBCDIC (UK), IBM290: IBM EBCDIC (Japanese katakana), IBM297: IBM EBCDIC (France), IBM420: IBM EBCDIC (Arabic), IBM423: IBM EBCDIC (Greek), IBM424: IBM EBCDIC (Hebrew), IBM437: OEM United States, IBM500: IBM EBCDIC (International), ibm737: Greek (DOS), ibm775: Baltic (DOS), ibm850: Western European (DOS), ibm852: Central European (DOS), IBM855: OEM Cyrillic, ibm857: Turkish (DOS), IBM860: Portuguese (DOS), ibm861: Icelandic (DOS), IBM863: French Canadian (DOS), IBM864: Arabic (864), IBM865: Nordic (DOS), ibm869: Greek, Modern (DOS), IBM870: IBM EBCDIC (Multilingual Latin-2), IBM871: IBM EBCDIC (Icelandic), IBM880: IBM EBCDIC (Cyrillic Russian), IBM905: IBM EBCDIC (Turkish), iso-2022-jp: Japanese (JIS), iso-2022-jp: Japanese (JIS-Allow 1 byte Kana - SO/SI), iso-2022-kr: Korean (ISO), iso-8859-1: Western European (ISO), iso-8859-13: Estonian (ISO), iso-8859-15: Latin 9 (ISO), iso-8859-2: Central European (ISO), iso-8859-3: Latin 3 (ISO), iso-8859-4: Baltic (ISO), iso-8859-5: Cyrillic (ISO), iso-8859-6: Arabic (ISO), iso-8859-7: Greek (ISO), iso-8859-8: Hebrew (ISO-Visual), iso-8859-8-i: Hebrew (ISO-Logical), iso-8859-9: Turkish (ISO), Johab: Korean (Johab), koi8-r: Cyrillic (KOI8-R), koi8-u: Cyrillic (KOI8-U), ks_c_5601-1987: Korean, macintosh: Western European (Mac), shift_jis: Japanese (Shift-JIS), us-ascii: US-ASCII, utf-16: Unicode, utf-16BE: Unicode (Big-Endian), utf-32: Unicode (UTF-32), utf-32BE: Unicode (UTF-32 Big-Endian), utf-7: Unicode (UTF-7), utf-8: Unicode (UTF-8), windows-1250: Central European (Windows), windows-1251: Cyrillic (Windows), Windows-1252: Western European (Windows), windows-1253: Greek (Windows), windows-1254: Turkish (Windows), windows-1255: Hebrew (Windows), windows-1256: Arabic (Windows), windows-1257: Baltic (Windows), windows-1258: Vietnamese (Windows), windows-874: Thai (Windows), x-Chinese-CNS: Chinese Traditional (CNS), x-Chinese-Eten: Chinese Traditional (Eten), x-cp20001: TCA Taiwan, x-cp20003: IBM5550 Taiwan, x-cp20004: TeleText Taiwan, x-cp20005: Wang Taiwan, x-cp20261: T.61, x-cp20269: ISO-6937, x-cp20936: Chinese Simplified (GB2312-80), x-cp20949: Korean Wansung, x-cp50227: Chinese Simplified (ISO-2022), x-EBCDIC-KoreanExtended: IBM EBCDIC (Korean Extended), x-Europa: Europa, x-IA5: Western European (IA5), x-IA5-German: German (IA5), x-IA5-Norwegian: Norwegian (IA5), x-IA5-Swedish: Swedish (IA5), x-iscii-as: ISCII Assamese, x-iscii-be: ISCII Bengali, x-iscii-de: ISCII Devanagari, x-iscii-gu: ISCII Gujarati, x-iscii-ka: ISCII Kannada, x-iscii-ma: ISCII Malayalam, x-iscii-or: ISCII Oriya, x-iscii-pa: ISCII Punjabi, x-iscii-ta: ISCII Tamil, x-iscii-te: ISCII Telugu, x-mac-arabic: Arabic (Mac), x-mac-ce: Central European (Mac), x-mac-chinesesimp: Chinese Simplified (Mac), x-mac-chinesetrad: Chinese Traditional (Mac), x-mac-croatian: Croatian (Mac), x-mac-cyrillic: Cyrillic (Mac), x-mac-greek: Greek (Mac), x-mac-hebrew: Hebrew (Mac), x-mac-icelandic: Icelandic (Mac), x-mac-japanese: Japanese (Mac), x-mac-korean: Korean (Mac), x-mac-romanian: Romanian (Mac), x-mac-thai: Thai (Mac), x-mac-turkish: Turkish (Mac), x-mac-ukrainian: Ukrainian (Mac)`",
        "Description": "The encoding to use when reading the output"
      }
    ],
    "Variables produced": [
      {
        "Argument": "CommandOutput",
        "Type": "Text value",
        "Description": "The text output from the DOS command or application"
      },
      {
        "Argument": "CommandErrorOutput",
        "Type": "Text value",
        "Description": "The text describing the errors occurred (if any) during the execution of the DOS command or application"
      },
      {
        "Argument": "CommandExitCode",
        "Type": "Numeric value",
        "Description": "The command or application exit code. This value is numeric"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't execute command or console application",
        "Description": "Indicates a problem executing the specified command or console application"
      },
      {
        "Exception": "Failed to run script in the allotted time",
        "Description": "Indicates a problem running the provided script in the allotted time"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Scripting",
    "action": "Run VBScript",
    "description": "Executes some custom VBScript code and retrieves its output into a variable.",
    "Input parameters": [
      {
        "Argument": "VBScript to run",
        "Type": "Text value",
        "Description": "The VBScript code to execute. Variables might be included within the script since they evaluate before the execution of the VBScript"
      },
      {
        "Argument": "Fail after timeout",
        "Type": "Boolean value",
        "Description": "Specify whether the VBScript script will run indefinitely or fail after a set period of time"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The maximum number of seconds to wait for the script to complete (-1 for indefinitely)"
      }
    ],
    "Variables produced": [
      {
        "Argument": "VBScriptOutput",
        "Type": "Text value",
        "Description": "The script's output"
      },
      {
        "Argument": "ScriptError",
        "Type": "Text value",
        "Description": "The errors that might occur during the execution of the VBScript code"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to run script in the allotted time",
        "Description": "Indicates a problem running the provided script in the allotted time"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Scripting",
    "action": "Run JavaScript",
    "description": "Executes some custom JavaScript code and retrieves its output into a variable.",
    "Input parameters": [
      {
        "Argument": "JavaScript to run",
        "Type": "Text value",
        "Description": "The JavaScript code to execute. Variables might be included within the script since they evaluate before the JavaScript code's execution"
      },
      {
        "Argument": "Fail after timeout",
        "Type": "Boolean value",
        "Description": "Specify whether the JavaScript script will run indefinitely or fail after a set period of time"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The maximum number of seconds to wait for the script to complete (-1 for indefinitely)"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JavascriptOutput",
        "Type": "Text value",
        "Description": "The script's output"
      },
      {
        "Argument": "ScriptError",
        "Type": "Text value",
        "Description": "The errors that might occur during the execution of the JavaScript code"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to run script in the allotted time",
        "Description": "Indicates a problem running the provided script in the allotted time"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Scripting",
    "action": "Run PowerShell script",
    "description": "Executes some custom PowerShell script and retrieves its output into a variable.",
    "Input parameters": [
      {
        "Argument": "PowerShell code to run",
        "Type": "Text value",
        "Description": "The PowerShell code to execute. Variables can be included within the script since they evaluate before the execution of the PowerShell code"
      },
      {
        "Argument": "Fail after timeout",
        "Type": "Boolean value",
        "Description": "Specify whether the PowerShell script will run indefinitely or fail after a set period of time"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The maximum number of seconds to wait for the script to complete (-1 for indefinitely)"
      }
    ],
    "Variables produced": [
      {
        "Argument": "PowershellOutput",
        "Type": "Text value",
        "Description": "The script's output"
      },
      {
        "Argument": "ScriptError",
        "Type": "Text value",
        "Description": "The errors that might occur during the execution of the PowerShell code"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to run PowerShell script",
        "Description": "Indicates a problem running the provided PowerShell script"
      },
      {
        "Exception": "Failed to run script in the allotted time",
        "Description": "Indicates a problem running the provided script in the allotted time"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Scripting",
    "action": "Run Python script",
    "description": "Executes Python script code and retrieves its output.",
    "Input parameters": [
      {
        "Argument": "Python script to run",
        "Type": "Text value",
        "Description": "The Python script code to execute"
      },
      {
        "Argument": "Python version",
        "Type": "Python 2.7, Python 3.4",
        "Description": "Specify which version of Python to use when executing the script"
      },
      {
        "Argument": "Module folder paths",
        "Type": "List of Folders",
        "Description": "The paths of folders where external Python modules lie"
      }
    ],
    "Variables produced": [
      {
        "Argument": "PythonScriptOutput",
        "Type": "Text value",
        "Description": "The script's output"
      },
      {
        "Argument": "ScriptError",
        "Type": "Text value",
        "Description": "The errors that might occur during the execution of the Python script code"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to run Python script",
        "Description": "Indicates a problem running the provided Python script"
      },
      {
        "Exception": "Directory not found",
        "Description": "Indicates that the directory wasn't found"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Scripting",
    "action": "Run .NET script",
    "description": "Executes .NET (C#/VB.NET) script code and retrieves its output.",
    "Input parameters": [
      {
        "Argument": "Language",
        "Type": "C#/ VB.NET",
        "Description": "The language of the script"
      },
      {
        "Argument": ".NET script imports",
        "Type": "Text value",
        "Description": "The .NET script imports to be included in the script"
      },
      {
        "Argument": "References to be loaded",
        "Type": "Folder",
        "Description": "The root path where .NET dynamic link libraries (.dll files) references are located"
      },
      {
        "Argument": "Script parameters",
        "Type": "Script Parameters as defined by the user",
        "Description": "Setting the values of the parameters that are defined in the script"
      },
      {
        "Argument": ".NET code to run",
        "Type": "Text value",
        "Description": "The .NET code to run"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to run the .NET script",
        "Description": "Indicates a problem running the provided .NET script"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Start EC2 instance",
    "description": "Start EC2 instance(s).",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Instance IDs",
        "Type": "List of Text values",
        "Description": "The instance IDs to start"
      }
    ],
    "Variables produced": [
      {
        "Argument": "StartingEc2Instances",
        "Type": "List of Instance state changes",
        "Description": "The returned information for the started instances"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Invalid instance ID",
        "Description": "Indicates that either the specified instance ID is malformed, or that the specified instance doesn't exist"
      },
      {
        "Exception": "Insufficient capacity",
        "Description": "Indicates that there isn't enough capacity to fulfill the request"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Stop EC2 instance",
    "description": "Stop EC2 instance(s).",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Instance IDs",
        "Type": "List of Text values",
        "Description": "The instance IDs to stop"
      },
      {
        "Argument": "Force stop",
        "Type": "Boolean value",
        "Description": "Specifies whether to force the instances to stop. The instances don't have an opportunity to flush file system caches or file system metadata"
      },
      {
        "Argument": "Hibernation:",
        "Type": "Boolean value",
        "Description": "Specifies whether to hibernate the instance, if it was enabled for hibernation at launch. If the instance can't hibernate successfully, a normal shutdown occurs"
      }
    ],
    "Variables produced": [
      {
        "Argument": "StoppingEc2Instances",
        "Type": "List of Instance state changes",
        "Description": "The returned information for the stopped instances"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Unsupported operation",
        "Description": "Indicates that an unsupported operation was requested. For example, an instance that is instance store-backed can't be stopped"
      },
      {
        "Exception": "Invalid instance ID",
        "Description": "Indicates that either the specified instance ID is malformed, or that the specified instance doesn't exist"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Reboot EC2 instance",
    "description": "Reboot EC2 instance(s).",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Instance IDs",
        "Type": "List of Text values",
        "Description": "The instance IDs to reboot"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Unsupported operation",
        "Description": "Indicates that an unsupported operation was requested. For example, an instance that is instance store-backed can't be stopped"
      },
      {
        "Exception": "Invalid instance ID",
        "Description": "Indicates that either the specified instance ID is malformed, or that the specified instance doesn't exist"
      },
      {
        "Exception": "Incorrect state for the request",
        "Description": "Indicates that the resource is in an incorrect state for the request. This exception can occur if there's an attempt to attach a volume that is still being created (ensure that the volume is 'available') or detach a volume that isn't attached"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Get available EC2 instances",
    "description": "Get information for the relevant EC2 instances.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Availability zone",
        "Type": "Text value",
        "Description": "Specifies the availability zone, a region code followed by a letter identifier"
      },
      {
        "Argument": "Instance state",
        "Type": "Pending, All, Unknown, Running, Shutting down, Terminated, Stopping, Stopped",
        "Description": "The state of the instance (pending, running, shutting down, terminated, stopping, stopped)"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Ec2InstancesInfo",
        "Type": "List of EC2 instances info",
        "Description": "The list of the EC2 instances"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Describe instances",
    "description": "Returns all the information for the specified EC2 instance(s).",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Instance IDs",
        "Type": "List of Text values",
        "Description": "The instance IDs to describe"
      },
      {
        "Argument": "Availability zone",
        "Type": "Text value",
        "Description": "Specifies the availability zone, a region code followed by a letter identifier"
      },
      {
        "Argument": "Instance state",
        "Type": "Pending, All, Unknown, Running, Shutting down, Terminated, Stopping, Stopped",
        "Description": "The current state of the instance"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Ec2Instances",
        "Type": "List of EC2 instances",
        "Description": "The retrieved instance(s) with all the relevant information"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Invalid instance ID",
        "Description": "Indicates that either the specified instance ID is malformed, or that the specified instance doesn't exist"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Create snapshot",
    "description": "Create a snapshot of an EBS volume and stores it in Amazon S3.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Volume ID",
        "Type": "Text value",
        "Description": "The ID of the EBS volume"
      },
      {
        "Argument": "Name",
        "Type": "Text value",
        "Description": "The name of the snapshot"
      },
      {
        "Argument": "Description",
        "Type": "Text value",
        "Description": "A description for the snapshot"
      },
      {
        "Argument": "Purpose",
        "Type": "Text value",
        "Description": "The purpose of the snapshot"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Snapshot",
        "Type": "EBS snapshot",
        "Description": "The created snapshot"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Invalid volume",
        "Description": "Indicates that either the volume ID isn't valid, or the specified volume doesn't exist"
      },
      {
        "Exception": "or the volume isn't in the same qvailability zone as the specified instance"
      },
      {
        "Exception": "Resource's limit is exceeded",
        "Description": "Indicates that the limit for the specified resource is reached"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Describe snapshots",
    "description": "Describes the specified EBS snapshots available.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Describe snapshots mode",
        "Type": "All snapshots, Snapshots by ID, Snapshots by owner ID, Snapshots by restorable user ID, Snapshots by custom filter",
        "Description": "Specifies whether to get all snapshots of the defined region or filter snapshots by their ID, owner, or user by which they're restorable"
      },
      {
        "Argument": "Snapshot IDs",
        "Type": "List of Text values",
        "Description": "The snapshot IDs to describe"
      },
      {
        "Argument": "Owner IDs",
        "Type": "List of Text values",
        "Description": "The owner IDs who own the snapshots"
      },
      {
        "Argument": "Restorable by user IDs",
        "Type": "List of Text values",
        "Description": "The IDs of the AWS accounts that can create volumes from the snapshot"
      }
    ],
    "Variables produced": [
      {
        "Argument": "EBSSnapshots",
        "Type": "List of EBS snapshots",
        "Description": "The retrieved snapshot(s) with all the relevant information"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Invalid snapshot ID",
        "Description": "Indicates that either the specified snapshot ID is invalid, or that the specified snapshot doesn't exist"
      },
      {
        "Exception": "Invalid user ID",
        "Description": "Indicates that the specified user or owner isn't valid"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Delete snapshot",
    "description": "Delete the specified snapshot.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Snapshot ID",
        "Type": "Text value",
        "Description": "The ID of the EBS snapshot to delete"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Invalid snapshot ID",
        "Description": "Indicates that either the specified snapshot ID is invalid, or that the specified snapshot doesn't exist"
      },
      {
        "Exception": "The resource is in use",
        "Description": "Indicates that the operation can't be completed because the resource is in use"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Create volume",
    "description": "Create an EBS volume.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Name",
        "Type": "Text value",
        "Description": "The desired name for the volume"
      },
      {
        "Argument": "Purpose",
        "Type": "Text value",
        "Description": "The purpose of the volume, if any"
      },
      {
        "Argument": "Availability zone",
        "Type": "Text value",
        "Description": "Specifies the availability zone, a region code followed by a letter identifier"
      },
      {
        "Argument": "From snapshot",
        "Type": "Boolean value",
        "Description": "Specifies whether to create the volume from a specified snapshot"
      },
      {
        "Argument": "Snapshot ID",
        "Type": "Text value",
        "Description": "The snapshot from to create the volume from"
      },
      {
        "Argument": "Volume size",
        "Type": "Text value",
        "Description": "The size of the volume in GBs"
      },
      {
        "Argument": "Size",
        "Type": "Text value",
        "Description": "The size must be equal to or larger than the snapshot size"
      },
      {
        "Argument": "Encrypted",
        "Type": "Boolean value",
        "Description": "Specifies whether to encrypt the volume"
      },
      {
        "Argument": "Volume type",
        "Type": "Gp2, Standard, Io1, Sc1, St1",
        "Description": "The type of the volume"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Volume",
        "Type": "EBS volume",
        "Description": "The created volume"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Invalid parameter",
        "Description": "Indicates that a parameter specified in the request isn't valid, unsupported, or can't be used"
      },
      {
        "Exception": "Invalid zone",
        "Description": "Indicates that the specified availability zone doesn't exist, or isn't available to use"
      },
      {
        "Exception": "Resource's limit is exceeded",
        "Description": "Indicates that the limit for the specified resource is reached"
      },
      {
        "Exception": "Volume type isn't supported in the specified zone",
        "Description": "Indicates that the specified availability zone doesn't support provisioned IOPS SSD volumes"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Attach volume",
    "description": "Attach an EBS volume to an EC2 instance.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Volume ID",
        "Type": "Text value",
        "Description": "The ID of the EBS volume"
      },
      {
        "Argument": "Instance ID",
        "Type": "Text value",
        "Description": "The ID of the instance"
      },
      {
        "Argument": "Device name",
        "Type": "Text value",
        "Description": "The name of the device"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Unsupported operation",
        "Description": "Indicates that an unsupported operation was requested. For example, an instance that is instance store-backed can't be stopped"
      },
      {
        "Exception": "Invalid parameter",
        "Description": "Indicates that a parameter specified in the request isn't valid, unsupported, or can't be used"
      },
      {
        "Exception": "Invalid volume",
        "Description": "Indicates that either the volume ID isn't valid, or the specified volume doesn't exist"
      },
      {
        "Exception": "or the volume isn't in the same qvailability zone as the specified instance"
      },
      {
        "Exception": "The resource is in use",
        "Description": "Indicates that the operation can't be completed because the resource is in use"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Detach volume",
    "description": "Detach an EBS volume from an EC2 instance.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Volume ID",
        "Type": "Text value",
        "Description": "The ID of the EBS volume"
      },
      {
        "Argument": "Instance ID",
        "Type": "Text value",
        "Description": "The ID of the instance"
      },
      {
        "Argument": "Device name",
        "Type": "Text value",
        "Description": "The name of the device"
      },
      {
        "Argument": "Force detachment",
        "Type": "Boolean value",
        "Description": "Specifies whether to force detachment, if the previous detachment attempt didn't occur cleanly"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Unsupported operation",
        "Description": "Indicates that an unsupported operation was requested. For example, an instance that is instance store-backed can't be stopped"
      },
      {
        "Exception": "Invalid parameter",
        "Description": "Indicates that a parameter specified in the request isn't valid, unsupported, or can't be used"
      },
      {
        "Exception": "Invalid attempt to detach",
        "Description": "Indicates an attempt to detach a volume from an instance to which it isn't attached"
      },
      {
        "Exception": "Incorrect state for the request",
        "Description": "Indicates that the resource is in an incorrect state for the request. This exception can occur if there's an attempt to attach a volume that is still being created (ensure that the volume is 'available') or detach a volume that isn't attached"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Describe volumes",
    "description": "Describe the specified EBS volumes.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Describe volumes mode",
        "Type": "All volumes, Volumes of the specified instance, Volumes with the specified IDs",
        "Description": "Specifies whether to describe all volumes, volumes specified by ID or volumes of an instance"
      },
      {
        "Argument": "Volume IDs",
        "Type": "List of Text values",
        "Description": "The volume IDs to describe"
      },
      {
        "Argument": "Instance ID",
        "Type": "Text value",
        "Description": "The ID of the instance that the volume is attached to"
      }
    ],
    "Variables produced": [
      {
        "Argument": "EBSVolumes",
        "Type": "List of EBS volumes",
        "Description": "The retrieved EBS volumes with all the relevant information"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Invalid parameter",
        "Description": "Indicates that a parameter specified in the request isn't valid, unsupported, or can't be used"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Delete volume",
    "description": "Delete the specified EBS volume.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      },
      {
        "Argument": "Volume ID",
        "Type": "Text value",
        "Description": "The ID of the EBS volume to delete"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Authentication failed",
        "Description": "Indicates that the provided credentials couldn't be validated"
      },
      {
        "Exception": "Unauthorized operation",
        "Description": "Indicates that an unauthorized operation was requested"
      },
      {
        "Exception": "Invalid parameter",
        "Description": "Indicates that a parameter specified in the request isn't valid, unsupported, or can't be used"
      },
      {
        "Exception": "Invalid volume",
        "Description": "Indicates that either the volume ID isn't valid, or the specified volume doesn't exist or the volume isn't in the same qvailability zone as the specified instance"
      },
      {
        "Exception": "Incorrect state for the request",
        "Description": "Indicates that the resource is in an incorrect state for the request. This exception can occur if there's an attempt to attach a volume that is still being created (ensure that the volume is 'available') or detach a volume that isn't attached"
      },
      {
        "Exception": "The resource is in use",
        "Description": "Indicates that the operation can't be completed because the resource is in use"
      },
      {
        "Exception": "Amazon service request failed",
        "Description": "Indicates that the request to AWS failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "Create EC2 session",
    "description": "Create an EC2 client to automate EC2 web services.",
    "Input parameters": [
      {
        "Argument": "Access keys",
        "Type": "Boolean value",
        "Description": "Specifies whether to use access key ID and secret access key in order to create the EC2 session"
      },
      {
        "Argument": "Access key ID",
        "Type": "Text value",
        "Description": "The AWS access key ID"
      },
      {
        "Argument": "Secret",
        "Type": "Direct encrypted input or Text value",
        "Description": "The AWS secret access key"
      },
      {
        "Argument": "Region endpoint",
        "Type": "Text value",
        "Description": "The region constant to use that determines the endpoint to use"
      },
      {
        "Argument": "Profile name",
        "Type": "Text value",
        "Description": "The name of the profile to use"
      },
      {
        "Argument": "Profile location",
        "Type": "Text value",
        "Description": "The location of the credentials file that contains the profile to use"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Ec2Client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Profile doesn't exist",
        "Description": "Indicates that the specified profile doesn't exist"
      },
      {
        "Exception": "Invalid profile",
        "Description": "Indicates that the specified profile isn't correctly configured"
      },
      {
        "Exception": "Create session failed",
        "Description": "Indicates that the creation of EC2 client failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "AWS",
    "action": "End EC2 session",
    "description": "Dispose an open EC2 client.",
    "Input parameters": [
      {
        "Argument": "EC2 client",
        "Type": "EC2 client",
        "Description": "The EC2 client"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Email",
    "action": "Retrieve email messages",
    "description": "Retrieves email messages from an IMAP server.",
    "Input parameters": [
      {
        "Argument": "IMAP server",
        "Type": "Text value",
        "Description": "The IMAP server address (e.g. imap.gmail.com)"
      },
      {
        "Argument": "Port",
        "Type": "Numeric value",
        "Description": "The port to use for the IMAP server. Usually this port is 993"
      },
      {
        "Argument": "Enable SSL",
        "Type": "Boolean value",
        "Description": "Specify whether to use a secure connection to communicate with the IMAP Server"
      },
      {
        "Argument": "User name",
        "Type": "Text value",
        "Description": "The username of the email account to access"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password of the email account to access"
      },
      {
        "Argument": "Accept untrusted certificates",
        "Type": "Boolean value",
        "Description": "Specify whether untrusted certificates will be accepted"
      },
      {
        "Argument": "Mail folder",
        "Type": "Text value",
        "Description": "The name of the IMAP mail-folder (also known as 'mailBox') to retrieve messages from"
      },
      {
        "Argument": "Retrieve",
        "Type": "All email messages, Unread email messages only, Read email messages only",
        "Description": "Specify whether to retrieve all messages in the folder or only the unread ones"
      },
      {
        "Argument": "Mark As read",
        "Type": "Boolean value",
        "Description": "Specify whether to mark as read the retrieved messages or leave them as is"
      },
      {
        "Argument": "\"From\" field contains",
        "Type": "Text value",
        "Description": "The full email address of the sender whose messages will be retrieved. Leave this attribute blank to retrieve all messages regardless of the sender"
      },
      {
        "Argument": "\"To\" field contains",
        "Type": "Text value",
        "Description": "The full email address(es) of the recipient(s) (separated by space if more than one) for the messages that will be retrieved. Leave this attribute blank to retrieve all messages regardless of the recipient(s)"
      },
      {
        "Argument": "\"Subject\" contains",
        "Type": "Text value",
        "Description": "The key phrase to find within the email subject. Leave this attribute blank to retrieve all emails regardless of their subject"
      },
      {
        "Argument": "'Body' contains",
        "Type": "Text value",
        "Description": "The key phrase to find within the email body. Leave this attribute blank to retrieve all emails regardless of their content"
      },
      {
        "Argument": "Save attachments",
        "Type": "Save attachments, Do not save attachments",
        "Description": "Specify whether to save the attachments of the emails retrieved or not"
      },
      {
        "Argument": "Save attachments into",
        "Type": "Folder",
        "Description": "The folder to save the attachments"
      }
    ],
    "Variables produced": [
      {
        "Argument": "RetrievedEmails",
        "Type": "List of Mail Messages",
        "Description": "The retrieved emails for later processing as a list of mail message objects"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to connect to IMAP server",
        "Description": "Indicates that there was a problem connecting to the IMAP server"
      },
      {
        "Exception": "Failed to authenticate to the IMAP server",
        "Description": "Indicates a problem authenticating to the specified IMAP server"
      },
      {
        "Exception": "Specified mail-folder doesn't exist",
        "Description": "Indicates that the specified mail folder wasn't found"
      },
      {
        "Exception": "Failed to save attachments",
        "Description": "Indicates a problem saving the attachments"
      },
      {
        "Exception": "Failed to retrieve emails",
        "Description": "Indicates a problem retrieving the emails"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Email",
    "action": "Process email messages",
    "description": "Moves, deletes or marks as unread an email (or a list of emails) retrieved by a Retrieve emails action.",
    "Input parameters": [
      {
        "Argument": "IMAP server",
        "Type": "Text value",
        "Description": "The IMAP server address (e.g. imap.gmail.com)"
      },
      {
        "Argument": "Port",
        "Type": "Numeric value",
        "Description": "The port to use for the IMAP server. Usually this port is 993"
      },
      {
        "Argument": "Enable SSL",
        "Type": "Boolean value",
        "Description": "Specify whether to use a secure connection to communicate with the IMAP server"
      },
      {
        "Argument": "Username",
        "Type": "Text value",
        "Description": "The username of the email account to access"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password of the email account to access"
      },
      {
        "Argument": "Accept Untrusted Certificates",
        "Type": "Boolean value",
        "Description": "Specify whether untrusted certificates will be accepted"
      },
      {
        "Argument": "Email(s) to process",
        "Type": "List of Mail Messages",
        "Description": "The email or list of emails to process. This parameter should contain a variable populated by a Retrieve emails action"
      },
      {
        "Argument": "Operation",
        "Type": "Delete emails from server, Mark emails as unread, Move emails to mail folder, Mark emails as unread and move to mail folder",
        "Description": "The operation you want to perform on the specified email messages"
      },
      {
        "Argument": "Mail folder",
        "Type": "Text value",
        "Description": "The name of the mail folder to which the emails will be moved"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to connect to IMAP server",
        "Description": "Indicates that there was a problem connecting to the IMAP server"
      },
      {
        "Exception": "Specified mail-folder doesn't exist",
        "Description": "Indicates that the specified mail folder wasn't found"
      },
      {
        "Exception": "Failed to process emails",
        "Description": "Indicates a problem with processing the specified emails"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Email",
    "action": "Send email",
    "description": "Creates and sends a new email message.",
    "Input parameters": [
      {
        "Argument": "SMTP server",
        "Type": "Text value",
        "Description": "The SMTP server address"
      },
      {
        "Argument": "Server port",
        "Type": "Numeric value",
        "Description": "The port to use for the server. Usually this port is 25"
      },
      {
        "Argument": "Enable SSL",
        "Type": "Boolean value",
        "Description": "Specify whether or not to communicate with the server through a secure connection"
      },
      {
        "Argument": "SMTP Server needs authentication",
        "Type": "Boolean value",
        "Description": "Specify whether the server requires authentication"
      },
      {
        "Argument": "User name",
        "Type": "Text value",
        "Description": "The username of the email account to access"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password of the email account to access"
      },
      {
        "Argument": "Accept untrusted certificates",
        "Type": "Boolean value",
        "Description": "Specify whether untrusted certificates will be accepted"
      },
      {
        "Argument": "From",
        "Type": "Text value",
        "Description": "The sender's email address"
      },
      {
        "Argument": "Sender display name",
        "Type": "Text value",
        "Description": "The sender's display name"
      },
      {
        "Argument": "To",
        "Type": "Text value",
        "Description": "The email(s) of the recipient(s). If more than one email is entered, the list of addresses should be separated by semi-colons"
      },
      {
        "Argument": "CC",
        "Type": "Text value",
        "Description": "The email(s) of the Cc recipient(s). If more than one email is entered, the list of addresses should be separated by semi-colons"
      },
      {
        "Argument": "BCC",
        "Type": "Text value",
        "Description": "The email(s) of the BCC (hidden) recipient(s). If more than one email is entered, the list of addresses should be separated by semi-colons"
      },
      {
        "Argument": "Subject",
        "Type": "Text value",
        "Description": "The subject of the email"
      },
      {
        "Argument": "Body",
        "Type": "Text value",
        "Description": "The body of the email"
      },
      {
        "Argument": "Body Is HTML",
        "Type": "Boolean value",
        "Description": "Specify whether the body of the email will be interpreted as HTML coding"
      },
      {
        "Argument": "Attachment(s)",
        "Type": "List of Files",
        "Description": "The full path of any attachment(s), or a file or a list of files. Multiple files should be enclosed in double quotes (\") and separated by a space character"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid email address",
        "Description": "Indicates that the specified email address is invalid"
      },
      {
        "Exception": "Failed to send email",
        "Description": "Indicates a problem sending the email"
      },
      {
        "Exception": "Attachment not found",
        "Description": "Indicates that the specified attachment(s) weren't found"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Loops",
    "action": "For each",
    "description": "Iterates over items in a list, data table or data row, allowing a block of actions to be executed repeatedly.",
    "Input parameters": [
      {
        "Argument": "Value to iterate",
        "Type": "*",
        "Description": "Enter a list, data row, or data table value to iterate through it."
      }
    ],
    "Variables produced": [
      {
        "Type": "*",
        "Description": "The value name that will store the current item value in each iteration."
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Loops",
    "action": "Loop",
    "description": "Iterates a block of actions for a specified number of times",
    "Input parameters": [
      {
        "Argument": "Start from",
        "Type": "Numeric value",
        "Description": "Set the starting point of the loop counter."
      },
      {
        "Argument": "Increment by",
        "Type": "Numeric value",
        "Description": "Set the increment that the loop counter variable is increased by."
      },
      {
        "Argument": "End to",
        "Type": "Numeric value",
        "Description": "Set the ending point of the loop counter."
      }
    ],
    "Variables produced": [
      {
        "Type": "*",
        "Description": "The value name that will store the current index, starting at the start from value. The value will change by the increment with each iteration."
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Loops",
    "action": "Loop condition",
    "description": "Iterates a block of actions as long as a specified condition proves to be true.",
    "Input parameters": [
      {
        "Argument": "Operator",
        "Type": "Equal to (=), Not equal to (<>), Greater than (>), Greater than or equal to (>=), Less than (<), Less than or equal to (<=)",
        "Description": "Choose the relationship of first operand to second operand."
      },
      {
        "Argument": "First operand",
        "Type": "*",
        "Description": "Enter a value name defined by a previous action, text, number or expression to compare with the second operand."
      },
      {
        "Argument": "Second operand",
        "Type": "*",
        "Description": "Enter a value name produced by a previous action, text, number or expression to compare with the first operand."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Get resource groups",
    "description": "Gets the resource groups based on the specified criteria.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Resource group name",
        "Type": "Text value",
        "Description": "The name of the resource group"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ResourceGroups",
        "Type": "List of Azure resource groups",
        "Description": "The retrieved resource groups"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to get the resource groups with the specified criteria",
        "Description": "Indicates that getting the resource groups with the specified criteria failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Create resource group",
    "description": "Creates a new resource group.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Resource group name",
        "Type": "Text value",
        "Description": "The name of the resource group"
      },
      {
        "Argument": "Location",
        "Type": "Text value",
        "Description": "The location where the new disk will be created"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ResourceGroup",
        "Type": "Azure resource group",
        "Description": "The created resource group"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Resource group already exists",
        "Description": "Indicates that the resource group already exists and can't be created"
      },
      {
        "Exception": "Failed to create resource group",
        "Description": "Indicates that creating the resource group failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Delete resource group",
    "description": "Deletes the specified resource group and all the contained resources.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Resource group name",
        "Type": "Text value",
        "Description": "The name of the resource group"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to delete the resource group",
        "Description": "Indicates that deleting the resource group failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Get disks",
    "description": "Gets the disks based on the specified criteria.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Retrieve disks",
        "Type": "All, With the specified resource group, With the specified name in all resource groups, With specific name in the specified resource group",
        "Description": "Specify which disks to retrieve"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group where the disks reside"
      },
      {
        "Argument": "Disk name",
        "Type": "Text value",
        "Description": "The name of the disk"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Disks",
        "Type": "List of Azure managed disks",
        "Description": "The retrieved disks with all the related information"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Disk wasn't found",
        "Description": "Indicates that the disk with the specified criteria doesn't exist"
      },
      {
        "Exception": "Resource group wasn't found",
        "Description": "Indicates that the specified resource group wasn't found"
      },
      {
        "Exception": "Failed to get the disks with the specified criteria",
        "Description": "Indicates that getting the disks with the specified criteria failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Attach disk",
    "description": "Attaches an existing disk to the virtual machine with the specified name and resource group.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Virtual machine name",
        "Type": "Text value",
        "Description": "The VM where the disk will be attached"
      },
      {
        "Argument": "VM resource group",
        "Type": "Text value",
        "Description": "The resource group of the VM"
      },
      {
        "Argument": "Disk is managed",
        "Type": "Boolean value",
        "Description": "Specify whether the disk to attach is managed"
      },
      {
        "Argument": "Disk name",
        "Type": "Text value",
        "Description": "The name of the disk to attach"
      },
      {
        "Argument": "Disk's resource group",
        "Type": "Text value",
        "Description": "The resource group of the disk"
      },
      {
        "Argument": "Storage account",
        "Type": "Text value",
        "Description": "The storage account where VHD file is located"
      },
      {
        "Argument": "Container",
        "Type": "Text value",
        "Description": "The container that holds the VHD file"
      },
      {
        "Argument": "VHD file",
        "Type": "Text value",
        "Description": "The name of the VHD file"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "VM wasn't found",
        "Description": "Indicates that the specified VM wasn't found"
      },
      {
        "Exception": "Disk wasn't found",
        "Description": "Indicates that the disk with the specified criteria doesn't exist"
      },
      {
        "Exception": "Both unmanaged and managed disk can't exist together in a VM",
        "Description": "Indicates that the attachment failed because both unmanaged and managed disk can't exist together in a VM"
      },
      {
        "Exception": "Failed to attach the disk",
        "Description": "Indicates that the disk attachment failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Detach disk",
    "description": "Detaches the disk from the virtual machine with the specified name and resource group.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Virtual machine name",
        "Type": "Text value",
        "Description": "The VM from where the disk will be detached"
      },
      {
        "Argument": "Virtual machine's resource group",
        "Type": "Text value",
        "Description": "The resource group of the VM"
      },
      {
        "Argument": "Disk name",
        "Type": "Text value",
        "Description": "The name of the disk to detach"
      },
      {
        "Argument": "Disk is managed",
        "Type": "Boolean value",
        "Description": "Specify whether the disk to detach is managed"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "VM wasn't found",
        "Description": "Indicates that the specified VM wasn't found"
      },
      {
        "Exception": "Failed to detach because the disk isn't attached to the specified VM",
        "Description": "Indicates that the detachment failed because the disk isn't attached to the specified VM"
      },
      {
        "Exception": "Failed to detach disk",
        "Description": "Indicates that detaching the disk failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Create managed disk",
    "description": "Creates a managed disk with the specified settings.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Disk name",
        "Type": "Text value",
        "Description": "The name of the managed disk to create"
      },
      {
        "Argument": "Resource group option",
        "Type": "Use existing, Create new",
        "Description": "Specify whether a new resource group will be created or an existing one will be used"
      },
      {
        "Argument": "Resource group name",
        "Type": "Text value",
        "Description": "The resource group of the disk"
      },
      {
        "Argument": "Location",
        "Type": "Text value",
        "Description": "The location where the new disk is created"
      },
      {
        "Argument": "Source type",
        "Type": "None, Snapshot, Storage blob",
        "Description": "Specifies whether to create an empty disk or use the snapshot of another disk or use a blob in a storage account"
      },
      {
        "Argument": "Snapshot name",
        "Type": "Text value",
        "Description": "The managed snapshot to use as a source"
      },
      {
        "Argument": "Snapshot's resource group",
        "Type": "Text value",
        "Description": "The resource group of the snapshot"
      },
      {
        "Argument": "Blob URL",
        "Type": "Text value",
        "Description": "The URL of the blob"
      },
      {
        "Argument": "Disk size in GB",
        "Type": "Numeric value",
        "Description": "Size of the disk in GB"
      },
      {
        "Argument": "Storage account type",
        "Type": "Standard HDD, Premium SSD, Standard SSD, Ultra disk SSD",
        "Description": "The disk type"
      },
      {
        "Argument": "Storage account name",
        "Type": "Text value",
        "Description": "The name of the storage account where VHD file is stored"
      },
      {
        "Argument": "Availability zone",
        "Type": "Text value",
        "Description": "The availability zone for the managed disk"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ManagedDisk",
        "Type": "Azure managed disk",
        "Description": "The created managed disk"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Resource group already exists",
        "Description": "Indicates that the resource group already exists and can't be created"
      },
      {
        "Exception": "Resource group wasn't found",
        "Description": "Indicates that the specified resource group wasn't found"
      },
      {
        "Exception": "The resource with the specified name already exists",
        "Description": "Indicates that the resource with the specified name already exists"
      },
      {
        "Exception": "Snapshot wasn't found",
        "Description": "Indicates that the specified snapshot wasn't found"
      },
      {
        "Exception": "Failed to create disk",
        "Description": "Indicates that creating the disk failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Delete disk",
    "description": "Deletes the managed disk with the specified name and resource group.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Disk name",
        "Type": "Text value",
        "Description": "The name of the managed disk to delete"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group of the disk"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Disk wasn't found",
        "Description": "Indicates that the disk with the specified criteria doesn't exist"
      },
      {
        "Exception": "Failed to delete the disk because it's attached to a VM",
        "Description": "Indicates a problem deleting the disk because it's attached to a VM"
      },
      {
        "Exception": "Failed to delete disk",
        "Description": "Indicates that deleting the disk failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Get snapshots",
    "description": "Gets the snapshots based on the specified criteria.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Retrieve snapshots",
        "Type": "All, With the specified resource group, With the specified name in all resource groups, With specific name in the specified resource group",
        "Description": "Specify which snapshots to retrieve"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group where the snapshots reside"
      },
      {
        "Argument": "Snapshot name",
        "Type": "Text value",
        "Description": "The name of the snapshot"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Snapshots",
        "Type": "List of Azure snapshots",
        "Description": "The retrieved snapshots with all the related information"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Snapshot wasn't found",
        "Description": "Indicates that the specified snapshot wasn't found"
      },
      {
        "Exception": "Resource group wasn't found",
        "Description": "Indicates that the specified resource group wasn't found"
      },
      {
        "Exception": "Failed to get the snapshots with the specified criteria",
        "Description": "Indicates that getting the snapshots with the specified criteria failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Create snapshot",
    "description": "Creates a snapshot from the specified disk.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Snapshot name",
        "Type": "Text value",
        "Description": "The name of the snapshot to create"
      },
      {
        "Argument": "Resource group option",
        "Type": "Use existing, Create new",
        "Description": "Specifies whether a new resource group will be created or an existing one will be used"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group where the snapshot will be created"
      },
      {
        "Argument": "Location",
        "Type": "Text value",
        "Description": "The location where the new disk will be created"
      },
      {
        "Argument": "Source disk",
        "Type": "Text value",
        "Description": "The name of the managed disk that will be used as source data"
      },
      {
        "Argument": "Source disk's resource group",
        "Type": "Text value",
        "Description": "The resource group of the managed disk that will be used as source data"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Snapshot",
        "Type": "Azure snapshot",
        "Description": "The created snapshot"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Resource group already exists",
        "Description": "Indicates that the resource group already exists and can't be created"
      },
      {
        "Exception": "Resource group wasn't found",
        "Description": "Indicates that the specified resource group wasn't found"
      },
      {
        "Exception": "The resource with the specified name already exists",
        "Description": "Indicates that the resource with the specified name already exists"
      },
      {
        "Exception": "Disk wasn't found",
        "Description": "Indicates that the disk with the specified criteria doesn't exist"
      },
      {
        "Exception": "Failed to create snapshot",
        "Description": "Indicates that creating the snapshot failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Delete snapshot",
    "description": "Deletes the snapshot with the specified name and resource group.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Snapshot name",
        "Type": "Text value",
        "Description": "The name of the snapshot to delete"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group of the snapshot"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Snapshot wasn't found",
        "Description": "Indicates that the specified snapshot wasn't found"
      },
      {
        "Exception": "Failed to delete snapshot",
        "Description": "Indicates that deleting the snapshot failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Get virtual machines",
    "description": "Gets the basic information for the virtual machines.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group of the virtual machine"
      },
      {
        "Argument": "Status",
        "Type": "Running, Deallocating, Deallocated, Starting, Stopped, Stopping, Unknown, Any",
        "Description": "The status of the virtual machine"
      }
    ],
    "Variables produced": [
      {
        "Argument": "VirtualMachinesInfo",
        "Type": "List of Azure virtual machine info",
        "Description": "The retrieved virtual machines with basic information"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Resource group wasn't found",
        "Description": "Indicates that the specified resource group wasn't found"
      },
      {
        "Exception": "Failed to get the VMs with basic information",
        "Description": "Indicates that getting the VMs with basic information failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Describe virtual machine",
    "description": "Gets all the information for the virtual machine(s) based on the specified criteria.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Describe virtual machines",
        "Type": "All, With the specified resource group, With the specified name in all resource groups, With specific name in the specified resource group",
        "Description": "Specify which virtual machines to describe"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group of the virtual machine"
      },
      {
        "Argument": "Virtual machine name",
        "Type": "Text value",
        "Description": "The name of the virtual machine"
      },
      {
        "Argument": "Status",
        "Type": "Running, Deallocating, Deallocated, Starting, Stopped, Stopping, Unknown, Any",
        "Description": "The status of the virtual machine"
      }
    ],
    "Variables produced": [
      {
        "Argument": "VirtualMachines",
        "Type": "List of Azure virtual machines",
        "Description": "The retrieved virtual machines with all the related information"
      }
    ],
    "Exceptions": [
      {
        "Exception": "VM wasn't found",
        "Description": "Indicates that the specified VM wasn't found"
      },
      {
        "Exception": "Resource group wasn't found",
        "Description": "Indicates that the specified resource group wasn't found"
      },
      {
        "Exception": "Failed to get basic information of the VM(s)",
        "Description": "Indicates that getting basic information of the VM(s) failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Start virtual machine",
    "description": "Starts the virtual machine.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Virtual machine name",
        "Type": "Text value",
        "Description": "The name of the virtual machine"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group of the virtual machine"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "VM wasn't found",
        "Description": "Indicates that the specified VM wasn't found"
      },
      {
        "Exception": "Failed to start the VM",
        "Description": "Indicates that an error occurred while trying to start the VM"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Stop virtual machine",
    "description": "Stops the virtual machine and delocates the related hardware (CPU and memory) and network resources.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Virtual machine name",
        "Type": "Text value",
        "Description": "The name of the virtual machine"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group of the virtual machine"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "VM wasn't found",
        "Description": "Indicates that the specified VM wasn't found"
      },
      {
        "Exception": "Failed to stop the VM",
        "Description": "Indicates that an error occurred while trying to stop the VM"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Shut down virtual machine",
    "description": "Shuts down the operating system of a virtual machine.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Virtual machine name",
        "Type": "Text value",
        "Description": "The name of the virtual machine"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group of the virtual machine"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "VM wasn't found",
        "Description": "Indicates that the specified VM wasn't found"
      },
      {
        "Exception": "Failed to shut down the VM",
        "Description": "Indicates an error occurred while trying to shut down the VM"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Restart virtual machine",
    "description": "Restarts a virtual machine.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      },
      {
        "Argument": "Virtual machine name",
        "Type": "Text value",
        "Description": "The name of the virtual machine"
      },
      {
        "Argument": "Resource group",
        "Type": "Text value",
        "Description": "The resource group of the virtual machine"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "VM wasn't found",
        "Description": "Indicates that the specified VM wasn't found"
      },
      {
        "Exception": "Failed to restart the VM",
        "Description": "Indicates that an error occurred while trying to restart the VM"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Create session",
    "description": "Creates an Azure session.",
    "Input parameters": [
      {
        "Argument": "Client ID",
        "Type": "Text value",
        "Description": "The client ID of the application, also known as application ID, which identifies the application that is using the token"
      },
      {
        "Argument": "Client secret",
        "Type": "Direct encrypted input or Text value",
        "Description": "The secret for the client ID"
      },
      {
        "Argument": "Tenant ID",
        "Type": "Text value",
        "Description": "The directory ID of the Microsoft Entra"
      },
      {
        "Argument": "Subscription ID",
        "Type": "Text value",
        "Description": "The Azure subscription ID. If not provided, the default subscription will be used"
      }
    ],
    "Variables produced": [
      {
        "Argument": "AzureClient",
        "Type": "Azure client",
        "Description": "The created Azure client"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to create Azure client",
        "Description": "Indicates that creating the Azure client failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "Get subscriptions",
    "description": "Gets subscriptions that the current account can access.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Subscriptions",
        "Type": "List of Azure subscriptions",
        "Description": "The retrieved subscriptions with all the related information"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to get the subscriptions with the specified criteria",
        "Description": "Indicates that getting the subscriptions with the specified criteria failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Azure",
    "action": "End session",
    "description": "Ends an Azure session.",
    "Input parameters": [
      {
        "Argument": "Azure client",
        "Type": "Azure client",
        "Description": "The client used to connect to Azure"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Resize columns/rows in Excel worksheet",
    "description": "Resizes a selection of columns or rows in the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "Specify the Excel instance. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Resize target",
        "Type": "Column, Row",
        "Description": "Specify whether to resize columns or rows"
      },
      {
        "Argument": "Selection range",
        "Type": "Single, Range, All available",
        "Description": "Specify whether to select a single column/row, a range of columns/rows or all the available columns/rows in the active worksheet"
      },
      {
        "Argument": "Column",
        "Type": "Text value",
        "Description": "The column's index number or letter. Column numbering starts from index 1."
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the first column. Column numbering starts from index 1."
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The index or letter of the last column. Column numbering starts from index 1."
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The row's index number. The numbering starts from 1."
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The index or the first row. The numbering starts from 1."
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The index or the last row. The numbering starts from 1."
      },
      {
        "Argument": "Resize type",
        "Type": "Autofit, Custom size",
        "Description": "Specify whether to autofit selected columns/rows or set a custom size"
      },
      {
        "Argument": "Width",
        "Type": "Numeric value",
        "Description": "The width of the selected columns"
      },
      {
        "Argument": "Height",
        "Type": "Numeric value",
        "Description": "The height of the selected rows"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to resize columns/rows",
        "Description": "Indicates a problem while resizing columns/rows"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Run Excel macro",
    "description": "Runs a specified macro on the document of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Macro",
        "Type": "Text value",
        "Description": "The macro to run. The text should consist of the name of the macro, followed by any arguments (optional), all separated by semicolons."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to run macro",
        "Description": "Indicates a problem running the specified macro"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Get active Excel worksheet",
    "description": "Retrieves an Excel document's active worksheet.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      }
    ],
    "Variables produced": [
      {
        "Argument": "SheetName",
        "Type": "Text value",
        "Description": "The name of the active worksheet"
      },
      {
        "Argument": "SheetIndex",
        "Type": "Numeric value",
        "Description": "The index of the active worksheet"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve active worksheet",
        "Description": "Indicates a problem retrieving the active worksheet"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Get all Excel worksheets",
    "description": "Retrieves all worksheet names of an Excel document.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "Specify the Excel instance. This variable must have been previously specified in a Launch Excel action."
      }
    ],
    "Variables produced": [
      {
        "Argument": "SheetNames",
        "Type": "List of Text values",
        "Description": "The names of all worksheets"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve all worksheet names",
        "Description": "Indicates a problem retrieving the names of the Excel worksheet"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Delete Excel worksheet",
    "description": "Deletes a specific worksheet from an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Delete worksheet with",
        "Type": "Index, Name",
        "Description": "Whether to find the worksheet by name or index"
      },
      {
        "Argument": "Worksheet index",
        "Type": "Numeric value",
        "Description": "The Index number of the worksheet to delete. The numbering starts from 1, meaning that the index of the first worksheet is 1, the second is 2, and so on."
      },
      {
        "Argument": "Worksheet name",
        "Type": "Text value",
        "Description": "The name of the worksheet to delete"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't find worksheet",
        "Description": "Indicates that a worksheet with the specified name couldn't be found"
      },
      {
        "Exception": "Failed to delete worksheet",
        "Description": "Indicates a problem deleting the specified worksheet"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Rename Excel worksheet",
    "description": "Renames a specific worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "Specify the Excel instance. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Rename worksheet with",
        "Type": "Index, Name",
        "Description": "Specify whether to find the worksheet by name or index"
      },
      {
        "Argument": "Worksheet index",
        "Type": "Numeric value",
        "Description": "The index of the worksheet to rename. The numbering starts from 1, meaning that the index of the first worksheet is 1, the second is 2, and so on."
      },
      {
        "Argument": "Worksheet name",
        "Type": "Text value",
        "Description": "The name of the worksheet to rename"
      },
      {
        "Argument": "Worksheet new name",
        "Type": "Text value",
        "Description": "The new name of the worksheet"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't find worksheet",
        "Description": "Indicates that a worksheet with the specified name couldn't be found"
      },
      {
        "Exception": "Failed to rename worksheet",
        "Description": "Indicates a problem renaming the specified worksheet"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Copy Excel worksheet",
    "description": "Copies a worksheet from an Excel document and paste it to the Excel document of the same or different Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must be specified in a Launch Excel action."
      },
      {
        "Argument": "Copy worksheet with",
        "Type": "Index, Name",
        "Description": "Specify whether to find the worksheet by name or index"
      },
      {
        "Argument": "Worksheet index",
        "Type": "Numeric value",
        "Description": "The index of the worksheet to copy. The numbering starts from 1, meaning that the index of the first worksheet is 1, the second is 2, and so on."
      },
      {
        "Argument": "Worksheet name",
        "Type": "Text value",
        "Description": "The name of the worksheet to copy."
      },
      {
        "Argument": "Target Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance of the target file. This variable must be specified in a Launch Excel action."
      },
      {
        "Argument": "Worksheet new name",
        "Type": "Text value",
        "Description": "The new name of the worksheet"
      },
      {
        "Argument": "Paste worksheet as",
        "Type": "First worksheet, Last worksheet",
        "Description": "Specify whether the copied Excel worksheet will be added before or after the existing worksheets"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to copy worksheet",
        "Description": "Indicates a problem when copying a worksheet in Excel"
      },
      {
        "Exception": "Can't copy worksheet with this name",
        "Description": "Indicates a problem when trying to set the sheet name after copying"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Activate cell in Excel worksheet",
    "description": "Activate a cell in the active worksheet of an Excel instance, by providing column, row, and offset.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "Specify the Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Activate",
        "Type": "Absolutely specified cell, Relatively specified cell",
        "Description": "Select whether to specify the cell to activate absolutely, or relatively, by using an offset distance being the number of cells between the currently activated reference cell and the actual cell activate."
      },
      {
        "Argument": "Column",
        "Type": "Text value",
        "Description": "The numeric value or letter of the cell column."
      },
      {
        "Argument": "Direction",
        "Type": "Left, Right, Above, Below",
        "Description": "Select offset direction. Select where to look for the cell to activate based on the position of the currently active cell."
      },
      {
        "Argument": "Offset from active cell",
        "Type": "Numeric value",
        "Description": "The distance in cells between the currently active cell and the desired cell. The numbering starts from 0."
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The numeric value of the cell row. The numbering starts from 1."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to activate cell",
        "Description": "Indicates a problem activating an Excel cell"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Select cells in Excel worksheet",
    "description": "Selects a range of cells in the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Select",
        "Type": "Absolutely specified cell, Relatively specified cell",
        "Description": "Specify whether to select an explicitly specified range of cells or a range of cells relative to the currently active cell."
      },
      {
        "Argument": "X Axis Direction",
        "Type": "Left, Right",
        "Description": "The X-axis offset direction. Where to look along the horizontal axis, based on currently activated cell's position."
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the first column."
      },
      {
        "Argument": "X Offset",
        "Type": "Numeric value",
        "Description": "The X-axis offset."
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The first row number. The numbering starts from 1."
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The index or letter of the last column."
      },
      {
        "Argument": "Y Axis Direction",
        "Type": "Above, Below",
        "Description": "The Y-axis offset direction. Where to look along the vertical axis, based on the position of the currently active cell."
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The last row number. The numbering starts from 1."
      },
      {
        "Argument": "Y Offset",
        "Type": "Numeric value",
        "Description": "The Y-axis offset."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to select cells",
        "Description": "Indicates a problem selecting the specified cells"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Get selected cell range from Excel worksheet",
    "description": "Retrieve the selected range of cells in a structure consisting of first column, first row, last column, and last row.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      }
    ],
    "Variables produced": [
      {
        "Argument": "FirstColumnIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the range's first column"
      },
      {
        "Argument": "FirstRowIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the range's first row"
      },
      {
        "Argument": "LastColumnIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the range's last column"
      },
      {
        "Argument": "LastRowIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the range's last row"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve the selected range of cells",
        "Description": "Indicates a problem retrieving the selected range of cells"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Copy cells from Excel worksheet",
    "description": "Copies a range of cells from the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Copy mode",
        "Type": "Single Cell's Values, Values from a Range of Cells, Values from Selection",
        "Description": "Specify whether to copy a single cell, a range of cells or the current selection of cells"
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the first column"
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The index of the first row"
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The index or letter of the last column"
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The index of the last row"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to copy cells",
        "Description": "Indicates a problem copying the cells from the Excel document"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Paste cells to Excel worksheet",
    "description": "Pastes a range of cells to the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "Specify the Excel instance. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Paste mode",
        "Type": "On specified cell, On currently active cell",
        "Description": "Specify whether to paste on a specified cell or the currently active cell"
      },
      {
        "Argument": "Column",
        "Type": "Text value",
        "Description": "The index or letter of the cell column"
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The row number"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to paste cells",
        "Description": "Indicates a problem pasting the specified cells"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Delete from Excel worksheet",
    "description": "Deletes a cell or a range of cells from the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Retrieve",
        "Type": "The value of a single cell, Values from a range of cells",
        "Description": "Whether to delete a single cell or a table from a range of cells"
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The cell column (single cell's value) or first column as a numeric value or a letter"
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The cell row (single cell's value) or first row number"
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The last column as a numeric value or a letter"
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The last row number"
      },
      {
        "Argument": "Shift direction",
        "Type": "Left, Up",
        "Description": "The shift direction"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to delete cells",
        "Description": "Indicates a problem deleting the specified cells"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Insert row to Excel worksheet",
    "description": "Inserts a row above a selected row of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Row index",
        "Type": "Numeric value",
        "Description": "The index of the row to add a new row above. The numbering starts from 1."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't find row",
        "Description": "Indicates that a row with the specified index couldn't be found"
      },
      {
        "Exception": "Failed to insert row",
        "Description": "Indicates a problem inserting a row at the specified Excel instance"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Delete row from Excel worksheet",
    "description": "Deletes a selected row from an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Delete row",
        "Type": "Numeric value",
        "Description": "The Index number of the row to delete. The numbering starts from 1."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't find row",
        "Description": "Indicates that a row with the specified index couldn't be found"
      },
      {
        "Exception": "Failed to delete row",
        "Description": "Indicates a problem deleting the specified row"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Insert column to Excel worksheet",
    "description": "Inserts a column to the left of a selected column of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Column",
        "Type": "Text value",
        "Description": "The column's index number or letter. A new column will appear on the left side of the column indicated."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't find column",
        "Description": "Indicates that a column with the specified name couldn't be found"
      },
      {
        "Exception": "Failed to insert column",
        "Description": "Indicates a problem inserting a column at the specified Excel instance"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Delete column from Excel worksheet",
    "description": "Deletes a selected column from an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Delete column",
        "Type": "Text value",
        "Description": "The index number or letter of the column to delete."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't find column",
        "Description": "Indicates that a column with the specified name couldn't be found"
      },
      {
        "Exception": "Failed to delete column",
        "Description": "Indicates a problem deleting the specified column"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Find and replace cells in Excel worksheet",
    "description": "Finds text and replaces it with another in the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Search mode",
        "Type": "Find, Find and replace",
        "Description": "The mode to search with"
      },
      {
        "Argument": "All matches",
        "Type": "Boolean value",
        "Description": "Whether to find/replace text in all the matching cells found or in the first matching cell only"
      },
      {
        "Argument": "Text to find",
        "Type": "Text value",
        "Description": "The text to find in the worksheet"
      },
      {
        "Argument": "Text to replace with",
        "Type": "Text value",
        "Description": "The text used to replace the matching cells"
      },
      {
        "Argument": "Match case",
        "Type": "Boolean value",
        "Description": "Whether to search for case-sensitive data"
      },
      {
        "Argument": "Match entire cell contents",
        "Type": "Boolean value",
        "Description": "Whether to search for cells that contain just the specified text"
      },
      {
        "Argument": "Search by",
        "Type": "Rows, Columns",
        "Description": "The order in which to search for the text"
      }
    ],
    "Variables produced": [
      {
        "Argument": "FoundColumnIndex",
        "Type": "Numeric value",
        "Description": "The index of the column found"
      },
      {
        "Argument": "FoundRowIndex",
        "Type": "Numeric value",
        "Description": "The index of the row found"
      },
      {
        "Argument": "Cells",
        "Type": "Datatable",
        "Description": "The list of cells matching the criteria"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to find and/or replace text",
        "Description": "Indicates a problem finding and/or replacing the specified text"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Get first free row on column from Excel worksheet",
    "description": "Retrieve the first free row, given the column of the active worksheet.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "Specify the Excel instance. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Column",
        "Type": "Text value",
        "Description": "The index or letter that identifies the column. Column numbering starts from index 1."
      }
    ],
    "Variables produced": [
      {
        "Argument": "FirstFreeRowOnColumn",
        "Type": "Numeric value",
        "Description": "The numeric value of the given column's first fully empty row"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve first free row",
        "Description": "Indicates a problem retrieving the first free row of an Excel instance"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Read formula from Excel",
    "description": "Reads the formula inside a cell in Excel.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must be specified in a Launch Excel action."
      },
      {
        "Argument": "Retrieve",
        "Type": "The formula of a single cell, The formula of a named cell",
        "Description": "Specify whether to retrieve the formula from a specified cell or a named cell"
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The cell column (single cell's value) or first column as a numeric value or a letter"
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The cell row (single cell's value) or first row number"
      },
      {
        "Argument": "Name",
        "Type": "Text value",
        "Description": "The name of cells"
      }
    ],
    "Variables produced": [
      {
        "Argument": "CellFormula",
        "Type": "Text value",
        "Description": "The formula of a single cell"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to read the formula from cell",
        "Description": "Indicates a problem when reading the formula from a cell in Excel"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Get table range from Excel worksheet",
    "description": "Retrieves the range of a table in the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must be specified in a Launch Excel action."
      },
      {
        "Argument": "Table name",
        "Type": "Text value",
        "Description": "Specify the name of the table in Excel."
      },
      {
        "Argument": "Is pivot",
        "Type": "Boolean value",
        "Description": "Determine whether the specified table is a pivot table."
      }
    ],
    "Variables produced": [
      {
        "Argument": "FirstColumnIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the table's first column"
      },
      {
        "Argument": "FirstRowIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the table's first row"
      },
      {
        "Argument": "LastColumnIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the table's last column"
      },
      {
        "Argument": "LastRowIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the table's last row"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to get the range from table",
        "Description": "Indicates a problem when getting the range from a table in Excel"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Auto fill cells in Excel worksheet",
    "description": "Auto fills a range with data, based on the data of another range, in the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must be specified in a Launch Excel action."
      },
      {
        "Argument": "Ranges format",
        "Type": "Named cells, Specific ranges",
        "Description": "Specify how the ranges are referenced, either using named cells or absolute column/row indexes"
      },
      {
        "Argument": "Source cells name",
        "Type": "Text value",
        "Description": "Name representing the source range for auto filling"
      },
      {
        "Argument": "Destination cells name",
        "Type": "Text value",
        "Description": "Name representing the destination range to auto fill. The source range should begin from the same cell and should be included in the destination range"
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the first column of both ranges"
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The first row number of both ranges. The numbering starts from 1"
      },
      {
        "Argument": "Source end column",
        "Type": "Text value",
        "Description": "The index or letter of the last column of the source range"
      },
      {
        "Argument": "Source end row",
        "Type": "Numeric value",
        "Description": "The last row number of the source range. The numbering starts from 1"
      },
      {
        "Argument": "Destination end column",
        "Type": "Text value",
        "Description": "The index or letter of the last column of the destination range"
      },
      {
        "Argument": "Destination end row",
        "Type": "Numeric value",
        "Description": "The last row number of the destination range. The numbering starts from 1"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to auto fill cells",
        "Description": "Indicates a problem when auto filling cells in Excel"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Append cells in Excel worksheet",
    "description": "Appends a range of cells to the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must be specified in a Launch Excel action."
      },
      {
        "Argument": "Append mode",
        "Type": "To active sheet, To named cells",
        "Description": "Specify whether to append to a sheet or range of named cells"
      },
      {
        "Argument": "Name",
        "Type": "Text value",
        "Description": "The name of the range of cells"
      },
      {
        "Argument": "First row has headers",
        "Type": "Boolean value",
        "Description": "Indicates that the first row of the destination contains column headers"
      },
      {
        "Argument": "Starting column",
        "Type": "Text value",
        "Description": "The starting column number or letter, where the data is appended beginning from the destination's first empty row. If the field is left empty, the first column of the specified destination is used instead."
      },
      {
        "Argument": "Starting column header",
        "Type": "Text value",
        "Description": "The header of the starting column, where the data is appended beginning from the destination's first empty row. If the field is left empty, the first column of the specified destination is used instead."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to append cells",
        "Description": "Indicates a problem when appending cells in Excel"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Lookup range in Excel worksheet",
    "description": "Finds and returns the result of Excel's LOOKUP function.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must be specified in a Launch Excel action."
      },
      {
        "Argument": "Lookup value",
        "Type": "Text value",
        "Description": "The value to lookup in the specified range of cells."
      },
      {
        "Argument": "Ranges format",
        "Type": "Named cells, Specific ranges",
        "Description": "Specify how the ranges are referenced, either using named cells or absolute column/row indexes."
      },
      {
        "Argument": "Cells name",
        "Type": "Text value",
        "Description": "The name of the cells range to search for the lookup value."
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the first column of the range to search for the lookup value."
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The first row number of the range to search for the lookup value. The numbering starts from 1."
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The index or letter of the last column of the range to search for the lookup value."
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The last row number of the range to search for the lookup value. The numbering starts from 1."
      },
      {
        "Argument": "Array form",
        "Type": "Boolean value",
        "Description": "The array form of LOOKUP looks in the first row or column of an array for the specified value and returns a value from the same position in the last row or column of the array. Use this form of LOOKUP when the values that you want to match are in the first row or column of the array. If this option remains disabled, the vector form of LOOKUP is used instead, which looks in a one-row or one-column range (known as a vector) for a value and returns a value from the same position in a second one-row or one-column range."
      },
      {
        "Argument": "Cells name of results source",
        "Type": "Text value",
        "Description": "The name of the cells range from which the matching value is returned."
      },
      {
        "Argument": "Start column of results source",
        "Type": "Text value",
        "Description": "The index or letter of the first column of the range from which the matching value is returned."
      },
      {
        "Argument": "Start row of results source",
        "Type": "Numeric value",
        "Description": "The first row number of the range from which the matching value is returned. The numbering starts from 1."
      },
      {
        "Argument": "End column of results source",
        "Type": "Text value",
        "Description": "The index or letter of the last column of the range from which the matching value is returned."
      },
      {
        "Argument": "End row of results source",
        "Type": "Numeric value",
        "Description": "The last row number of the range from which the matching value is returned. The numbering starts from 1."
      }
    ],
    "Variables produced": [
      {
        "Argument": "LookupResult",
        "Type": "Text value",
        "Description": "The value returned by the LOOKUP function"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to lookup",
        "Description": "Indicates a problem when looking up a value in Excel"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Set color of cells in Excel worksheet",
    "description": "Fills the background of the selected cells with the specified color, in the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must be specified in a Launch Excel action."
      },
      {
        "Argument": "Set color of",
        "Type": "Single cell, Range of cells, Named cells",
        "Description": "Specify whether to set the background color of a single cell, a range of cells, or named cells."
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the cell column or range's first column."
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The cell row or the range's first row number. The numbering starts from 1."
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The index or letter of the range's last column."
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The range's last row number. The numbering starts from 1."
      },
      {
        "Argument": "Cells name",
        "Type": "Text value",
        "Description": "Name representing the range that is filled with the specified color."
      },
      {
        "Argument": "Color format",
        "Type": "Name, Hexadecimal value",
        "Description": "Select whether to specify a color by its name or its hexadecimal value."
      },
      {
        "Argument": "Color name",
        "Type": "Text value",
        "Description": "Select one of the system defined colors."
      },
      {
        "Argument": "Color hexadecimal value",
        "Type": "Text value",
        "Description": "Specify the hexadecimal (RGB) value of the color."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to set color",
        "Description": "Indicates a problem when setting the color of cells in Excel"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Launch Excel",
    "description": "Launches a new Excel instance or opens an Excel document.",
    "Input parameters": [
      {
        "Argument": "Launch Excel",
        "Type": "With a blank document, and open the following document",
        "Description": "Specify whether to open a New Excel document, or an existing document"
      },
      {
        "Argument": "Document path",
        "Type": "File",
        "Description": "The full path of the existing Excel document to open"
      },
      {
        "Argument": "Make instance visible",
        "Type": "Boolean value",
        "Description": "Specify whether to make the Excel window visible or hidden"
      },
      {
        "Argument": "Nest under a new Excel process",
        "Type": "Boolean value",
        "Description": "Specify whether the Excel spreadsheet should be under a unique Excel process. Macros and add-ins from other spreadsheets won't be accessible."
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password on the Excel document, if it's password protected"
      },
      {
        "Argument": "Open as ReadOnly",
        "Type": "Boolean value",
        "Description": "Specify whether to open the stored document in read-only mode or not"
      },
      {
        "Argument": "Load add-ins and macros",
        "Type": "Boolean value",
        "Description": "Specify whether to load add-ins and macros into the new Excel instance"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExcelInstance",
        "Type": "Excel instance",
        "Description": "The specific Excel instance for use with later Excel actions. This allows the user to specify which of possibly several Excel spreadsheets to access"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to launch Excel",
        "Description": "Indicates a problem launching an Excel instance"
      },
      {
        "Exception": "Failed to open Excel document",
        "Description": "Indicates a problem opening the specified Excel document"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Attach to running Excel",
    "description": "Attaches to an Excel document that's already open.",
    "Input parameters": [
      {
        "Argument": "Document name",
        "Type": "File",
        "Description": "The name or the path of the Excel document to attach to"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExcelInstance",
        "Type": "Excel instance",
        "Description": "The Excel instance this action has attached to for use with later Excel actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Specified Excel document not found",
        "Description": "Indicates that the specified Excel document couldn't be found"
      },
      {
        "Exception": "Failed to attach to Excel document",
        "Description": "Indicates a problem attaching to the Excel document"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Read from Excel worksheet",
    "description": "Reads the value of a cell or a range of cells from the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Retrieve",
        "Type": "The value of a single cell, Values from a range of cells, Values from selection, All available values from worksheet",
        "Description": "Whether to retrieve the value of a single cell, a table from a range of cells or the entire worksheet"
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The cell column (single cell's value) or first column as a numeric value or a letter"
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The cell row (single cell's Value) or first row number"
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The last column as a numeric value or a letter"
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The last row number"
      },
      {
        "Argument": "Get cell contents as text",
        "Type": "Boolean value",
        "Description": "Specify whether to retrieve the content of the cells purely as text or as the closest matching type such as Date Time for dates, Numeric for numbers, and so on"
      },
      {
        "Argument": "First line of range contains column names",
        "Type": "Boolean value",
        "Description": "Specify whether to consider the first row as column names. In this case, the names won't be read as data into the table and later actions can search the data by column names."
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExcelData",
        "Type": "General value",
        "Description": "The value of the single cell"
      },
      {
        "Argument": "ExcelData",
        "Type": "Datatable",
        "Description": "The value of the range of cells as a DataTable"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to read cell values",
        "Description": "Indicates a problem reading the value(s) of the specified Excel cells"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Get active cell on Excel worksheet",
    "description": "Get the active cell in the active worksheet of the Excel document.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      }
    ],
    "Variables produced": [
      {
        "Argument": "ActiveCellColumnIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the active cell's column"
      },
      {
        "Argument": "ActiveCellRowIndex",
        "Type": "Numeric value",
        "Description": "The numeric value of the active cell's row"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to get active cell",
        "Description": "Indicates a problem getting the active cell"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Save Excel",
    "description": "Saves a previously launched Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to save. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Save mode",
        "Type": "Save document, Save document as",
        "Description": "How to save the document of this instance"
      },
      {
        "Argument": "Document format",
        "Type": "Default (From Extension), Excel Workbook (.xlsx), Excel Workbook Macro Enabled (.xlsm), Excel 97-2003 Workbook (.xls), Web Page (.htm, .html), Excel Template (.xltx), Excel Template Macro Enabled (.xltm), Excel 97-2003 Template (.xlt), Text (.txt), Unicode Text (.txt), Text Macintosh (.txt), Text DOS (.txt), XML Spreadsheet (.xml), Excel 95 (.xls), CSV (.csv), DIF (.dif), SYLK (.slk), Excel add-in (.xlam), Excel 97-2003 add-In (.xla), Strict Open XML Workbook (.xlsx), OpenDocument Spreadsheet (.ods), XML Data (.xml), Excel Binary Workbook (.xlsb)",
        "Description": "The format to save the document as"
      },
      {
        "Argument": "Document path",
        "Type": "File",
        "Description": "The full path to save the document as"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to save Excel document",
        "Description": "Indicates a problem saving the Excel document"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Write to Excel worksheet",
    "description": "Writes a value into a cell or a range of cells of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Value to write",
        "Type": "General value",
        "Description": "Enter the text, number, or variable to insert. If the variable contains a table, it will fill in cells to the right and below, writing over other cell data if need be and a list will fill in cells below."
      },
      {
        "Argument": "Write mode",
        "Type": "On specified cell, On currently active cell",
        "Description": "Whether to write into a specified cell or the currently active cell"
      },
      {
        "Argument": "Column",
        "Type": "Text value",
        "Description": "The column number or letter for the cell to write to"
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The row of the cell to write to. The numbering starts from 1, meaning that the index of the first worksheet is 1, the second is 2, and so on."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to write value to Excel",
        "Description": "Indicates a problem writing the specified value to the Excel instance"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Close Excel",
    "description": "Closes an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to close. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Before closing Excel",
        "Type": "Do not save document, Save document, Save document as",
        "Description": "Whether and how to save the document of this instance before closing that instance"
      },
      {
        "Argument": "Document format",
        "Type": "Default (From Extension), Excel Workbook (.xlsx), Excel Workbook Macro Enabled (.xlsm), Excel 97-2003 Workbook (.xls), Web Page (.htm, .html), Excel Template (.xltx), Excel Template Macro Enabled (.xltm), Excel 97-2003 Template (.xlt), Text (.txt), Unicode Text (.txt), Text Macintosh (.txt), Text DOS (.txt), XML Spreadsheet (.xml), Excel 95 (.xls), CSV (.csv), DIF (.dif), SYLK (.slk), Excel add-in (.xlam), Excel 97-2003 add-in (.xla), Strict Open XML Workbook (.xlsx), OpenDocument Spreadsheet (.ods), XML Data (.xml), Excel Binary Workbook (.xlsb)",
        "Description": "The format of the document"
      },
      {
        "Argument": "Document path",
        "Type": "File",
        "Description": "The full path of the document"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to save Excel document",
        "Description": "Indicates a problem saving the Excel document"
      },
      {
        "Exception": "Failed to close Excel instance",
        "Description": "Indicates a problem closing the Excel instance"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Set active Excel worksheet",
    "description": "Activates a specific worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "Specify the Excel instance. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Activate worksheet with",
        "Type": "Index, Name",
        "Description": "Specify whether to find the worksheet by name or index"
      },
      {
        "Argument": "Worksheet index",
        "Type": "Numeric value",
        "Description": "The index number of the worksheet to activate. The numbering starts from 1, meaning that the index of the first worksheet is 1, the second is 2, and so on."
      },
      {
        "Argument": "Worksheet name",
        "Type": "Text value",
        "Description": "The name of the worksheet to activate"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't find worksheet",
        "Description": "Indicates that a worksheet with the specified name couldn't be found"
      },
      {
        "Exception": "Failed to activate worksheet",
        "Description": "Indicates a problem activating the specified worksheet"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Add new worksheet",
    "description": "Adds a new worksheet to the document of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "Specify the Excel instance. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "New worksheet name",
        "Type": "Text value",
        "Description": "Specify the name of the new worksheet"
      },
      {
        "Argument": "Add worksheet as",
        "Type": "First worksheet, Last worksheet",
        "Description": "Specify whether the new Excel worksheet will be added before or after the existing worksheets"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "A worksheet with the same name already exists",
        "Description": "Indicates that the worksheet couldn't be added because a worksheet with the same name already exists"
      },
      {
        "Exception": "Failed to add worksheet",
        "Description": "Indicates a problem adding the worksheet"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Get first free column/row from Excel worksheet",
    "description": "Retrieves the first free column and/or row of the active worksheet. This is useful for adding new data into a worksheet that already has data in it.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "Specify The Excel instance. This variable must have been previously specified in a Launch Excel action."
      }
    ],
    "Variables produced": [
      {
        "Argument": "FirstFreeColumn",
        "Type": "Numeric value",
        "Description": "The numeric value of the first fully empty column. For example, if column F is the first empty column, it will be stored as '6'."
      },
      {
        "Argument": "FirstFreeRow",
        "Type": "Numeric value",
        "Description": "The numeric value of the first fully empty row. For example, if row 7 is the first empty row, it will be stored as '7'."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve first free column/row",
        "Description": "Indicates a problem retrieving the first free column/row of an Excel instance"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Get column name on Excel worksheet",
    "description": "Gets the name of the column.",
    "Input parameters": [
      {
        "Argument": "Column number",
        "Type": "Numeric value",
        "Description": "The column number"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ColumnName",
        "Type": "Text value",
        "Description": "The name of the column"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Clear cells in Excel worksheet",
    "description": "Clears a range of cells or a named cell in the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Clear",
        "Type": "Range of cells, Range of cells relative to active cell, Named cells, Single cell",
        "Description": "Specify whether to select an explicitly specified range of cells, a range of cells relative to the currently active cell, named cells, or a single cell."
      },
      {
        "Argument": "X Axis Direction",
        "Type": "Left, Right",
        "Description": "The X-axis offset direction. Where to look along the horizontal axis, based on currently activated cell's position."
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the first column."
      },
      {
        "Argument": "X Offset",
        "Type": "Numeric value",
        "Description": "The X-axis offset."
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The first row number. The numbering starts from 1."
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The index or letter of the last column."
      },
      {
        "Argument": "Y Axis Direction",
        "Type": "Above, Below",
        "Description": "The Y-axis offset direction. Where to look along the vertical axis, based on the position of the currently active cell."
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The last row number. The numbering starts from 1."
      },
      {
        "Argument": "Y Offset",
        "Type": "Numeric value",
        "Description": "The Y-axis offset."
      },
      {
        "Argument": "Name",
        "Type": "Text value",
        "Description": "The name of cells."
      },
      {
        "Argument": "Column",
        "Type": "Text value",
        "Description": "The index or letter of the column."
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The row number. Enumeration starts from 1."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to clear cells",
        "Description": "Indicates a problem occurred while trying to clear the specified cells in the Excel instance."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Sort cells in Excel worksheet",
    "description": "N/A",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Sort column in",
        "Type": "Active sheet, Table, Range",
        "Description": "Specify whether the column to be sorted is part of a table, a specified range, either by name or absolute coordinates or if it's part of the general active worksheet."
      },
      {
        "Argument": "Table name",
        "Type": "Text value",
        "Description": "The name of the table."
      },
      {
        "Argument": "Range",
        "Type": "Named cells, Specific range",
        "Description": "Specify the range to be sorted, either using named cell or absolute column and row index."
      },
      {
        "Argument": "Cells name",
        "Type": "Text value",
        "Description": "Name representing the range."
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the first column."
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The first row number. The numbering starts from 1."
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The index or letter of the last column."
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The last row number. The numbering starts from 1."
      },
      {
        "Argument": "Sort by",
        "Type": "Sorting rules as defined by the user",
        "Description": "Sorting rules to apply."
      },
      {
        "Argument": "First row is header",
        "Type": "Boolean value",
        "Description": "Indicates that the first row of the worksheet is a header."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to sort cells in worksheet",
        "Description": "Indicates a problem sorting cells in the worksheet."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Filter cells in Excel worksheet",
    "description": "Filter cells in Excel worksheet allows makers to create and apply a filter in the active sheet, table, or range on the values of a specified column. To filter multiple columns in an active sheet/table/range, multiple Filter cells in Excel worksheet actions must be used, each one applying the respective filter.",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Filter column in",
        "Type": "Active sheet, Table, Range",
        "Description": "Specify whether the column to be filtered is part of a table, a specified range, either by name or absolute coordinates or if it's part of the general active worksheet"
      },
      {
        "Argument": "Table name",
        "Type": "Text value",
        "Description": "The name of the table."
      },
      {
        "Argument": "Range",
        "Type": "Named cells, Specific range",
        "Description": "Specify the range to be filtered, either using named cell or absolute column/row index"
      },
      {
        "Argument": "Cells name",
        "Type": "Text value",
        "Description": "Name representing the range"
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the first column."
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The first row number. The numbering starts from 1."
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The index or letter of the last column."
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The last row number. The numbering starts from 1."
      },
      {
        "Argument": "Column to filter",
        "Type": "Text value",
        "Description": "Name or index of the column to be filtered. If the column is part of a table use the header name."
      },
      {
        "Argument": "Filters to apply",
        "Type": "Filtering rules as defined by the user",
        "Description": "Filtering rules applied to the defined column"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to apply filter on cells in worksheet",
        "Description": "Indicates a problem applying the specified filter on cells in the worksheet"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Clear filters in Excel worksheet",
    "description": "N/A",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Clear filters in",
        "Type": "Active sheet, Table",
        "Description": "Specify whether to clear filters from the entire active worksheet or from a specific table."
      },
      {
        "Argument": "Table name",
        "Type": "Text value",
        "Description": "The name of the table."
      },
      {
        "Argument": "Clear filters from specific column",
        "Type": "Boolean value",
        "Description": "Clear filters from specific column."
      },
      {
        "Argument": "Clear filter in column",
        "Type": "Text value",
        "Description": "The column name to clear applied filter."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to clear filter on cells in worksheet",
        "Description": "Indicates a problem applying the specified filter on cells in the worksheet"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Excel",
    "action": "Get empty cell",
    "description": "N/A",
    "Input parameters": [
      {
        "Argument": "Excel instance",
        "Type": "Excel instance",
        "Description": "The Excel instance to work with. This variable must have been previously specified in a Launch Excel action."
      },
      {
        "Argument": "Operation",
        "Type": "First empty cell, First empty cell in column, First empty cell in row, All empty cells",
        "Description": "Specify whether to search for the first empty cell, the first empty cell on column, the first empty cell on row, or all empty cells inside a specific range."
      },
      {
        "Argument": "Search direction",
        "Type": "By row, By column",
        "Description": "Specify whether to search by rows or columns to find the first empty cell inside a specific range."
      },
      {
        "Argument": "Search in",
        "Type": "Named cells, Specific range",
        "Description": "Search for empty cell in a named cell or a range defined by start column/row and end column/row."
      },
      {
        "Argument": "Cells name",
        "Type": "Text value",
        "Description": "Name representing the range."
      },
      {
        "Argument": "Column",
        "Type": "Text value",
        "Description": "Column."
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "Row."
      },
      {
        "Argument": "Start column",
        "Type": "Text value",
        "Description": "The index or letter of the first column."
      },
      {
        "Argument": "Start row",
        "Type": "Numeric value",
        "Description": "The first row number. The numbering starts from 1."
      },
      {
        "Argument": "End column",
        "Type": "Text value",
        "Description": "The index or letter of the last column."
      },
      {
        "Argument": "End row",
        "Type": "Numeric value",
        "Description": "The last row number. The numbering starts from 1."
      }
    ],
    "Variables produced": [
      {
        "Argument": "EmptyCellColumnIndex",
        "Type": "Numeric value",
        "Description": "The index of the column the first empty cell is found."
      },
      {
        "Argument": "EmptyCellRowIndex",
        "Type": "Numeric value",
        "Description": "The index of the row the first empty cell is found."
      },
      {
        "Argument": "EmptyCells",
        "Type": "Datatable",
        "Description": "The list of empty cells found."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Get empty cells failed",
        "Description": "Indicates a problem retrieving the empty cells from the worksheet."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Message boxes",
    "action": "Display message",
    "description": "Displays a message box.",
    "Input parameters": [
      {
        "Argument": "Message box title",
        "Type": "Text value",
        "Description": "The text to use as the message box title"
      },
      {
        "Argument": "Message to display",
        "Type": "Text value",
        "Description": "The text to display as the actual message"
      },
      {
        "Argument": "Message box icon",
        "Type": "None, Information, Question, Warning, Error",
        "Description": "The icon to display with the message box"
      },
      {
        "Argument": "Message box buttons",
        "Type": "OK, OK - Cancel, Yes - No, Yes - No - Cancel, Abort - Retry - Ignore, Retry - Cancel",
        "Description": "The buttons to display on the message box"
      },
      {
        "Argument": "Default button",
        "Type": "First button, Second button, Third button",
        "Description": "The button to highlight by default. If the user presses Enter, this button will be pressed"
      },
      {
        "Argument": "Keep message box always on top",
        "Type": "Boolean value",
        "Description": "Specify whether the message box should always remain on top of all other windows"
      },
      {
        "Argument": "Close message box automatically",
        "Type": "Boolean value",
        "Description": "Specify whether the message box closes automatically after a preset time, as if the default button was pressed. Otherwise, the flow will wait until a button is pressed by the user"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The seconds to pause the automation while waiting for input, until continuing automatically"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ButtonPressed",
        "Type": "Text value",
        "Description": "The text of the button pressed"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to display message box",
        "Description": "Indicates a problem displaying the message dialog"
      },
      {
        "Exception": "Can't display message box in noninteractive mode",
        "Description": "Indicates a problem displaying the message dialog in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Message boxes",
    "action": "Display input dialog",
    "description": "Displays a dialog box that prompts the user to enter text.",
    "Input parameters": [
      {
        "Argument": "Input dialog title",
        "Type": "Text value",
        "Description": "The dialog title"
      },
      {
        "Argument": "Input dialog message",
        "Type": "Text value",
        "Description": "The dialog message"
      },
      {
        "Argument": "Default value",
        "Type": "Text value",
        "Description": "Specify the text to display by default. If the user wishes to change this text, they can type over it. Otherwise, the default text will be used"
      },
      {
        "Argument": "Input type",
        "Type": "Single line, Password, Multiline",
        "Description": "The format for the input text. Choose Single line - password to hide the text or multiline so that a larger display box makes visible more than one line of text"
      },
      {
        "Argument": "Keep input dialog always on top",
        "Type": "Boolean value",
        "Description": "Specify whether the input dialog should always remain on top of all other windows"
      }
    ],
    "Variables produced": [
      {
        "Argument": "UserInput",
        "Type": "Text value",
        "Description": "The text entered by the user, or the default text"
      },
      {
        "Argument": "ButtonPressed",
        "Type": "Text value",
        "Description": "The text of the button pressed. The user will automatically be given the choice of OK or Cancel"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to display input dialog",
        "Description": "Indicates a problem displaying the input dialog"
      },
      {
        "Exception": "Can't display input dialog in non interactive mode",
        "Description": "Indicates a problem displaying the input dialog in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Message boxes",
    "action": "Display select date dialog",
    "description": "Displays a dialog box that prompts the user to enter a date or date range.",
    "Input parameters": [
      {
        "Argument": "Dialog title",
        "Type": "Text value",
        "Description": "The dialog title"
      },
      {
        "Argument": "Dialog message",
        "Type": "Text value",
        "Description": "The dialog message"
      },
      {
        "Argument": "Dialog type",
        "Type": "Single date, Date range (two Dates)",
        "Description": "Whether the user will enter a single date or two dates as the endpoints of a range of dates"
      },
      {
        "Argument": "Prompt for",
        "Type": "Date only, Date and time",
        "Description": "Specify whether the user will enter the date only or the date and time"
      },
      {
        "Argument": "Default value",
        "Type": "Datetime",
        "Description": "The default value for the date"
      },
      {
        "Argument": "Default value for second date",
        "Type": "Datetime",
        "Description": "The default value for the end date in a range"
      },
      {
        "Argument": "Keep date selection dialog always on top",
        "Type": "Boolean value",
        "Description": "Specify whether the date selection dialog should always remain on top of all other windows"
      }
    ],
    "Variables produced": [
      {
        "Argument": "SelectedDate",
        "Type": "Datetime",
        "Description": "The date entered by the user or the default date"
      },
      {
        "Argument": "SecondSelectedDate",
        "Type": "Datetime",
        "Description": "The second date entered by the user or that default date"
      },
      {
        "Argument": "ButtonPressed",
        "Type": "Text value",
        "Description": "The text of the button pressed by the user. The user will automatically be given the choice of OK or Cancel"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to display select date dialog",
        "Description": "Indicates a problem displaying the select date dialog"
      },
      {
        "Exception": "Can't display select date dialog in non interactive mode",
        "Description": "Indicates a problem displaying the input dialog in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Message boxes",
    "action": "Display select from list dialog",
    "description": "Displays a dialog box with options that lets the user select from a list.",
    "Input parameters": [
      {
        "Argument": "Dialog title",
        "Type": "Text value",
        "Description": "The dialog title"
      },
      {
        "Argument": "Dialog message",
        "Type": "Text value",
        "Description": "The dialog message"
      },
      {
        "Argument": "List to choose from",
        "Type": "General value",
        "Description": "The list to display as a drop-down menu for the user to choose from"
      },
      {
        "Argument": "Keep select dialog always on top",
        "Type": "Boolean value",
        "Description": "Specify whether the select dialog should always remain on top of all other windows"
      },
      {
        "Argument": "Limit to list",
        "Type": "Boolean value",
        "Description": "Whether to allow the user to enter their own answer outside of the list being displayed"
      },
      {
        "Argument": "Allow empty selection",
        "Type": "Boolean value",
        "Description": "Allow the user to not select anything, creating an empty selected item output"
      },
      {
        "Argument": "Allow multiple selections",
        "Type": "Boolean value",
        "Description": "Allow the user to select more than one choice. The selected item and selected index variables will hold a list of items"
      },
      {
        "Argument": "Preselect items starting with a + sign",
        "Type": "Boolean value",
        "Description": "Specify whether the items with a prepended '+' sign will appear automatically preselected"
      }
    ],
    "Variables produced": [
      {
        "Argument": "SelectedItem",
        "Type": "Text value",
        "Description": "The item selected from the list as text"
      },
      {
        "Argument": "SelectedItems",
        "Type": "List of Text values",
        "Description": "The items selected from the list as a list of text"
      },
      {
        "Argument": "SelectedIndex",
        "Type": "Numeric value",
        "Description": "The index number of the item selected from the list. You can use the item number instead of the full text of your choice"
      },
      {
        "Argument": "SelectedIndexes",
        "Type": "List of Numeric values",
        "Description": "The index number of the items selected from the list. This parameter allows you to use the item number instead of the full text of your choice"
      },
      {
        "Argument": "ButtonPressed",
        "Type": "Text value",
        "Description": "The name of the button pressed by the user (OK or Cancel)"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to display select dialog",
        "Description": "Indicates a problem displaying the select dialog"
      },
      {
        "Exception": "Can't display select dialog in noninteractive mode",
        "Description": "Indicates a problem displaying the input dialog in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Message boxes",
    "action": "Display select file dialog",
    "description": "Displays the select file dialog and prompts the user to select one or more files.",
    "Input parameters": [
      {
        "Argument": "Dialog title",
        "Type": "Text value",
        "Description": "The dialog title"
      },
      {
        "Argument": "Initial folder",
        "Type": "Folder",
        "Description": "The initial folder to open when browsing for a file. This folder is where the select file dialog action will start the user looking for the file(s)"
      },
      {
        "Argument": "File filter",
        "Type": "Text value",
        "Description": "A filter to limit the files retrieved. This parameter allows wild cards, for example \".txt\" or \"document?.doc\" (without the quotes). To allow the user to choose from multiple file filters, separate the choices with a semi-colon, for example \".txt;*.exe\""
      },
      {
        "Argument": "Keep file selection dialog always on top",
        "Type": "Boolean value",
        "Description": "Whether the file selection dialog should always remain on top of all other windows"
      },
      {
        "Argument": "Allow multiple selections",
        "Type": "Boolean value",
        "Description": "Whether the user will be able to select more than one file or not"
      },
      {
        "Argument": "Check if file exists",
        "Type": "Boolean value",
        "Description": "Whether only files that already exist will be accepted"
      }
    ],
    "Variables produced": [
      {
        "Argument": "SelectedFile",
        "Type": "File",
        "Description": "The file that will be selected through the dialog"
      },
      {
        "Argument": "SelectedFiles",
        "Type": "List of Files",
        "Description": "The file(s) selected"
      },
      {
        "Argument": "ButtonPressed",
        "Type": "Text value",
        "Description": "The text of the button pressed. The user will automatically be given the choice of Open or Cancel"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to display select file dialog",
        "Description": "Indicates a problem displaying the select file dialog"
      },
      {
        "Exception": "Can't display select file dialog in noninteractive mode",
        "Description": "Indicates a problem displaying the input dialog in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Message boxes",
    "action": "Display select folder dialog",
    "description": "Displays the select folder dialog and prompts the user to select a folder.",
    "Input parameters": [
      {
        "Argument": "Dialog description",
        "Type": "Text value",
        "Description": "The description of the select folder dialog For example, \"Please select the folder into which you wish to copy the files\""
      },
      {
        "Argument": "Initial folder",
        "Type": "Folder",
        "Description": "The initial folder to open. This folder will be the default folder unless the user picks a new one"
      },
      {
        "Argument": "Keep folder selection dialog always on top",
        "Type": "Boolean value",
        "Description": "Whether the folder selection dialog should always remain on top of all other windows"
      }
    ],
    "Variables produced": [
      {
        "Argument": "SelectedFolder",
        "Type": "Folder",
        "Description": "The selected folder"
      },
      {
        "Argument": "ButtonPressed",
        "Type": "Text value",
        "Description": "The text of the button pressed. The user will automatically be given the choice of OK or Cancel"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to display select folder dialog",
        "Description": "Indicates a problem displaying the select folder dialog"
      },
      {
        "Exception": "Can't display select folder dialog in noninteractive mode",
        "Description": "Indicates a problem displaying the input dialog in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Message boxes",
    "action": "Display custom form",
    "description": "Display a customized form that can include multiple types of elements, like text, number or file inputs etc.",
    "Input parameters": [],
    "Variables produced": [
      {
        "Argument": "CustomFormData",
        "Type": "Custom object",
        "Description": "A custom object containing the user's input"
      },
      {
        "Argument": "ButtonPressed",
        "Type": "Text value",
        "Description": "The ID of the button pressed"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to display custom form",
        "Description": "Indicates a problem displaying the custom form"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "System",
    "action": "If process",
    "description": "Marks the beginning of a conditional block of actions depending on whether a process is running or not.",
    "Input parameters": [
      {
        "Argument": "If process",
        "Type": "Is running, Isn't running",
        "Description": "State of the process to check"
      },
      {
        "Argument": "Process name",
        "Type": "Text value",
        "Description": "The name of the process to check"
      },
      {
        "Argument": "From User",
        "Type": "Boolean value",
        "Description": "Determine whether the process runs under a specific user or not"
      },
      {
        "Argument": "User name",
        "Type": "Text value",
        "Description": "Specify the name of the user running the process. The format is either domain\\username or username."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't retrieve list of processes",
        "Description": "Indicates a problem retrieving the list of processes"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "System",
    "action": "Wait for process",
    "description": "Suspends the execution until a process starts or stops.",
    "Input parameters": [
      {
        "Argument": "Process name",
        "Type": "Text value",
        "Description": "The name of the process to check"
      },
      {
        "Argument": "From User",
        "Type": "Boolean value",
        "Description": "Determine whether the process runs under a specific user or not"
      },
      {
        "Argument": "User name",
        "Type": "Text value",
        "Description": "Specify the name of the user running the process. The format is either domain\\username or username."
      },
      {
        "Argument": "Wait for process to",
        "Type": "Start, Stop",
        "Description": "Whether to wait until a certain process starts or stops"
      },
      {
        "Argument": "Fail with timeout error",
        "Type": "Boolean value",
        "Description": "Specify whether you want the action to wait indefinitely or fail after a set time period"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't retrieve list of processes",
        "Description": "Indicates a problem retrieving the list of processes"
      },
      {
        "Exception": "Timeout error",
        "Description": "A timeout occurred while waiting for the process"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "System",
    "action": "Run application",
    "description": "Executes an application or opens a document by executing the associated application.",
    "Input parameters": [
      {
        "Argument": "Application path",
        "Type": "File",
        "Description": "The executable file as a complete file path"
      },
      {
        "Argument": "Command line arguments",
        "Type": "Text value",
        "Description": "Add extra arguments that would go after the executable file name. For example, enter notepad.exe in the application path and a specific text file in the command line arguments"
      },
      {
        "Argument": "Working folder",
        "Type": "Folder",
        "Description": "The full path of the folder to work out of, if applicable."
      },
      {
        "Argument": "Window style",
        "Type": "Normal, Hidden, Minimized, Maximized",
        "Description": "Choose the appearance and size of the application window when it opens"
      },
      {
        "Argument": "After application launch",
        "Type": "Continue immediately, Wait for application to load, Wait for application to complete",
        "Description": "Whether the next action executes immediately, or waits until the program loads or completes"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The maximum wait time, and how long before forcing a continue"
      }
    ],
    "Variables produced": [
      {
        "Argument": "AppProcessId",
        "Type": "Numeric value",
        "Description": "The process ID output"
      },
      {
        "Argument": "AppExitCode",
        "Type": "Numeric value",
        "Description": "The application exit code"
      },
      {
        "Argument": "WindowHandle",
        "Type": "Numeric value",
        "Description": "The window handle. When opening a new window, this variable will catch the value of the window handle, and store it in this variable. A window handle is useful to specifically identify a window in a later action"
      }
    ],
    "Exceptions": [
      {
        "Exception": "File or application not found",
        "Description": "Indicates that the specified file or application wasn't found"
      },
      {
        "Exception": "Access denied for application or File",
        "Description": "Indicates that access was denied for the specified application or file"
      },
      {
        "Exception": "Can't retrieve application's main window handle",
        "Description": "Indicates a problem retrieving the application's main window handle"
      },
      {
        "Exception": "Can't execute application or open file",
        "Description": "Indicates a problem executing the specified application or opening the specified file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "System",
    "action": "Terminate process",
    "description": "Immediately stops a running process.",
    "Input parameters": [
      {
        "Argument": "Specify process by",
        "Type": "Process ID, Process name",
        "Description": "Specify whether the process to terminate is specified by its name, or by its ID"
      },
      {
        "Argument": "Process ID",
        "Type": "Numeric value",
        "Description": "The ID of the process to terminate"
      },
      {
        "Argument": "Process name",
        "Type": "Text value",
        "Description": "The name of the process to terminate. If more than one process with the same name is running, all of them are terminated"
      },
      {
        "Argument": "From User",
        "Type": "Boolean value",
        "Description": "Determine whether the process runs under a specific user or not"
      },
      {
        "Argument": "User name",
        "Type": "Text value",
        "Description": "Specify the name of the user running the process. The format is either domain\\username or username."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Process with specified ID not running",
        "Description": "Indicates that a process with the specified ID isn't running"
      },
      {
        "Exception": "Failed to terminate process",
        "Description": "Indicates a problem terminating the process"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "System",
    "action": "Ping",
    "description": "Sends a message to determine whether a remote computer is accessible over the network.",
    "Input parameters": [
      {
        "Argument": "Host name",
        "Type": "Text value",
        "Description": "The name of the remote computer or an IP address"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The maximum number of milliseconds to wait for the Ping reply message"
      }
    ],
    "Variables produced": [
      {
        "Argument": "PingResult",
        "Type": "Text value",
        "Description": "The status of the ping message (success or failure)"
      },
      {
        "Argument": "RoundTripTime",
        "Type": "Numeric value",
        "Description": "The number of milliseconds taken for the Ping to complete"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't complete ping action",
        "Description": "Indicates a problem completing the ping action"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "System",
    "action": "Set Windows environment variable",
    "description": "Sets an environment variable to a given value.",
    "Input parameters": [
      {
        "Argument": "Environment variable name",
        "Type": "Text value",
        "Description": "The name of the environment variable"
      },
      {
        "Argument": "New environment variable value",
        "Type": "Text value",
        "Description": "The value that is set to the environment variable"
      },
      {
        "Argument": "Type",
        "Type": "User, System",
        "Description": "The type of the environment variable"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Indicates a problem setting the environment variable's value",
        "Description": "Indicates a problem setting the environment variable's value"
      },
      {
        "Exception": "Insufficient permissions",
        "Description": "Indicates that the user has insufficient permissions to perform this action"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "System",
    "action": "Get Windows environment variable",
    "description": "Retrieves the value of an environment variable.",
    "Input parameters": [
      {
        "Argument": "Environment variable name",
        "Type": "Text value",
        "Description": "The name of the environment variable whose value will be retrieved"
      },
      {
        "Argument": "Search for variable only in scope",
        "Type": "Boolean value",
        "Description": "Specify whether to search for the variable only in a specific scope"
      },
      {
        "Argument": "Scope",
        "Type": "User, System",
        "Description": "The scope from which the environment variable should be retrieved"
      }
    ],
    "Variables produced": [
      {
        "Argument": "EnvironmentVariableValue",
        "Type": "Text value",
        "Description": "The environment variable's value"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Environment variable doesn't exist",
        "Description": "Indicates that the specified environment variable doesn't exist"
      },
      {
        "Exception": "Insufficient permissions",
        "Description": "Indicates that the user has insufficient permissions to perform this action"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "System",
    "action": "Delete Windows environment variable",
    "description": "Deletes an environment variable from a given scope.",
    "Input parameters": [
      {
        "Argument": "Environment variable name",
        "Type": "Text value",
        "Description": "The name of the environment variable to delete"
      },
      {
        "Argument": "Type",
        "Type": "User, System",
        "Description": "The type of the environment variable to delete"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to delete environment variable",
        "Description": "Indicates a problem deleting an environment variable"
      },
      {
        "Exception": "Insufficient permissions",
        "Description": "Indicates that the user has insufficient permissions to perform this action"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Extract data from web page",
    "description": "Extract data from specific parts of a web page in the form of single values, lists, rows, or tables.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element on web page to extract data from"
      },
      {
        "Argument": "Extraction parameters",
        "Type": "Datatable",
        "Description": "The parameters to use when extracting data. Depending on the extraction mode, this parameter accepts different data."
      },
      {
        "Argument": "Max web pages to process",
        "Type": "Numeric value",
        "Description": "The maximum number of web pages to process"
      },
      {
        "Argument": "Send physical click for next page",
        "Type": "Boolean value",
        "Description": "Specify whether to physically move the mouse cursor over the page prior to clicking. A physical click is required for cases where emulated clicks to the page don't perform the intentional action on the element. As this option requires the browser window to be focused, it will automatically bring it to the foreground."
      },
      {
        "Argument": "Page CSS selector",
        "Type": "Text value",
        "Description": "The page CSS selector"
      },
      {
        "Argument": "Extraction mode",
        "Type": "Undefined, Single value, Handpicked values, List, Table, Entire HTML table",
        "Description": "Specify what to extract from the web page"
      },
      {
        "Argument": "Use paging",
        "Type": "Boolean value",
        "Description": "Specify whether to use paging"
      },
      {
        "Argument": "Get all web pages",
        "Type": "Boolean value",
        "Description": "Specify whether to get all web pages"
      },
      {
        "Argument": "Process data upon extraction",
        "Type": "Boolean value",
        "Description": "Specify whether to process extracted data to present them exactly as displayed in the webpage. Processing of extracted data includes displaying of the information nested in iframes and filtering through hidden or visible elements. For larger datasets, having this option enabled isn't recommended as it will increase the extraction time."
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "Set the time in seconds that you want to wait for the extraction to be completed before the action fails"
      },
      {
        "Argument": "Store data mode",
        "Type": "Variable, Excel spreadsheet",
        "Description": "Specify whether to store the extracted data in a variable or an Excel spreadsheet"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExcelInstance",
        "Type": "Excel instance",
        "Description": "The Excel instance with the extracted data. Use this instance to manipulate the spreadsheet (or save and close it) by using the dedicated Excel actions."
      },
      {
        "Argument": "DataFromWebPage",
        "Type": "Datatable",
        "Description": "The extracted data in the form of a single value, list, data row, or data table."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to extract data",
        "Description": "Indicates a problem extracting data"
      },
      {
        "Exception": "Failed to launch Excel instance",
        "Description": "Indicates a problem launching an Excel instance"
      },
      {
        "Exception": "Failed to write values to Excel",
        "Description": "Indicates a problem writing the values to an Excel"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Get details of web page",
    "description": "Get a property of a web page, such as its title or its source text.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "Get",
        "Type": "Web page description, Web page meta keywords, Web page title, Web page text, Web page source, Web browser's current URL address",
        "Description": "Select the information to retrieve from the web page"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WebPageProperty",
        "Type": "Text value",
        "Description": "The details retrieved from the web page"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to get details of web page",
        "Description": "Indicates a problem getting the details of the specified web page"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Get details of element on web page",
    "description": "Get the value of an element's attribute on a web page.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element on web page to get details from"
      },
      {
        "Argument": "Attribute name",
        "Type": "Text value",
        "Description": "Enter or select the attribute whose value to retrieve"
      }
    ],
    "Variables produced": [
      {
        "Argument": "AttributeValue",
        "Type": "Text value",
        "Description": "The value of the web element's attribute"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve attribute of UI element on web page",
        "Description": "Indicates a problem retrieving attribute of web page element"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Take screenshot of web page",
    "description": "Take a screenshot of the web page (or an element of the web page) currently displayed in the browser and save the image into a file or to the clipboard.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "Capture",
        "Type": "Entire web page, Specific element",
        "Description": "Specify whether to capture the entire web page or only a specific element of it"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element on web page to capture"
      },
      {
        "Argument": "Save mode",
        "Type": "Clipboard, File",
        "Description": "Specify whether to save the image into a file or store it into the clipboard"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "Set the full path for the file to save the image capture"
      },
      {
        "Argument": "File format",
        "Type": "BMP, EMF, EXIF, GIF, JPG, PNG, TIFF, WMF",
        "Description": "Select the format of the image file"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Element with specified CSS selector not found",
        "Description": "Indicates that a web page element with the specified CSS selector wasn't found"
      },
      {
        "Exception": "Failed to save file",
        "Description": "Indicates a problem saving the specified file"
      },
      {
        "Exception": "Failed to save in the clipboard",
        "Description": "Indicates a problem while saving to the clipboard"
      },
      {
        "Exception": "Failed to take screenshot",
        "Description": "Indicates a problem taking a screenshot"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Focus text field on web page",
    "description": "Set the focus on an input element of a web page and scroll it into view.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element on web page to focus"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely before proceeding"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Element with specified CSS selector not found",
        "Description": "Indicates that a web page element with the specified CSS selector wasn't found"
      },
      {
        "Exception": "Failed to set input focus on web page text field",
        "Description": "Indicates a problem setting input focus on the specified web page text field"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Populate text field on web page",
    "description": "Fill a text field in a web page with the specified text.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the text field to populate"
      },
      {
        "Argument": "Text",
        "Type": "Direct encrypted input or Text value",
        "Description": "Enter the text to fill in the text field"
      },
      {
        "Argument": "If field isn't empty",
        "Type": "Replace text, Append text",
        "Description": "Specify whether to replace existing content, or to append."
      },
      {
        "Argument": "Populate text using physical keystrokes",
        "Type": "Boolean value",
        "Description": "Emulate using physical keystrokes when populating text to UI text field elements. Physical keystrokes are required for cases that emulated text population doesn't perform the intentional action on the element. As this option requires the browser window to be focused, it will automatically bring it in the foreground."
      },
      {
        "Argument": "Emulate typing",
        "Type": "Boolean value",
        "Description": "Specify whether to fill the text field at once by setting the value of the text box, or emulate a user typing by sending characters one by one. The latter method is slower, but required in some complex web pages."
      },
      {
        "Argument": "Unfocus text box after filling it",
        "Type": "Boolean value",
        "Description": "Choose whether to unfocus the text box right after this action fills it with the specified text. If scraping autocompletion lists, this parameter should be set to False."
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely after populating the text field"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears after populating the text field"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Element with specified CSS selector not found",
        "Description": "Indicates that a web page element with the specified CSS selector wasn't found"
      },
      {
        "Exception": "Failed to write on text field",
        "Description": "Indicates a problem writing to the specified text field"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Set check box state on web page",
    "description": "Check or uncheck a check box in a web form.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the check box to set the state of"
      },
      {
        "Argument": "Check box state",
        "Type": "Checked, Unchecked",
        "Description": "Select the check box state"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely after setting the check box state"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears after setting the check box state"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Element with specified CSS selector not found",
        "Description": "Indicates that a web page element with the specified CSS selector wasn't found"
      },
      {
        "Exception": "Failed to set the state of the checkbox",
        "Description": "Indicates a problem in setting the state of the specified check box"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Select radio button on web page",
    "description": "Select a radio button on the web page.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The radio button to select"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely after selecting the radio button"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears after selecting the radio button"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "The dialog button to press if a pop-up dialog appears"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Element with specified CSS selector not found",
        "Description": "Indicates that a web page element with the specified CSS selector wasn't found"
      },
      {
        "Exception": "Failed to select radio button",
        "Description": "Indicates a problem in selecting the specified radio button"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Set drop-down list value on web page",
    "description": "Set or clear the selected options for a drop-down list in a web form.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the drop-down list to set its value"
      },
      {
        "Argument": "Operation",
        "Type": "Clear all options, Select options by name, Select options by index",
        "Description": "Select whether to select a value or clear the selected value of the drop-down list"
      },
      {
        "Argument": "Option names",
        "Type": "List of Text values",
        "Description": "Enter an option or a list of options to be selected in the drop-down list. Multiple options make sense only when working with multi-selection lists. If the list is single-selection, then only the first option of the list specified will be used."
      },
      {
        "Argument": "Use regular expressions",
        "Type": "Boolean value",
        "Description": "Specify whether the option names values to interpret as a regular expression"
      },
      {
        "Argument": "Option indices",
        "Type": "List of Numeric values",
        "Description": "Enter an index or a list of indices to be selected in the drop-down list. Multiple options make sense only when working with multi-selection lists. If the list is single-selection, then only the first option of the list specified will be used."
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely after setting the drop-down list value"
      },
      {
        "Argument": "Timeout for webpage load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears after setting the drop-down list value"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Element with specified CSS selector not found",
        "Description": "Indicates that a web page element with the specified CSS selector wasn't found"
      },
      {
        "Exception": "Failed to set the selected option",
        "Description": "Indicates a problem setting the selected drop-down list option"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Press button on web page",
    "description": "Press a web page button.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the button to press"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely after pressing the button"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears after pressing the button"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Element with specified CSS selector not found",
        "Description": "Indicates that a web page element with the specified CSS selector wasn't found"
      },
      {
        "Exception": "Failed to click on web page button",
        "Description": "Indicates a problem clicking the specified web page button"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "If web page contains",
    "description": "Mark the beginning of a conditional block of actions, depending on whether a specific piece of text or element exists in a web page.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "Check if web page",
        "Type": "Contains element, Doesn't contain element, Contains text, Doesn't contain text",
        "Description": "Check whether a specific text or web page element exists in a web page"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element on web page to check for"
      },
      {
        "Argument": "Text",
        "Type": "Text value",
        "Description": "Enter the text on web page to check for"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to communicate with the browser",
        "Description": "Indicates that an error with the browser occurred"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Wait for web page content",
    "description": "Suspend the flow until a specific piece of text or web page element appears or disappears from a web page.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "Wait for web page to",
        "Type": "Contain element, Not contain element, Contain text, Not contain text",
        "Description": "Specify whether to wait for a specific text or web page element to appear or disappear in a web page"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element on web page to check for"
      },
      {
        "Argument": "Text",
        "Type": "Text value",
        "Description": "Enter the text on web page to check for"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Wait for web page content failed",
        "Description": "Indicates that the wait operation failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Launch new Internet Explorer",
    "description": "Launch a new instance or attach to a running instance of Internet Explorer for automating websites and web applications.",
    "Input parameters": [
      {
        "Argument": "Launch mode",
        "Type": "Launch automation browser, Launch new Internet Explorer, Attach to running Internet Explorer",
        "Description": "Specify whether to launch the automation browser or a new instance of Internet Explorer or attach to an existing one"
      },
      {
        "Argument": "Attach to Internet Explorer tab",
        "Type": "By title, By URL, Use foreground window",
        "Description": "Specify whether to attach to an Internet Explorer tab by its title, URL, or attach to the active tab of Internet Explorer running as the foreground window"
      },
      {
        "Argument": "Initial URL",
        "Type": "Text value",
        "Description": "Enter the URL of the web site to visit when the web browser is launched"
      },
      {
        "Argument": "Tab title",
        "Type": "Text value",
        "Description": "Enter the title (or part of it) of the Internet Explorer tab to attach to"
      },
      {
        "Argument": "Tab URL",
        "Type": "Text value",
        "Description": "Enter the URL (or part of it) of the Internet Explorer tab to attach to"
      },
      {
        "Argument": "Window state",
        "Type": "Normal, Maximized, Minimized",
        "Description": "Specify whether to launch the browser window in normal, minimized, or maximized state"
      },
      {
        "Argument": "Target desktop",
        "Type": "Local computer, Any virtual desktop that is either currently connected or has at least one UI element captured",
        "Description": "Set the connection string of the target desktop that the browser launches"
      },
      {
        "Argument": "Clear cache",
        "Type": "Boolean value",
        "Description": "Specify whether to clear the entire cache of the web browser right after launching it"
      },
      {
        "Argument": "Clear cookies",
        "Type": "Boolean value",
        "Description": "Specify whether to clear all stored cookies in the web browser right after launching it"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely before proceeding"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears while loading the initial web page"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      },
      {
        "Argument": "Custom user agent string",
        "Type": "Text value",
        "Description": "Specify the custom user agent string for the runtime web helper. If this field remains empty, the runtime web helper uses by default the user agent string of Internet Explorer installed on the machine."
      }
    ],
    "Variables produced": [
      {
        "Argument": "InternetExplorer",
        "Type": "Web browser instance",
        "Description": "The Internet Explorer instance to use with browser automation actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to launch Internet Explorer",
        "Description": "Indicates a problem launching Internet Explorer"
      },
      {
        "Exception": "Invalid URL",
        "Description": "Indicates that the provided URL was invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Launch new Firefox",
    "description": "Launch a new instance or attach to a running instance of Firefox for automating websites and web applications.",
    "Input parameters": [
      {
        "Argument": "Launch mode",
        "Type": "Launch new Instance, Attach to running instance",
        "Description": "Specify whether to launch a new instance of Firefox or attach to an existing one"
      },
      {
        "Argument": "Attach to Firefox tab",
        "Type": "By title, By URL, Use foreground window",
        "Description": "Specify whether to attach to a Firefox tab by its title, URL, or attach to the active tab of Firefox running as the foreground window"
      },
      {
        "Argument": "Initial URL",
        "Type": "Text value",
        "Description": "Enter the URL of the web site to visit when the web browser is launched"
      },
      {
        "Argument": "Tab title",
        "Type": "Text value",
        "Description": "Enter the title (or part of it) of the Firefox tab to attach to"
      },
      {
        "Argument": "Tab URL",
        "Type": "Text value",
        "Description": "Enter the URL (or part of it) of the Firefox tab to attach to"
      },
      {
        "Argument": "Window state",
        "Type": "Normal, Maximized, Minimized",
        "Description": "Specify whether to launch the browser window in normal, minimized, or maximized state"
      },
      {
        "Argument": "Target desktop",
        "Type": "Local computer, Any virtual desktop that is either currently connected or has at least one UI element captured",
        "Description": "Set the connection string of the target desktop that the browser launches"
      },
      {
        "Argument": "Clear cache",
        "Type": "Boolean value",
        "Description": "Specify whether to clear the entire cache of the web browser right after launching it"
      },
      {
        "Argument": "Clear cookies",
        "Type": "Boolean value",
        "Description": "Specify whether to clear all stored cookies in the web browser right after launching it"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely before proceeding"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears while loading the initial web page"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "Set the time in seconds that you want to wait for the browser to be launched before the action fails"
      },
      {
        "Argument": "User data folder",
        "Type": "Picture-in-Picture default, Browser default, Custom",
        "Description": "Specify the user data folder the browser uses when the flow runs in Picture-in-Picture. If Browser default is selected, the browser can't be opened on both the desktop and in Picture-in-Picture at the same time. Learn more"
      },
      {
        "Argument": "User data folder path",
        "Type": "Folder",
        "Description": "Specify the path of the user data folder the browser uses when the flow runs in Picture-in-Picture. Learn more"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Browser",
        "Type": "Web browser instance",
        "Description": "The Firefox instance to use with browser automation actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to launch Firefox",
        "Description": "Indicates a problem launching Firefox"
      },
      {
        "Exception": "Invalid URL",
        "Description": "Indicates that the provided URL was invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Launch new Chrome",
    "description": "Launch a new instance or attach to a running instance of Chrome for automating websites and web applications.",
    "Input parameters": [
      {
        "Argument": "Launch mode",
        "Type": "Launch new Instance, Attach to running instance",
        "Description": "Specify whether to launch a new instance of Chrome or attach to an existing one"
      },
      {
        "Argument": "Attach to Chrome tab",
        "Type": "By title, By URL, Use foreground window",
        "Description": "Specify whether to attach to a Chrome tab by its title, URL, or attach to the active tab of Chrome running as the foreground window"
      },
      {
        "Argument": "Initial URL",
        "Type": "Text value",
        "Description": "Enter the URL of the web site to visit when the web browser is launched"
      },
      {
        "Argument": "Tab title",
        "Type": "Text value",
        "Description": "Enter the title (or part of it) of the Chrome tab to attach to"
      },
      {
        "Argument": "Tab URL",
        "Type": "Text value",
        "Description": "Enter the URL (or part of it) of the Chrome tab to attach to"
      },
      {
        "Argument": "Window state",
        "Type": "Normal, Maximized, Minimized",
        "Description": "Specify whether to launch the browser window in normal, minimized, or maximized state"
      },
      {
        "Argument": "Target desktop",
        "Type": "Local computer, Any virtual desktop that is either currently connected or has at least one UI element captured",
        "Description": "Set the connection string of the target desktop that the browser launches"
      },
      {
        "Argument": "Clear cache",
        "Type": "Boolean value",
        "Description": "Specify whether to clear the entire cache of the web browser right after launching it"
      },
      {
        "Argument": "Clear cookies",
        "Type": "Boolean value",
        "Description": "Specify whether to clear all stored cookies in the web browser right after launching it"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely before proceeding"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears while loading the initial web page"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "Set the time in seconds that you want to wait for the browser to be opened before the action fails"
      },
      {
        "Argument": "User data folder",
        "Type": "Picture-in-Picture default, Browser default, Custom",
        "Description": "Specify the user data folder the browser uses when the flow runs in Picture-in-Picture. If Browser default is selected, the browser can't be opened on both the desktop and in Picture-in-Picture at the same time. Learn more"
      },
      {
        "Argument": "User data folder path",
        "Type": "Folder",
        "Description": "Specify the path of the user data folder the browser will use when the flow runs in Picture-in-Picture. Learn more"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Browser",
        "Type": "Web browser instance",
        "Description": "The Chrome instance to use with browser automation actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to launch Chrome",
        "Description": "Indicates a problem launching Chrome"
      },
      {
        "Exception": "Invalid URL",
        "Description": "Indicates that the provided URL was invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Launch new Microsoft Edge",
    "description": "Launch a new instance or attach to a running instance of Microsoft Edge for automating websites and web applications.",
    "Input parameters": [
      {
        "Argument": "Launch mode",
        "Type": "Launch new Instance, Attach to running instance",
        "Description": "Specify whether to launch a new instance of Microsoft Edge or attach to an existing one"
      },
      {
        "Argument": "Attach to Microsoft Edge tab",
        "Type": "By title, By URL, Use foreground window",
        "Description": "Specify whether to attach to a Microsoft Edge tab by its title, URL, or attach to the active tab of Microsoft Edge running as the foreground window"
      },
      {
        "Argument": "Initial URL",
        "Type": "Text value",
        "Description": "Enter the URL of the web site to visit when the web browser is launched"
      },
      {
        "Argument": "Tab title",
        "Type": "Text value",
        "Description": "Enter the title (or part of it) of the Microsoft Edge tab to attach to"
      },
      {
        "Argument": "Tab URL",
        "Type": "Text value",
        "Description": "Enter the URL (or part of it) of the Microsoft Edge tab to attach to"
      },
      {
        "Argument": "Window state",
        "Type": "Normal, Maximized, Minimized",
        "Description": "Specify whether to launch the browser window in normal, minimized, or maximized state"
      },
      {
        "Argument": "Target desktop",
        "Type": "Local computer, Any virtual desktop that is either currently connected or has at least one UI element captured",
        "Description": "Set the connection string of the target desktop that the browser launches"
      },
      {
        "Argument": "Clear cache",
        "Type": "Boolean value",
        "Description": "Specify whether to clear the entire cache of the web browser right after launching it"
      },
      {
        "Argument": "Clear cookies",
        "Type": "Boolean value",
        "Description": "Specify whether to clear all stored cookies in the web browser right after launching it"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely before proceeding"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears while loading the initial web page"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "Set the time in seconds that you want to wait for the browser to be launched before the action fails"
      },
      {
        "Argument": "User data folder",
        "Type": "Picture-in-Picture default, Browser default, Custom",
        "Description": "Specify the user data folder the browser uses when the flow runs in Picture-in-Picture. If Browser default is selected, the browser can't be opened on both the desktop and in Picture-in-Picture at the same time. Learn more"
      },
      {
        "Argument": "User data folder path",
        "Type": "Folder",
        "Description": "Specify the path of the user data folder the browser uses when the flow runs in Picture-in-Picture. Learn more"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Browser",
        "Type": "Web browser instance",
        "Description": "The Microsoft Edge instance to use with browser automation actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to launch Microsoft Edge",
        "Description": "Indicates a problem launching Microsoft Edge"
      },
      {
        "Exception": "Invalid URL",
        "Description": "Indicates that the provided URL was invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Create new tab",
    "description": "Create a new tab and navigate to the given URL (supported in Microsoft Edge, Chrome, and Firefox).",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "URL to navigate to",
        "Type": "Text value",
        "Description": "Enter the URL, or a variable containing the URL, to navigate to"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely before proceeding"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears while loading the web page"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      }
    ],
    "Variables produced": [
      {
        "Argument": "NewBrowser",
        "Type": "Web browser instance",
        "Description": "The new web browser instance to use with browser automation actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Invalid URL",
        "Description": "Indicates that the provided URL was invalid"
      },
      {
        "Exception": "Failed to create a new tab",
        "Description": "Indicates a problem creating a new tab"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Go to web page",
    "description": "Navigate the web browser to a new page.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "Navigate",
        "Type": "To URL, Back, Forward, Reload web page",
        "Description": "Specify where to navigate to"
      },
      {
        "Argument": "URL",
        "Type": "Text value",
        "Description": "Enter the URL to navigate to"
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the web page to load completely before proceeding"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears while loading the web page"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to navigate to web page",
        "Description": "Indicates a problem navigating to the specified web page"
      },
      {
        "Exception": "Invalid URL",
        "Description": "Indicates that the provided URL was invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Click link on web page",
    "description": "Click on a link or any other element of a web page.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element on web page to click"
      },
      {
        "Argument": "Click type",
        "Type": "Left click, Right click, Double click, Left button down, Left button up, Right button down, Right button up, Middle click",
        "Description": "The kind of click to perform"
      },
      {
        "Argument": "Send physical click",
        "Type": "Boolean value",
        "Description": "Specify whether to physically move the mouse cursor over the element prior to clicking. A physical click is required for cases where emulated clicks don't perform the intentional action on the element. As this option requires the browser window to be focused, it will automatically bring it to the foreground."
      },
      {
        "Argument": "Wait for page to load",
        "Type": "Boolean value",
        "Description": "Specify whether to wait for the new web page to load completely after clicking the link"
      },
      {
        "Argument": "Timeout for webpage to load",
        "Type": "Numeric value",
        "Description": "Set the time in seconds for page to load before the action throws an error"
      },
      {
        "Argument": "If a pop-up dialog appears",
        "Type": "Close it, Press a button, Do nothing",
        "Description": "Specify what to do if a pop-up dialog appears after clicking the link"
      },
      {
        "Argument": "Dialog button to press",
        "Type": "Text value",
        "Description": "Enter the dialog button to press if a pop-up dialog appears"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Element with specified CSS selector not found",
        "Description": "Indicates that a web page element with the specified CSS selector wasn't found"
      },
      {
        "Exception": "Failed to click UI element",
        "Description": "Indicates a problem clicking the specified element"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Click download link on web page",
    "description": "Select a link in a web page that results in downloading a file.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element on web page to click"
      },
      {
        "Argument": "Destination folder",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to save the downloaded file to"
      }
    ],
    "Variables produced": [
      {
        "Argument": "DownloadedFile",
        "Type": "File",
        "Description": "The file on the disk where the download is saved. This value is a filepath that consists of the download folder as specified above plus the name of the file as provided by the web server."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to download file",
        "Description": "Indicates a problem downloading the specified file"
      },
      {
        "Exception": "Element with specified CSS selector not found",
        "Description": "Indicates that a web page element with the specified CSS selector wasn't found"
      },
      {
        "Exception": "Failed to click UI element",
        "Description": "Indicates a problem clicking the specified element"
      },
      {
        "Exception": "Failed to save file",
        "Description": "Indicates a problem saving the specified file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Run JavaScript function on web page",
    "description": "Run a JavaScript function on the web page and get the returned result.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "JavaScript function",
        "Type": "Text value",
        "Description": "Enter the JavaScript function to run on the web page"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Result",
        "Type": "Text value",
        "Description": "The result of the JavaScript function that ran"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to run JavaScript",
        "Description": "Indicates a problem running JavaScript"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Hover mouse over element on web page",
    "description": "Hover the mouse over an element of a web page.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to work with"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element on web page to hover"
      },
      {
        "Argument": "Move mouse to hover",
        "Type": "Boolean value",
        "Description": "Specify whether to physically move the mouse cursor over the element in order to hover the UI element. A physical hover is required for cases where emulated hover doesn't perform the intentional action on the element. As this option requires the browser window to be focused, it automatically brings it to the foreground."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to hover over element",
        "Description": "Indicates a problem hovering over the specified element"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Browser automation",
    "action": "Close web browser",
    "description": "Close a web browser window.",
    "Input parameters": [
      {
        "Argument": "Web browser instance",
        "Type": "Web browser instance",
        "Description": "Enter or choose the variable that contains the web browser instance to close"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to close the web browser",
        "Description": "Indicates a problem closing the web browser"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Exchange Server",
    "action": "Connect to Exchange server",
    "description": "Open a new connection to an Exchange server.",
    "Input parameters": [
      {
        "Argument": "Exchange server version",
        "Type": "Exchange 2010, Exchange 2010 SP1, Exchange 2010 SP2, Exchange 2013, Exchange 2013 SP1",
        "Description": "The version of the Exchange server"
      },
      {
        "Argument": "Connection type",
        "Type": "Auto discovery, Exchange server address",
        "Description": "Specifies how to connect to the Exchange server"
      },
      {
        "Argument": "Server address",
        "Type": "Text value",
        "Description": "The Exchange server address"
      },
      {
        "Argument": "Email address",
        "Type": "Text value",
        "Description": "The Exchange account email address"
      },
      {
        "Argument": "Credentials",
        "Type": "Exchange default, User defined",
        "Description": "Specifies the way to provide the user's Exchange credentials"
      },
      {
        "Argument": "Domain",
        "Type": "Text value",
        "Description": "The Exchange account domain. To extract the account domain from the username, left this field empty"
      },
      {
        "Argument": "Username",
        "Type": "Text value",
        "Description": "The Exchange account username"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The Exchange account password"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time in seconds to wait for the connection to be established before the action fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExchangeConnection",
        "Type": "Exchange connection",
        "Description": "The specific Exchange connection for use with later Exchange actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to connect to the Exchange server",
        "Description": "Indicates a problem connecting to the Exchange server"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Exchange Server",
    "action": "Retrieve Exchange email messages",
    "description": "Retrieve email messages from the specified Exchange server.",
    "Input parameters": [
      {
        "Argument": "Exchange connection",
        "Type": "Exchange connection",
        "Description": "The Exchange connection. Create an Exchange connection with the 'Connect to Exchange server' action"
      },
      {
        "Argument": "Mailbox type",
        "Type": "Personal, Shared",
        "Description": "The type of the mailbox to retrieve email messages from"
      },
      {
        "Argument": "Shared mailbox address",
        "Type": "Text value",
        "Description": "The address of the shared mailbox to retrieve email messages from"
      },
      {
        "Argument": "Retrieve email messages from custom folder",
        "Type": "Boolean value",
        "Description": "Specifies whether to retrieve email messages from a custom folder or a predefined Exchange folder"
      },
      {
        "Argument": "Exchange folder",
        "Type": "Inbox, Deleted items, Drafts, Outbox, Sent items, Junk email",
        "Description": "A predefined Exchange folder to retrieve email messages from"
      },
      {
        "Argument": "Mail folder",
        "Type": "Text value",
        "Description": "The name or path (e.g. folder1\\folder2) of the mail-folder to retrieve email messages from"
      },
      {
        "Argument": "Retrieve",
        "Type": "All email messages, Unread email messages only, Read email messages only",
        "Description": "Specifies whether to retrieve all email messages in the folder or only the unread ones"
      },
      {
        "Argument": "Mark as read",
        "Type": "Boolean value",
        "Description": "Specifies whether to mark as read the retrieved email messages or leave them as is"
      },
      {
        "Argument": "From contains",
        "Type": "Text value",
        "Description": "The full email address of the sender to retrieve messages from. Leave this attribute blank to retrieve all messages regardless of the sender"
      },
      {
        "Argument": "To contains",
        "Type": "Text value",
        "Description": "The full email address(es) of the recipient(s) (separated by space if more than one) for the email messages to retrieve. Leave this attribute blank to retrieve all email messages regardless of the recipient(s)"
      },
      {
        "Argument": "Subject contains",
        "Type": "Text value",
        "Description": "The key phrase to find within the email subject. Leave this attribute blank to retrieve all email messages regardless of their subject"
      },
      {
        "Argument": "Body contains",
        "Type": "Text value",
        "Description": "The key phrase to find within the email body. Leave this attribute blank to retrieve all email messages regardless of their content"
      },
      {
        "Argument": "Attachments",
        "Type": "Save attachments, Do not save attachments",
        "Description": "Specifies whether to save the attachments of the email messages retrieved or not"
      },
      {
        "Argument": "Save attachments into",
        "Type": "Folder",
        "Description": "The folder to save the attachments into"
      }
    ],
    "Variables produced": [
      {
        "Argument": "RetrievedEmails",
        "Type": "List of Exchange mail messages",
        "Description": "The retrieved email messages for later processing as a list of Exchange mail messages objects"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to save attachments",
        "Description": "Indicates a problem saving the attachments"
      },
      {
        "Exception": "Specified mail-folder doesn't exist",
        "Description": "Indicates that the specified mail folder doesn't exist"
      },
      {
        "Exception": "Failed to retrieve email messages",
        "Description": "Indicates a problem retrieving the email messages"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Exchange Server",
    "action": "Send Exchange email message",
    "description": "Create and send a new email message.",
    "Input parameters": [
      {
        "Argument": "Exchange connection",
        "Type": "Exchange connection",
        "Description": "The Exchange connection. Create an Exchange connection with the 'Connect to Exchange server' action"
      },
      {
        "Argument": "From",
        "Type": "Text value",
        "Description": "The sender's email address"
      },
      {
        "Argument": "Sender display name",
        "Type": "Text value",
        "Description": "The sender's display name"
      },
      {
        "Argument": "To",
        "Type": "Text value",
        "Description": "The email(s) of the recipient(s). To enter more than one email, separate the list of addresses by semi-colons"
      },
      {
        "Argument": "CC",
        "Type": "Text value",
        "Description": "The email(s) of the CC recipient(s). To enter more than one email, separate the list of addresses by semi-colons"
      },
      {
        "Argument": "BCC",
        "Type": "Text value",
        "Description": "The email(s) of the BCC (hidden) recipient(s). To enter more than one email, separate the list of addresses by semi-colons"
      },
      {
        "Argument": "Subject",
        "Type": "Text value",
        "Description": "The subject of the email"
      },
      {
        "Argument": "Body",
        "Type": "Text value",
        "Description": "The text of the body"
      },
      {
        "Argument": "Body is HTML",
        "Type": "Boolean value",
        "Description": "Specifies whether to interpret the body of the email as HTML coding"
      },
      {
        "Argument": "Attachment(s)",
        "Type": "List of Files",
        "Description": "The full path of any attachment(s). Enclose multiple files in double quotes (\") and separate them by a space character"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Attachment not found",
        "Description": "Indicates that the specified attachment(s) don't exist"
      },
      {
        "Exception": "Failed to send email",
        "Description": "Indicates a problem sending the email"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Exchange Server",
    "action": "Process Exchange email messages",
    "description": "Move, delete or mark as unread an email message (or a list of email messages).",
    "Input parameters": [
      {
        "Argument": "Exchange connection",
        "Type": "Exchange connection",
        "Description": "The Exchange connection. Create an Exchange connection with the 'Connect to Exchange server' action"
      },
      {
        "Argument": "Email message(s) to process",
        "Type": "List of Exchange mail messages",
        "Description": "The email message(s) to process. Use a variable populated by a 'Retrieve Exchange email messages' action"
      },
      {
        "Argument": "Operation",
        "Type": "Delete email messages from server, Mark email messages as unread, Move email messages to mail folder",
        "Description": "Specifies which operation to perform on the specified email messages"
      },
      {
        "Argument": "Mailbox type",
        "Type": "Personal, Shared",
        "Description": "The type of the mailbox to retrieve email messages from"
      },
      {
        "Argument": "Shared mailbox address",
        "Type": "Text value",
        "Description": "The address of the shared mailbox to retrieve email messages from"
      },
      {
        "Argument": "Move to custom folder",
        "Type": "Boolean value",
        "Description": "Specifies whether to move email messages to a custom folder or a predefined Exchange folder"
      },
      {
        "Argument": "Exchange folder",
        "Type": "Inbox, Deleted items, Drafts, Outbox, Sent items, Junk email",
        "Description": "A predefined Exchange folder to move email messages from"
      },
      {
        "Argument": "Mail folder",
        "Type": "Text value",
        "Description": "The name or path (e.g. folder1\\folder2) of the mail-folder to move email messages to"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Specified mail-folder doesn't exist",
        "Description": "Indicates that the specified mail folder doesn't exist"
      },
      {
        "Exception": "Failed to process email messages",
        "Description": "Indicates a problem processing the specified email messages"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Microsoft Cognitive",
    "action": "Spell check",
    "description": "Invokes the Microsoft Cognitive service named 'Bing Spell Check.'",
    "Input parameters": [
      {
        "Argument": "Subscription key",
        "Type": "Text value",
        "Description": "The subscription key to use for this API call"
      },
      {
        "Argument": "Text",
        "Type": "List of Text values",
        "Description": "The text or the list of texts to send"
      },
      {
        "Argument": "Mode",
        "Type": "Text value",
        "Description": "Specify the spell-check mode"
      },
      {
        "Argument": "Mkt",
        "Type": "Text value",
        "Description": "For proof mode, the only supported language codes are: en-us, es-es, pt-br. For spell mode, all language codes are supported"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Microsoft Cognitive",
    "action": "Analyze image",
    "description": "Invokes the Microsoft Cognitive service named 'Analyze Image.'",
    "Input parameters": [
      {
        "Argument": "Server location",
        "Type": "West US, West US 2, East US, East US 2, West Central US, South Central US, West Europe, North Europe, Southeast Asia, East Asia, Australia East, Brazil South, Canada Central, Central India, UK South, Japan East",
        "Description": "The server location to be used for this API call"
      },
      {
        "Argument": "Subscription key",
        "Type": "Text value",
        "Description": "The subscription key to use for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a URL address"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "Image URL",
        "Type": "Text value",
        "Description": "The URL address of an image"
      },
      {
        "Argument": "Visual features",
        "Type": "Text value",
        "Description": "A text value indicating what visual feature types to return. Multiple values should be comma-separated. For example: categories, tags, description"
      },
      {
        "Argument": "Details",
        "Type": "Text value",
        "Description": "A text value indicating which domain-specific details to return. Multiple values should be comma-separated"
      },
      {
        "Argument": "Language",
        "Type": "Text value",
        "Description": "A text value indicating which language to return. The service will return recognition results in the specified language"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Microsoft Cognitive",
    "action": "Describe image",
    "description": "Invokes the Microsoft Cognitive service named 'Describe Image.'",
    "Input parameters": [
      {
        "Argument": "Server location",
        "Type": "West US, West US 2, East US, East US 2, West Central US, South Central US, West Europe, North Europe, Southeast Asia, East Asia, Australia East, Brazil South, Canada Central, Central India, UK South, Japan East",
        "Description": "The server location to be used for this API call"
      },
      {
        "Argument": "Subscription key",
        "Type": "Text value",
        "Description": "The subscription key to use for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a URL address"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "Image URL",
        "Type": "Text value",
        "Description": "The URL address of an image"
      },
      {
        "Argument": "Max candidates",
        "Type": "Text value",
        "Description": "The maximum number of candidate descriptions to be returned. The default is 1"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Microsoft Cognitive",
    "action": "OCR",
    "description": "Invokes the Microsoft Cognitive service named 'OCR.'",
    "Input parameters": [
      {
        "Argument": "Server location",
        "Type": "West US, West US 2, East US, East US 2, West Central US, South Central US, West Europe, North Europe, Southeast Asia, East Asia, Australia East, Brazil South, Canada Central, Central India, UK South, Japan East",
        "Description": "The server location to be used for this API call"
      },
      {
        "Argument": "Subscription key",
        "Type": "Text value",
        "Description": "The subscription key to use for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a URL address"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "Image URL",
        "Type": "Text value",
        "Description": "The URL address of an image"
      },
      {
        "Argument": "Language",
        "Type": "Text value",
        "Description": "The BCP-47 language code of the text to detect in the image"
      },
      {
        "Argument": "Detect orientation",
        "Type": "Text value",
        "Description": "Specify whether to detect the text orientation in the image"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Microsoft Cognitive",
    "action": "Tag image",
    "description": "Invokes the Microsoft Cognitive service named 'Tag Image.'",
    "Input parameters": [
      {
        "Argument": "Server location",
        "Type": "West US, West US 2, East US, East US 2, West Central US, South Central US, West Europe, North Europe, Southeast Asia, East Asia, Australia East, Brazil South, Canada Central, Central India, UK South, Japan East",
        "Description": "The server location to be used for this API call"
      },
      {
        "Argument": "Subscription key",
        "Type": "Text value",
        "Description": "The subscription key to use for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a URL address"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "Image URL",
        "Type": "Text value",
        "Description": "The URL address of an image"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Microsoft Cognitive",
    "action": "Detect language",
    "description": "Invokes the Microsoft Cognitive service named 'Text Analytics - Detect Language.'",
    "Input parameters": [
      {
        "Argument": "Server location",
        "Type": "West US, West US 2, East US, East US 2, West Central US, South Central US, West Europe, North Europe, Southeast Asia, East Asia, Australia East, Brazil South, Canada Central, Central India, UK South, Japan East",
        "Description": "The server location to be used for this API call"
      },
      {
        "Argument": "Subscription key",
        "Type": "Text value",
        "Description": "The subscription key to use for this API call"
      },
      {
        "Argument": "Text",
        "Type": "Text value",
        "Description": "The text to analyze"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Microsoft Cognitive",
    "action": "Key phrases",
    "description": "Invokes the Microsoft Cognitive service named 'Text Analytics - Key Phrases.'",
    "Input parameters": [
      {
        "Argument": "Server location",
        "Type": "West US, West US 2, East US, East US 2, West Central US, South Central US, West Europe, North Europe, Southeast Asia, East Asia, Australia East, Brazil South, Canada Central, Central India, UK South, Japan East",
        "Description": "The server location to be used for this API call"
      },
      {
        "Argument": "Subscription key",
        "Type": "Text value",
        "Description": "The subscription key to use for this API call"
      },
      {
        "Argument": "Text",
        "Type": "List of Text values",
        "Description": "The text or the list of texts to analyze"
      },
      {
        "Argument": "Language",
        "Type": "Text value",
        "Description": "The language of the text(s)"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Microsoft Cognitive",
    "action": "Sentiment",
    "description": "Invokes the Microsoft Cognitive service named 'Text Analytics - Sentiment.'",
    "Input parameters": [
      {
        "Argument": "Server location",
        "Type": "West US, West US 2, East US, East US 2, West Central US, South Central US, West Europe, North Europe, Southeast Asia, East Asia, Australia East, Brazil South, Canada Central, Central India, UK South, Japan East",
        "Description": "The server location to be used for this API call"
      },
      {
        "Argument": "Subscription key",
        "Type": "Text value",
        "Description": "The subscription key to use for this API call"
      },
      {
        "Argument": "Text",
        "Type": "List of Text values",
        "Description": "Text"
      },
      {
        "Argument": "Language",
        "Type": "Text value",
        "Description": "The two letter ISO 639-1 representation of the language of the text(s)"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      },
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Terminal emulation",
    "action": "Open terminal session",
    "description": "Open a new terminal session.",
    "Input parameters": [
      {
        "Argument": "Provider",
        "Type": "Micro focus reflection, HLLAPI",
        "Description": "The terminal emulation to use"
      },
      {
        "Argument": "HLLAPI DLL path",
        "Type": "File",
        "Description": "The HLLAPI DLL of the provider. RocketSoftware BlueZone default name: 'ehlapi64.dll'. IBM Personal Communications default name: 'EHLAPI32.dll'. MicroFocus Rumba default path: 'System/ehlapi32.Dll'. Cybelesoft zScope default name: 'zHllap32.dll'. Any other provider that offers an HLLAPI DLL in its installation folder."
      },
      {
        "Argument": "Installation path",
        "Type": "Folder",
        "Description": "The installation path of the provider's application on the user's file system"
      },
      {
        "Argument": "Configuration",
        "Type": "Existing profile, Specify connection",
        "Description": "Choose 'Existing profile' to select a file containing a preconfigured terminal emulation connection. Choose 'Specify connection' to specify the type of the connection, the host address and the port."
      },
      {
        "Argument": "Session name",
        "Type": "Text value",
        "Description": "The session name to connect to. The HLLAPI short name, and it's a unique identifier for the host session. It can be found in the Terminal emulator's configuration settings."
      },
      {
        "Argument": "Host type",
        "Type": "IBM 3270, IBM 5250",
        "Description": "The host type of the connection"
      },
      {
        "Argument": "Profile",
        "Type": "File",
        "Description": "The file that contains the preconfigured connection"
      },
      {
        "Argument": "Host address",
        "Type": "Text value",
        "Description": "The host's address to connect to"
      },
      {
        "Argument": "Port",
        "Type": "Numeric value",
        "Description": "The port to be used for this connection"
      },
      {
        "Argument": "Attach to running session",
        "Type": "Boolean value",
        "Description": "Specifies whether to attach to a currently open/running terminal session"
      }
    ],
    "Variables produced": [
      {
        "Argument": "TerminalSession",
        "Type": "Terminal session",
        "Description": "The specific terminal session for use with later terminal emulation commands"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Error communicating with the emulator",
        "Description": "Indicates a problem connecting to the emulator"
      },
      {
        "Exception": "Profile error",
        "Description": "Profile error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Terminal emulation",
    "action": "Close terminal session",
    "description": "Close an open terminal session.",
    "Input parameters": [
      {
        "Argument": "Terminal session to close",
        "Type": "Terminal session",
        "Description": "The previously opened terminal session"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Error communicating with the emulator",
        "Description": "Indicates a problem connecting to the emulator"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Terminal emulation",
    "action": "Move cursor on terminal session",
    "description": "Move the terminal's cursor on the specified position.",
    "Input parameters": [
      {
        "Argument": "Terminal session",
        "Type": "Terminal session",
        "Description": "The terminal session to work with"
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The vertical position of the cursor on the screen"
      },
      {
        "Argument": "Column",
        "Type": "Numeric value",
        "Description": "The horizontal position of the cursor on the screen"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Screen position out of bounds",
        "Description": "Indicates that the screen position is out of bounds"
      },
      {
        "Exception": "Position commands aren't supported by the emulator",
        "Description": "Indicates that position commands used aren't supported by the emulator"
      },
      {
        "Exception": "Operation is unavailable for this session type",
        "Description": "Indicates that the operation is unavailable for this session type"
      },
      {
        "Exception": "Error communicating with the emulator",
        "Description": "Indicates a problem connecting to the emulator"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Terminal emulation",
    "action": "Get text from terminal session",
    "description": "Get text from a terminal session.",
    "Input parameters": [
      {
        "Argument": "Terminal session",
        "Type": "Terminal session",
        "Description": "The terminal session to work with"
      },
      {
        "Argument": "Get text from",
        "Type": "Field, Entire screen, Cursor position, Specific position",
        "Description": "The location to get the text from"
      },
      {
        "Argument": "Get field by",
        "Type": "Label, Index, Position",
        "Description": "Specifies how to look for the field"
      },
      {
        "Argument": "Label",
        "Type": "Text value",
        "Description": "The label of the field to look for"
      },
      {
        "Argument": "Index",
        "Type": "Numeric value",
        "Description": "The index of the field to look for"
      },
      {
        "Argument": "Text length",
        "Type": "Numeric value",
        "Description": "The length of the text to receive"
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The vertical position of the field on the screen"
      },
      {
        "Argument": "Column",
        "Type": "Numeric value",
        "Description": "The horizontal position of the field on the screen"
      }
    ],
    "Variables produced": [
      {
        "Argument": "TerminalText",
        "Type": "Text value",
        "Description": "The text retrieved from the terminal session"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Error communicating with the emulator",
        "Description": "Indicates a problem connecting to the emulator"
      },
      {
        "Exception": "Field index out of bounds",
        "Description": "Indicates that the field index is out of bounds"
      },
      {
        "Exception": "Field label not found",
        "Description": "Indicates that the field label doesn't exist"
      },
      {
        "Exception": "Screen position out of bounds",
        "Description": "Indicates that the screen position is out of bounds"
      },
      {
        "Exception": "No field found at the given position",
        "Description": "Indicates that no field exists at the given position"
      },
      {
        "Exception": "Terminal screen is unformatted",
        "Description": "Indicates that the terminal screen is unformatted"
      },
      {
        "Exception": "Position commands aren't supported by the emulator",
        "Description": "Indicates that position commands used aren't supported by the emulator"
      },
      {
        "Exception": "Operation is unavailable for this session type",
        "Description": "Indicates that the operation is unavailable for this session type"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Terminal emulation",
    "action": "Set text on terminal session",
    "description": "Set text on a terminal session.",
    "Input parameters": [
      {
        "Argument": "Terminal session",
        "Type": "Terminal session",
        "Description": "The terminal session to work with"
      },
      {
        "Argument": "Text",
        "Type": "Direct encrypted input or Text value",
        "Description": "The text to set on the specified location"
      },
      {
        "Argument": "Set text",
        "Type": "Cursor position, Field",
        "Description": "The location to set the text to"
      },
      {
        "Argument": "Get field by",
        "Type": "Label, Index, Position",
        "Description": "Specifies the way by which to look for the field"
      },
      {
        "Argument": "Label",
        "Type": "Text value",
        "Description": "The label of the field to look for"
      },
      {
        "Argument": "Index",
        "Type": "Numeric value",
        "Description": "The index of the field on the screen"
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The vertical position of the field on the screen"
      },
      {
        "Argument": "Column",
        "Type": "Numeric value",
        "Description": "The horizontal position of the field on the screen"
      },
      {
        "Argument": "Treat @ character as literal",
        "Type": "Boolean value",
        "Description": "Check this box to send the '@' character literally. Leave this option disabled to sent it as a special character"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Error communicating with the emulator",
        "Description": "Indicates a problem connecting to the emulator"
      },
      {
        "Exception": "Field index out of bounds",
        "Description": "Indicates that the field index is out of bounds"
      },
      {
        "Exception": "Field label not found",
        "Description": "Indicates that the field label doesn't exist"
      },
      {
        "Exception": "Screen position out of bounds",
        "Description": "Indicates that the screen position is out of bounds"
      },
      {
        "Exception": "No field found at the given position",
        "Description": "Indicates that no field exists at the given position"
      },
      {
        "Exception": "Terminal screen is unformatted",
        "Description": "Indicates that the terminal screen is unformatted"
      },
      {
        "Exception": "Position commands aren't supported by the emulator",
        "Description": "Indicates that position commands used aren't supported by the emulator"
      },
      {
        "Exception": "Operation is unavailable for this session type",
        "Description": "Indicates that the operation is unavailable for this session type"
      },
      {
        "Exception": "Input text was rejected",
        "Description": "Indicates that the input text was rejected"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Terminal emulation",
    "action": "Send key to terminal session",
    "description": "Send a control key to a terminal session.",
    "Input parameters": [
      {
        "Argument": "Terminal session",
        "Type": "Terminal session",
        "Description": "The terminal session to work with"
      },
      {
        "Argument": "Control key",
        "Type": "Transmit, Alt cursor, Attention, Backspace, Back tab, Block toggle, Break, Cancel, Center, Clear, Clear comm, Clear display, Clear line, Clear page, Clear partition, Comma, Command line, Command window, Compose, Ctrl+F1, Ctrl+F2, Ctrl+F3, Ctrl+F4, Ctrl+F5, Ctrl+F6, Ctrl+F7, Ctrl+F8, Ctrl+F9, Ctrl+F10, Ctrl+F11, Ctrl+F12, Ctrl+Shift+F1, Ctrl+Shift+F2, Ctrl+Shift+F3, Ctrl+Shift+F4, Ctrl+Shift+F5, Ctrl+Shift+F6, Ctrl+Shift+F7, Ctrl+Shift+F8, Ctrl+Shift+F9, Ctrl+Shift+F10, Ctrl+Shift+F11, Ctrl+Shift+F12, Cursor blink, Cursor select, Decimal, Delete, Delete char, Delete line, Delete word, Destructive back space, Disconnect, Do, Down, Down double, Dup, Duplicate, Edit script, Key end, End of field, Erase EOF, Erase EOL, Erase EOP, Erase input, Escape, ExtGr, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29, F30, F31, F32, F33, F34, F35, F36, F37, F38, F39, F40, F41, F42, F43, F44, F45, F46, F47, F48, Field delimiter, Field exit, Field mark, Field minus, Field plus, Find, Hard reset, Help, Hex, Hex 00, Hex 01, Hex 02, Hex 03, Hex 04, Hex 05, Hex 06, Hex 07, Hex 08, Hex 09, Hex 0A, Hex 0B, Hex 0C, Hex 0D, Hex 0E, Hex 0F, Hex 10, Hex 11, Hex 12, Hex 13, Hex 14, Hex 15, Hex 16, Hex 17, Hex 18, Hex 19, Hex 1A, Hex 1B, Hex 1C, Hex 1D, Hex 1E, Hex 1F, Hex 7F, Hold, Hold clear, Hold set, Home, Home down, Home up, Insert, Insert char, Insert here, Insert line, Insert mode, Invalid key, KeyPad0, KeyPad1, KeyPad2, KeyPad3, KeyPad4, KeyPad5, KeyPad6, KeyPad7, KeyPad8, KeyPad9, Left, Left double, Line feed, Minus, Monitor toggle, New line, Next page, Next screen, Next word, Nul, NumLock, PA1, PA2, PA3, Page, Page down, Page up, Pan left, Pan right, Partition jump, PF1, PF2, PF3, PF4, Plus Cr, Previous word, PrevPage, PrevScreen, Print, Print line, Print Msg, Prent screen, Remove, Replace, Reset, Return, Reserve field, Right, Right double, Roll down, Roll up, Rile line, Run script, Scroll down, Scroll left, Scroll right, Scroll up, Select, Send, Send answer back, Send delete, Send line, Send Msg, Shift+Backspace, Shift+Delete, Shift+Down, Shift+F1, Shift+F2, Shift+F3, Shift+F4, Shift+F5, Shift+F6, Shift+F7, Shift+F8, Shift+F9, Shift+F10, Shift+F11, Shift+F12, Shift+F13, Shift+F14, Shift+F15, Shift F16, Shift+F17, Shift+F18, Shift+F19, Shift+F20, Shift+Home, Shift+Insert, Shift+Left, Shift+Print screen, Shift+Right, Shift+Up, Soft reset, System request, Tab, Tek zoom, Term next page, Term prev page, Test, Text assist begin bold, Text assist begin of line, Text assist begin underline, Text assist bottom of page, Text assist carrier return, Text assist center, Text assist end bold, Text assist end of line, Text assist half index down, Text assist half index up, Text assist insert symbols, Text assist next stop, Text assist next text column, Text assist page end, Text assist required space, Text assist required tab, Text assist stop, Text assist text tab advance, Text assist top of page, Text assist word underline, Trace Toggle, Udk 10, Udk 6, Udk 7, Udk 8, Udk 9, Udk 11, Udk 12, Udk 13, Udk 14, Udk 15, Udk 16, Udk 17, Udk 18, Udk 19, Udk 20, Up, Up double",
        "Description": "The key to submit to the session"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Error communicating with the emulator",
        "Description": "Indicates a problem connecting to the emulator"
      },
      {
        "Exception": "Key not supported",
        "Description": "Indicates that the key isn't supported"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Terminal emulation",
    "action": "Wait for text on terminal session",
    "description": "Wait for a specific text to appear on a terminal session.",
    "Input parameters": [
      {
        "Argument": "Terminal session",
        "Type": "Terminal session",
        "Description": "The previously opened terminal session"
      },
      {
        "Argument": "Text to wait for",
        "Type": "Text value",
        "Description": "The text or regular expression to wait to appear on the terminal screen or on a specified field"
      },
      {
        "Argument": "Regular expression",
        "Type": "Boolean value",
        "Description": "Specifies whether to wait for a regular expression instead of plain text"
      },
      {
        "Argument": "Wait for text location",
        "Type": "Screen, Field",
        "Description": "The location to wait for the text to appear on"
      },
      {
        "Argument": "Get field by",
        "Type": "Label, Index, Position",
        "Description": "Specifies the way by which to look for the field"
      },
      {
        "Argument": "Label",
        "Type": "Text value",
        "Description": "The label of the field to look for"
      },
      {
        "Argument": "Index",
        "Type": "Numeric value",
        "Description": "The index of the field to look for"
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The vertical position of the field on the screen"
      },
      {
        "Argument": "Column",
        "Type": "Numeric value",
        "Description": "The horizontal position of the field on the screen"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The maximum amount of time to wait"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Error communicating with the emulator",
        "Description": "Indicates a problem connecting to the emulator"
      },
      {
        "Exception": "Field index out of bounds",
        "Description": "Indicates that the field index is out of bounds"
      },
      {
        "Exception": "Field label not found",
        "Description": "Indicates that the field label doesn't exist"
      },
      {
        "Exception": "Screen position out of bounds",
        "Description": "Indicates that the screen position is out of bounds"
      },
      {
        "Exception": "No field found at the given position",
        "Description": "Indicates that no field exists at the given position"
      },
      {
        "Exception": "Terminal screen is unformatted",
        "Description": "Indicates that the terminal screen is unformatted"
      },
      {
        "Exception": "Position commands aren't supported by the emulator",
        "Description": "Indicates that position commands used aren't supported by the emulator"
      },
      {
        "Exception": "Operation is unavailable for this session type",
        "Description": "Indicates that the operation is unavailable for this session type"
      },
      {
        "Exception": "Timeout expired",
        "Description": "Indicates that the timeout has been expired"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Terminal emulation",
    "action": "Search for text on terminal session",
    "description": "Search for all occurrences of a specific text on a terminal session",
    "Input parameters": [
      {
        "Argument": "Terminal session",
        "Type": "Terminal session",
        "Description": "The previously opened terminal session"
      },
      {
        "Argument": "Text to search for",
        "Type": "Text value",
        "Description": "The text or regular expression to search for on the terminal screen"
      },
      {
        "Argument": "Regular expression",
        "Type": "Boolean value",
        "Description": "Specifies whether to search for a regular expression instead of plain text"
      },
      {
        "Argument": "Column size",
        "Type": "Numeric value",
        "Description": "The number of the columns on the terminal screen"
      }
    ],
    "Variables produced": [
      {
        "Argument": "FindResults",
        "Type": "Datatable",
        "Description": "The search results retrieved from the terminal session screen"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Error communicating with the emulator",
        "Description": "Indicates a problem connecting to the emulator"
      },
      {
        "Exception": "Text not found",
        "Description": "Indicates that the text searching for was not found"
      },
      {
        "Exception": "Invalid regex expression",
        "Description": "Indicates that the Regular Expression used is invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Clipboard",
    "action": "Get clipboard text",
    "description": "Gets clipboard text.",
    "Input parameters": [],
    "Variables produced": [
      {
        "Argument": "ClipboardText",
        "Type": "Text value",
        "Description": "The text stored in the clipboard"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't retrieve clipboard contents",
        "Description": "Indicates a problem retrieving clipboard contents"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Clipboard",
    "action": "Set clipboard Text",
    "description": "Sets clipboard text.",
    "Input parameters": [
      {
        "Argument": "Clipboard text",
        "Type": "Text value",
        "Description": "The text to set to the clipboard"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't set clipboard contents",
        "Description": "Indicates a problem setting clipboard contents"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "If file exists",
    "description": "Marks the beginning of a conditional block of actions depending on whether a file exists or not.",
    "Input parameters": [
      {
        "Argument": "If file",
        "Type": "Exists, Doesn't exist",
        "Description": "The state of the file to check"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The full path to look for the file"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Wait for file",
    "description": "Suspend the execution of the automation until a file is created or deleted.",
    "Input parameters": [
      {
        "Argument": "Wait for file to be",
        "Type": "Created, Deleted",
        "Description": "Specifies whether to pause the flow on the creation or deletion of a certain file"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The full path to look for the file"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Copy file(s)",
    "description": "Copy one or more files into a destination folder.",
    "Input parameters": [
      {
        "Argument": "File(s) to copy",
        "Type": "List of Files",
        "Description": "The file(s) to copy. This value can be a file path, or a variable containing a file, a list of files, a text path, or a list of text paths. Use the 'Get files in folder' action to populate a variable with a list of files."
      },
      {
        "Argument": "Destination folder",
        "Type": "Folder",
        "Description": "The destination folder for the copied files"
      },
      {
        "Argument": "If file exists",
        "Type": "Do nothing, Overwrite",
        "Description": "Specifies what to do if a file with the same name already exists in the destination folder"
      }
    ],
    "Variables produced": [
      {
        "Argument": "CopiedFiles",
        "Type": "List of Files",
        "Description": "The copied file(s) as a list of files"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Source folder doesn't exist",
        "Description": "Indicates that the source folder doesn't exist"
      },
      {
        "Exception": "Destination folder doesn't exist",
        "Description": "Indicates that the destination folder doesn't exist"
      },
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Can't copy file",
        "Description": "Indicates a problem copying the file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Move file(s)",
    "description": "Move one or more files into a destination folder.",
    "Input parameters": [
      {
        "Argument": "File(s) to move",
        "Type": "List of Files",
        "Description": "The file(s) to move. This value can be a file path, or a variable containing a file, a list of files, a textual path, or a list of text paths. Use the 'Get files in folder' action to populate a variable with a list of files."
      },
      {
        "Argument": "Destination folder",
        "Type": "Folder",
        "Description": "The destination folder for the moved files"
      },
      {
        "Argument": "If file exists",
        "Type": "Do nothing, Overwrite",
        "Description": "Specifies what to do if a file with the same name already exists in the destination folder"
      }
    ],
    "Variables produced": [
      {
        "Argument": "MovedFiles",
        "Type": "List of Files",
        "Description": "The moved file(s) as a list of files"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Source folder doesn't exist",
        "Description": "Indicates that the source folder doesn't exist"
      },
      {
        "Exception": "Destination folder doesn't exist",
        "Description": "Indicates that the destination folder doesn't exist"
      },
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Can't move file",
        "Description": "Indicates a problem moving the file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Delete file(s)",
    "description": "Delete one or more files.",
    "Input parameters": [
      {
        "Argument": "File(s) to delete",
        "Type": "List of Files",
        "Description": "The file(s) to delete. This value can be a file path, or a variable containing a file, a list of files, a text path, or a list of text paths. Use the 'Get files in folder' to populate a variable with a list of files"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "File path doesn't exist",
        "Description": "Indicates that the file path doesn't exist"
      },
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Can't delete file",
        "Description": "Indicates a problem deleting the file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Rename file(s)",
    "description": "Change the name of one or more files.",
    "Input parameters": [
      {
        "Argument": "File to rename",
        "Type": "List of Files",
        "Description": "The file(s) to rename. This value can be a file path, or a variable containing a file, a list of files, a text path, or a list of text paths. Use the 'Get files in folder' action to populate a variable with a list of files."
      },
      {
        "Argument": "Add number to",
        "Type": "Boolean value",
        "Description": "Specifies whether to add the number to the existing file name(s) or a new name"
      },
      {
        "Argument": "Rename scheme",
        "Type": "Set new name, Add text, Remove text, Replace text, Change extension, Add datetime, Make sequential",
        "Description": "Specifies how to rename the file(s)"
      },
      {
        "Argument": "New file name",
        "Type": "Text value",
        "Description": "The new name of the file(s)"
      },
      {
        "Argument": "New extension",
        "Type": "Text value",
        "Description": "The text to add as the new extension for the file(s)"
      },
      {
        "Argument": "New file name",
        "Type": "Text value",
        "Description": "The new name of the file(s)"
      },
      {
        "Argument": "Add number to",
        "Type": "After name, Before name",
        "Description": "Specifies whether to add the number before or after the original name(s) or a new base name"
      },
      {
        "Argument": "Text to add",
        "Type": "Text value",
        "Description": "The text to add to the original file name(s)"
      },
      {
        "Argument": "Text to remove",
        "Type": "Text value",
        "Description": "The text to remove from the original file name(s). This rename scheme searches each file name, and removes the entered text anywhere in the name, each time it occurs."
      },
      {
        "Argument": "Text to replace",
        "Type": "Text value",
        "Description": "The text to replace in the original file name(s). This rename scheme searches each file name, and replaces the entered text anywhere in the name, each time it occurs"
      },
      {
        "Argument": "Use custom datetime",
        "Type": "Boolean value",
        "Description": "Specifies whether to use a custom datetime"
      },
      {
        "Argument": "Datetime to add",
        "Type": "Current datetime, Creation time, Last accessed, Last modified",
        "Description": "Specifies what datetime value to add to the file name(s)"
      },
      {
        "Argument": "Keep extension",
        "Type": "Boolean value",
        "Description": "Specifies whether to include the previous extension with the file name(s). Disable this option to add the extension to the file(s) manually."
      },
      {
        "Argument": "Replace with",
        "Type": "Text value",
        "Description": "The text to replace the original text with"
      },
      {
        "Argument": "Start numbering at",
        "Type": "Numeric value",
        "Description": "The starting number value"
      },
      {
        "Argument": "Add text",
        "Type": "After name, Before name",
        "Description": "Specifies whether to add the text before or after the original name(s)"
      },
      {
        "Argument": "Custom datetime",
        "Type": "Datetime",
        "Description": "The datetime to add to the file name(s)"
      },
      {
        "Argument": "Increment by",
        "Type": "Numeric value",
        "Description": "The number to increment the starting value by"
      },
      {
        "Argument": "Add datetime",
        "Type": "After name, Before name",
        "Description": "Specifies whether to add the datetime before or after the original name(s)"
      },
      {
        "Argument": "Separator",
        "Type": "Nothing, Space, Dash, Period, Underscore",
        "Description": "Specifies what to use to separate the original file name and the number added, including the option to not use a separator"
      },
      {
        "Argument": "Separator",
        "Type": "Nothing, Space, Dash, Period, Underscore",
        "Description": "Specifies what to use to separate the original file name and the datetime value added, including the option to not use a separator"
      },
      {
        "Argument": "Use padding",
        "Type": "Boolean value",
        "Description": "Specifies whether to use padding"
      },
      {
        "Argument": "Datetime format",
        "Type": "Text value",
        "Description": "The format of the datetime value to add to the file name, such as MM/dd/yyyy for date, and hh:mm:sstt for time"
      },
      {
        "Argument": "Make each number at least",
        "Type": "Numeric value",
        "Description": "The minimum length for each number added"
      },
      {
        "Argument": "If file exists",
        "Type": "Do nothing, Overwrite",
        "Description": "Specifies what to do if a file with the same name already exists in the folder"
      }
    ],
    "Variables produced": [
      {
        "Argument": "RenamedFiles",
        "Type": "List of Files",
        "Description": "The renamed file(s) as a list of files"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Directory not found",
        "Description": "Indicates that the directory wasn't found"
      },
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Can't rename file",
        "Description": "Indicates a problem renaming the file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Read text from file",
    "description": "Read the contents of a text file.",
    "Input parameters": [
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The file to read"
      },
      {
        "Argument": "Store content as",
        "Type": "Single text value, List (each is a list item)",
        "Description": "Specifies how to store the text. Choose 'Single text value' to store the entire text as a single text value. Choose 'List' to store each line of the original text as a text item in a list."
      },
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Unicode (big-endian), UTF-8",
        "Description": "The encoding to read the specified text from the text file with."
      }
    ],
    "Variables produced": [
      {
        "Argument": "FileContents",
        "Type": "Text value",
        "Description": "The contents as a text"
      },
      {
        "Argument": "FileContents",
        "Type": "List of Text values",
        "Description": "The contents as a list of texts"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Directory not found",
        "Description": "Indicates that the directory wasn't found"
      },
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Failed to read from file",
        "Description": "Indicates a problem reading from the file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Write text to file",
    "description": "Write or appends text to a file.",
    "Input parameters": [
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The file to write the text. This value can be a file path, or a variable containing a file or a textual path."
      },
      {
        "Argument": "Text to write",
        "Type": "General value",
        "Description": "The text to write in the specified file"
      },
      {
        "Argument": "Append new line",
        "Type": "Boolean value",
        "Description": "Specifies whether to append a new line at the end of the overall text to write to the file"
      },
      {
        "Argument": "If file exists",
        "Type": "Overwrite existing content, Append content",
        "Description": "Specifies whether to overwrite the existing content, or to append to the end of the existing content. If the file doesn't exist, this action automatically creates it."
      },
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Unicode (big-endian), UTF-8, Unicode (without byte order mask), UTF-8 (without byte order mask)",
        "Description": "The encoding to use for the specified text to write into the text file"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to write text to file",
        "Description": "Indicates a problem writing to the file"
      },
      {
        "Exception": "Invalid directory for file",
        "Description": "Indicates that the directory is invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Read from CSV file",
    "description": "Read a CSV file into a data table.",
    "Input parameters": [
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The CSV file to read. This value can be a file path, or a variable containing a file or a textual path"
      },
      {
        "Argument": "Encoding",
        "Type": "UTF-8, Unicode, Unicode (big-endian), UTF-8 (No byte order mark), Unicode (no byte order mark), System default, ASCII",
        "Description": "The encoding to be used for reading the specified CSV file"
      },
      {
        "Argument": "Trim fields",
        "Type": "Boolean value",
        "Description": "Specifies whether to automatically trim off the leading and trailing whitespaces of the extracted cells"
      },
      {
        "Argument": "First line contains column names",
        "Type": "Boolean value",
        "Description": "Specifies whether to use the first row of the CSV resource to set the column names of the resulting data table variant. Enable this option to avoid reading the names as data into the table. Subsequent actions may access the data held by the data table using column names (instead of column numbers)."
      },
      {
        "Argument": "Columns separator",
        "Type": "Predefined, Custom, Fixed column widths",
        "Description": "Specifies whether to use a predefined columns separator, a custom one or fixed column widths"
      },
      {
        "Argument": "Separator",
        "Type": "System default, Comma, Semicolon, Tab",
        "Description": "The column-separator to parse the CSV file"
      },
      {
        "Argument": "Custom separator",
        "Type": "Text value",
        "Description": "The custom column-separator to use for parsing the CSV resource specified"
      },
      {
        "Argument": "Fixed column widths",
        "Type": "Text value",
        "Description": "The fixed column-widths to use for parsing the CSV resource specified. Separate the widths using commas, spaces, tabs or newlines."
      }
    ],
    "Variables produced": [
      {
        "Argument": "CSVTable",
        "Type": "Datatable",
        "Description": "The contents of the CSV file as a data table"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Read from CSV failed",
        "Description": "Indicates a problem reading from the CSV file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Write to CSV file",
    "description": "Write a data table, data row or list to a CSV file.",
    "Input parameters": [
      {
        "Argument": "Variable to write",
        "Type": "General value",
        "Description": "The data table, data row variable or list variable to write into the target CSV file"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The CSV file to export the variable to. This value can be a file path, or a variable containing a file or a textual path."
      },
      {
        "Argument": "Encoding",
        "Type": "UTF-8, Unicode, Unicode (big-endian), UTF-8 (No byte order mark), Unicode (no byte order mark), System default, ASCII",
        "Description": "The encoding to use for writing to the specified CSV file"
      },
      {
        "Argument": "Include column names",
        "Type": "Boolean value",
        "Description": "Specifies whether the column names of the variant specified should become the first row of the CSV file. This option takes effect if and only if the target CSV file either doesn't initially exist or exists but is otherwise empty of text."
      },
      {
        "Argument": "If file exists",
        "Type": "Overwrite existing content, Append content",
        "Description": "Specifies the desired behavior when the targeted CSV file already exists in the filesystem"
      },
      {
        "Argument": "Separator",
        "Type": "System default, Comma, Semicolon, Tab",
        "Description": "The column separator to use in the specified CSV file"
      },
      {
        "Argument": "Custom columns separator",
        "Type": "Text value",
        "Description": "The custom column separator to use in the CSV file"
      },
      {
        "Argument": "Use custom columns separator",
        "Type": "Boolean value",
        "Description": "Specifies whether to use a custom columns separator or a predefined one"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Write failed",
        "Description": "Indicates a problem writing to the CSV file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Get file path part",
    "description": "Retrieve one or more parts (directory, filename, extension, etc.) from a text that represents a file path.",
    "Input parameters": [
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The file path to use as the source"
      }
    ],
    "Variables produced": [
      {
        "Argument": "RootPath",
        "Type": "File",
        "Description": "The root path of the source file"
      },
      {
        "Argument": "Directory",
        "Type": "Folder",
        "Description": "The directory of the source file"
      },
      {
        "Argument": "FileName",
        "Type": "Text value",
        "Description": "The name of the source file"
      },
      {
        "Argument": "FileNameNoExtension",
        "Type": "Text value",
        "Description": "The file name (without the extension) of the source file"
      },
      {
        "Argument": "FileExtension",
        "Type": "Text value",
        "Description": "The extension (for example, .doc) of the source file"
      }
    ],
    "Exceptions": [
      {
        "Exception": "File path contains invalid characters",
        "Description": "Indicates that the file path doesn't exist"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Get temporary file",
    "description": "Create a uniquely named, empty temporary file on disk, and get the file object (which is a representation, and can access the file and all its information).",
    "Input parameters": [],
    "Variables produced": [
      {
        "Argument": "TempFile",
        "Type": "File",
        "Description": "The temporary file object"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to create temporary file",
        "Description": "Indicates a problem creating a temporary file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Convert file to Base64",
    "description": "Convert a file to Base64 encoded text.",
    "Input parameters": [
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The file path to read from"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Base64Text",
        "Type": "Text value",
        "Description": "The Base64 encoded text"
      }
    ],
    "Exceptions": [
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Can't convert file to Base64",
        "Description": "Indicates that the provided file can't be converted into Base64 encoded text"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Convert Base64 to file",
    "description": "Convert a Base64 encoded text to file.",
    "Input parameters": [
      {
        "Argument": "Base64 encoded text",
        "Type": "Text value",
        "Description": "The Base64 encoded text"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The file to write to"
      },
      {
        "Argument": "If file exists",
        "Type": "Do nothing, Overwrite",
        "Description": "Specifies what to do if a file with the same name already exists in the destination folder"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid directory for file",
        "Description": "Indicates that the directory is invalid"
      },
      {
        "Exception": "Can't convert Base64 to file",
        "Description": "Indicates that the provided Base64 encoded text can't be converted into a file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Convert file to binary data",
    "description": "Convert a file to binary data.",
    "Input parameters": [
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The file to read from"
      }
    ],
    "Variables produced": [
      {
        "Argument": "BinaryData",
        "Type": "Text value",
        "Description": "The binary data to write"
      }
    ],
    "Exceptions": [
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Can't convert file to binary data",
        "Description": "Indicates that the provided file can't be converted to binary data"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "File",
    "action": "Convert binary data to file",
    "description": "Convert binary data to file.",
    "Input parameters": [
      {
        "Argument": "Binary data",
        "Type": "Text value",
        "Description": "The binary data"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The file to write to"
      },
      {
        "Argument": "If file exists",
        "Type": "Do nothing, Overwrite",
        "Description": "Specifies what to do if a file with the same name already exists in the destination folder"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid directory for file",
        "Description": "Indicates that the directory is invalid"
      },
      {
        "Exception": "Can't convert binary file to file",
        "Description": "Indicates that the provided binary data can't be converted into a file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Block Input",
    "description": "Blocks user mouse and keyboard input, so that the flow can perform mouse and keyboard actions without interference from the user.",
    "Input parameters": [
      {
        "Argument": "Block it",
        "Type": "Boolean value",
        "Description": "Specify whether to block or unblock mouse and keyboard input"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't block/unblock user input in non interactive mode",
        "Description": "Indicates a problem blocking/unblocking input in non-interactive mode"
      },
      {
        "Exception": "Failed to block/unblock input",
        "Description": "Indicates a problem blocking/unblocking input"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Get mouse position",
    "description": "Retrieves the current position of the mouse cursor on the screen in pixel coordinates.",
    "Input parameters": [
      {
        "Argument": "Relative to",
        "Type": "Screen, Foreground window",
        "Description": "Specify whether to retrieve the mouse position in screen coordinates or relative to the top left corner of the active window"
      }
    ],
    "Variables produced": [
      {
        "Argument": "MousePosX",
        "Type": "Numeric value",
        "Description": "The horizontal (X) value of the mouse position"
      },
      {
        "Argument": "MousePosY",
        "Type": "Numeric value",
        "Description": "The vertical (Y) value of the mouse position"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't retrieve the mouse position in non interactive mode",
        "Description": "Indicates a problem retrieving the mouse cursor position in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Move mouse",
    "description": "Moves the mouse to a specific position.",
    "Input parameters": [
      {
        "Argument": "Position X",
        "Type": "Numeric value",
        "Description": "The horizontal (X) value of the position to send the mouse to"
      },
      {
        "Argument": "Position Y",
        "Type": "Numeric value",
        "Description": "The vertical (Y) value of the position to send the mouse to"
      },
      {
        "Argument": "Relative to",
        "Type": "Screen, Active window, Current mouse position",
        "Description": "Specify whether the new mouse position will be relative to the top left corner of the screen, the foremost window, or the current mouse position"
      },
      {
        "Argument": "Move mouse from previous position",
        "Type": "Instant, With animation (low speed), With animation (normal speed), With animation (high speed)",
        "Description": "Specify how to move the mouse"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't move mouse in non interactive mode",
        "Description": "Indicates a problem moving the mouse in non-interactive mode"
      },
      {
        "Exception": "Failed to move mouse",
        "Description": "Indicates a problem moving the mouse"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Move mouse to image",
    "description": "Moves the mouse over an image found on screen or on the foreground window.",
    "Input parameters": [
      {
        "Argument": "Image to move mouse to",
        "Type": "List of Images",
        "Description": "The list of Images to move the mouse to"
      },
      {
        "Argument": "Mouse movement style",
        "Type": "Instant, With animation (low speed), With animation (normal speed), With animation (high speed)",
        "Description": "Specify the style of movement in which the mouse will move from its previous position to the beginning of the recorded route (or to its final position)"
      },
      {
        "Argument": "Occurrence",
        "Type": "Numeric value",
        "Description": "The occurrence of the image found to move the mouse to"
      },
      {
        "Argument": "Send a click after moving mouse",
        "Type": "Boolean value",
        "Description": "Specify whether to send a click after the mouse is positioned over the image"
      },
      {
        "Argument": "Click type",
        "Type": "Left click, Right click, Double click, Middle click, Left button down, Left button up, Right button down, Right button up",
        "Description": "The mouse click to send to the image"
      },
      {
        "Argument": "Wait for image to appear",
        "Type": "Boolean value",
        "Description": "Choose whether you want the action to wait if the image isn't found on the screen or foreground window"
      },
      {
        "Argument": "Fail timeout",
        "Type": "Numeric value",
        "Description": "The fail timeout in seconds"
      },
      {
        "Argument": "Seconds before click",
        "Type": "Numeric value",
        "Description": "The number of seconds to wait before sending the click"
      },
      {
        "Argument": "Image matching algorithm",
        "Type": "Basic, Advanced",
        "Description": "Which image algorithm to use when searching for image"
      },
      {
        "Argument": "Mouse position relative to image",
        "Type": "top left corner, top center, top right corner, middle left part, center, middle right part, bottom left corner, bottom center, bottom right corner",
        "Description": "The section of the image the mouse will be moved to"
      },
      {
        "Argument": "Offset X",
        "Type": "Text value",
        "Description": "The pixels to offset the mouse from the position to the right"
      },
      {
        "Argument": "Offset Y",
        "Type": "Text value",
        "Description": "The pixels to offset the mouse from the position down"
      },
      {
        "Argument": "Tolerance",
        "Type": "Numeric value",
        "Description": "Specify how much the specified image can differ from the originally chosen image"
      },
      {
        "Argument": "Search for image on",
        "Type": "Entire screen, Foreground window only",
        "Description": "Specify whether to search for the specified Image in the foremost window only, or the entire visible screen. Neither choice will find the image if it isn't clearly visible on the screen"
      },
      {
        "Argument": "Search mode",
        "Type": "Search whole screen or foreground window, Search on specified subregion of screen or foreground window",
        "Description": "Specify whether to scan the entire screen (or window) to find the supplied image or only a subregion of it"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The starting X of the subregion to search in"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The starting Y of the subregion to search in"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The ending X of the subregion to search in"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The ending Y of the subregion to search in"
      }
    ],
    "Variables produced": [
      {
        "Argument": "X",
        "Type": "Numeric value",
        "Description": "The X coordinate of the point where the image is found on the screen. If the image is being searched for on the foreground window, the coordinate returned is relative to the top left corner of the window"
      },
      {
        "Argument": "Y",
        "Type": "Numeric value",
        "Description": "The Y coordinate of the point where the image is found on the screen. If the image is being searched for on the foreground window, the coordinate returned is relative to the top left corner of the window"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Image not found on screen",
        "Description": "Indicates that the specified image wasn't found on the screen"
      },
      {
        "Exception": "Can't move mouse in non interactive mode",
        "Description": "Indicates a problem moving the mouse in non-interactive mode"
      },
      {
        "Exception": "Failed to move mouse",
        "Description": "Indicates a problem moving the mouse"
      },
      {
        "Exception": "Invalid subregion coordinates",
        "Description": "Indicates that the coordinates of the given subregion were invalid"
      },
      {
        "Exception": "Not enough Image occurrences found on screen",
        "Description": "Indicates that not enough occurrences of the specified Image were found on the screen"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Move mouse to text on screen (OCR)",
    "description": "Moves the mouse over a text found on the screen or on the foreground window using OCR.",
    "Input parameters": [
      {
        "Argument": "OCR engine type",
        "Type": "OCR engine variable, Tesseract engine",
        "Description": "The OCR engine type to use. Select a peconfigured OCR engine or set up a new one."
      },
      {
        "Argument": "OCR engine variable",
        "Type": "OCREngineObject",
        "Description": "The OCR engine to search for the text with"
      },
      {
        "Argument": "Text to find",
        "Type": "Text value",
        "Description": "The text to move the mouse over"
      },
      {
        "Argument": "Is regular expression",
        "Type": "Boolean value",
        "Description": "Whether to use a regular expression to look for the text on screen"
      },
      {
        "Argument": "Occurrence",
        "Type": "Numeric value",
        "Description": "A positive number that will be used as the occurrence of the input text on screen"
      },
      {
        "Argument": "Search for text on",
        "Type": "Entire screen, Foreground window only",
        "Description": "Whether to look for the specified text in the foremost window only or the entire visible screen. Neither choice will find the text if it isn't clearly visible on the screen"
      },
      {
        "Argument": "Search mode",
        "Type": "Whole of specified source, Specific subregion only, Subregion relative to image",
        "Description": "Whether to scan the entire screen (or window) to find the supplied text or only a narrows down subregion of it"
      },
      {
        "Argument": "Image(s)",
        "Type": "List of Images",
        "Description": "The image(s) specifying the subregion (relative to the top left corner of the image) to scan for the supplied text"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The start X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Tolerance",
        "Type": "Numeric value",
        "Description": "Specify how much the image(s) searched for can differ from the originally chosen image"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The start Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The start X coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The end X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The start Y coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The end Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The end X coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The end Y coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "Move mouse from previous position",
        "Type": "Instant, With animation (low speed), With animation (normal speed), With animation (high speed)",
        "Description": "The style of movement in which the mouse will move from its previous position to its final position"
      },
      {
        "Argument": "Windows OCR language",
        "Type": "Chinese (Simplified), Chinese (Traditional), Czech, Danish, Dutch, English, Finnish, French, German, Greek, Hungarian, Italian, Japanese, Korean, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian (Cyrillic), Serbian (Latin), Slovak, Spanish, Swedish, Turkish",
        "Description": "The language of the text that the Windows OCR engine detects"
      },
      {
        "Argument": "Use other language",
        "Type": "Boolean value",
        "Description": "Specifies whether to use a language not given in the 'Tesseract language' field"
      },
      {
        "Argument": "Tesseract language",
        "Type": "English, German, Spanish, French, Italian",
        "Description": "The language of the text that the Tesseract engine detects"
      },
      {
        "Argument": "Language abbreviation",
        "Type": "Text value",
        "Description": "The Tesseract abbreviation of the language to use. For example, if the data is 'eng.traineddata', set this parameter to 'eng'"
      },
      {
        "Argument": "Language data path",
        "Type": "Text value",
        "Description": "The path of the folder that holds the specified language's Tesseract data"
      },
      {
        "Argument": "Image width multiplier",
        "Type": "Numeric value",
        "Description": "The width multiplier of the image"
      },
      {
        "Argument": "Image height multiplier",
        "Type": "Numeric value",
        "Description": "The height multiplier of the image"
      },
      {
        "Argument": "Wait for text to appear",
        "Type": "Boolean value",
        "Description": "Specify whether to wait if the text isn't found on the screen or foreground window"
      },
      {
        "Argument": "Fail if text doesn't appear within",
        "Type": "Numeric value",
        "Description": "The number of seconds to wait for the supplied text to appear"
      },
      {
        "Argument": "Send a click after moving mouse",
        "Type": "Boolean value",
        "Description": "Specify whether to send a click after the mouse is positioned over the text"
      },
      {
        "Argument": "Click type",
        "Type": "Left click, Right click, Double click, Middle click, Left button down, Left button up, Right button down, Right button up",
        "Description": "The mouse click type to send to the text"
      },
      {
        "Argument": "Wait before clicking for",
        "Type": "Numeric value",
        "Description": "The number of seconds to wait before clicking"
      },
      {
        "Argument": "Mouse position relative to text",
        "Type": "Top left, Top center, Top right, Middle left, Middle center, Middle right, Bottom left, Bottom center, Bottom right",
        "Description": "Specify which section of the text the mouse will be moved to"
      },
      {
        "Argument": "Offset X",
        "Type": "Text value",
        "Description": "Offset the mouse from the position by this many pixels to the right"
      },
      {
        "Argument": "Offset Y",
        "Type": "Text value",
        "Description": "Offset the mouse from the position by this many pixels down"
      },
      {
        "Argument": "Image matching algorithm",
        "Type": "Basic, Advanced",
        "Description": "Which image algorithm to use when searching for image"
      }
    ],
    "Variables produced": [
      {
        "Argument": "LocationOfTextFoundX",
        "Type": "Numeric value",
        "Description": "The X coordinate of the point where the text is found on the screen. If the text is searched for in the foreground window, this coordinate is relative to the top left corner of the window"
      },
      {
        "Argument": "LocationOfTextFoundY",
        "Type": "Numeric value",
        "Description": "The Y coordinate of the point where the text is found on the screen. If the text is searched for in the foreground window, this coordinate is relative to the top left corner of the window"
      },
      {
        "Argument": "WidthOfTextFound",
        "Type": "Numeric value",
        "Description": "The width of the area the text was found on"
      },
      {
        "Argument": "HeightOfTextFound",
        "Type": "Numeric value",
        "Description": "The width of the area the text was found on"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Text not found on screen",
        "Description": "Indicates that the specified text couldn't be found on the screen"
      },
      {
        "Exception": "Can't move mouse in non interactive mode",
        "Description": "Indicates a problem moving the mouse in non-interactive mode"
      },
      {
        "Exception": "Failed to move mouse",
        "Description": "Indicates a problem moving the mouse"
      },
      {
        "Exception": "Invalid subregion coordinates",
        "Description": "Indicates that the coordinates of the given subregion were invalid"
      },
      {
        "Exception": "Failed to create the OCR engine",
        "Description": "Indicates an error occurred while trying to create the OCR engine"
      },
      {
        "Exception": "Data path folder doesn't exist",
        "Description": "Indicates that the folder specified for the language data doesn't exist"
      },
      {
        "Exception": "The selected Windows language pack isn't installed on the machine",
        "Description": "Indicates that the selected Windows language pack hasn't been installed on the machine"
      },
      {
        "Exception": "OCR engine isn't alive",
        "Description": "Indicates that the OCR engine isn't alive"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Send mouse click",
    "description": "Sends a mouse click event.",
    "Input parameters": [
      {
        "Argument": "Mouse event to send",
        "Type": "Left click, Right click, Double click, Middle click, Left button down, Left button up, Right button down, Right button up",
        "Description": "Specify what form of mouse event to send"
      },
      {
        "Argument": "Wait",
        "Type": "Numeric value",
        "Description": "The time to delay before sending the mouse event in 1/1000 of a second"
      },
      {
        "Argument": "Move mouse",
        "Type": "Boolean value",
        "Description": "Move mouse"
      },
      {
        "Argument": "X",
        "Type": "Numeric value",
        "Description": "The horizontal (X) position of the mouse in pixel coordinates"
      },
      {
        "Argument": "Y",
        "Type": "Numeric value",
        "Description": "The vertical (Y) position of the mouse in pixel coordinates"
      },
      {
        "Argument": "Relative to",
        "Type": "Screen, Active window, Current mouse position",
        "Description": "Specify whether the new mouse position will be relative to the top left corner of the screen, the foremost window, or the current mouse position"
      },
      {
        "Argument": "Mouse movement style",
        "Type": "Instant, With animation (low speed), With animation (normal speed), With animation (high speed)",
        "Description": "The style of movement in which the mouse will move from its previous position to the beginning of the recorded route (or to its final position)"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't send mouse click in non interactive mode",
        "Description": "Indicates a problem sending a mouse click in non-interactive mode"
      },
      {
        "Exception": "Mouse click out of screen bounds",
        "Description": "Indicates that the mouse click was out of the screen bounds"
      },
      {
        "Exception": "Failed to send mouse click",
        "Description": "Indicates a problem sending a mouse click"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Send keys",
    "description": "Sends keys to the application that is currently active.",
    "Input parameters": [
      {
        "Argument": "Send keys to",
        "Type": "Foreground window, By UI element, By window instance/handle, By title and/or class",
        "Description": "Specify whether to send the keys to the foreground window or to a UI element or to a window instance or a combination of window title/class"
      },
      {
        "Argument": "Text to send",
        "Type": "Direct encrypted input or Text value",
        "Description": "The text to send to the application"
      },
      {
        "Argument": "Delay between keystrokes",
        "Type": "Numeric value",
        "Description": "Specify the delay in milliseconds between sending keystrokes to avoid input errors"
      },
      {
        "Argument": "Send Text as hardware keys",
        "Type": "Boolean value",
        "Description": "Emulate the actual keystrokes on keyboard when sending whole Text"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't send keystrokes in non interactive mode",
        "Description": "Indicates a problem sending keystrokes in non-interactive mode"
      },
      {
        "Exception": "Text to send doesn't represent valid keystrokes",
        "Description": "Indicates that the text given doesn't represent valid keystrokes"
      },
      {
        "Exception": "There isn't an active application to send keystrokes to",
        "Description": "Indicates that there isn't an active application to send keystrokes to"
      },
      {
        "Exception": "Failed to send keystrokes",
        "Description": "Indicates a problem sending keystrokes"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Press/release key",
    "description": "Presses (and holds) or releases one or more modifier keys (Alt, Control, or Shift).",
    "Input parameters": [
      {
        "Argument": "Action to perform",
        "Type": "Press, Release",
        "Description": "Specify whether to press or release keys with this action"
      },
      {
        "Argument": "Control",
        "Type": "Boolean value",
        "Description": "Specify whether the Ctrl key will be pressed/released or not"
      },
      {
        "Argument": "Alt",
        "Type": "Boolean value",
        "Description": "Specify whether the Alt key will be pressed/released or not"
      },
      {
        "Argument": "Shift",
        "Type": "Boolean value",
        "Description": "Specify whether the Shift key will be pressed/released or not"
      },
      {
        "Argument": "Win",
        "Type": "Boolean value",
        "Description": "Specify whether the Windows key will be pressed/released or not"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't press or release key in non interactive mode",
        "Description": "Indicates a problem pressing or releasing the key in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Set key state",
    "description": "Sets the state (on or off) for the keys Caps Lock, Num Lock or Scroll Lock",
    "Input parameters": [
      {
        "Argument": "Key",
        "Type": "Caps Lock, Num Lock, Scroll Lock",
        "Description": "Specify the key to set"
      },
      {
        "Argument": "State",
        "Type": "Off, On",
        "Description": "Whether to set the key state to on or off"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't set key state in non interactive mode",
        "Description": "Indicates a problem setting the key state in non interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Wait for mouse",
    "description": "Suspends the execution of the flow until the mouse pointer changes, usually to or from the 'wait cursor' or hourglass.",
    "Input parameters": [
      {
        "Argument": "Wait for mouse pointer to",
        "Type": "Become, Become not",
        "Description": "Choose what action of the mouse cursor to wait for."
      },
      {
        "Argument": "Mouse pointer",
        "Type": "Arrow, App starting, Cross, Hand, Help, IBeam, Wait cursor",
        "Description": "Specify the mouse pointer state."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Get keyboard identifier",
    "description": "Retrieves the active keyboard identifier from the machine's registry.",
    "Input parameters": [],
    "Variables produced": [
      {
        "Argument": "KeyboardLayoutId",
        "Type": "Numeric value",
        "Description": "The registry key of the active keyboard identifier"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Keyboard identifier wasn’t found",
        "Description": "Indicates an error while retrieving the keyboard identifier"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Mouse and keyboard",
    "action": "Wait for shortcut key",
    "description": "Pause the flow run until a specific shortcut key is pressed. Shortcut keys must contain at least one key or a key and one of (ctrl, alt, shift). Multiple shortcut keys can be defined.",
    "Input parameters": [
      {
        "Argument": "Shortcut keys",
        "Type": "Keys combination",
        "Description": "Specify the shortcut keys to wait for. Shortcut keys must contain exactly one key or a key and a combination of (ctrl, alt, shift). To add more than one shortcut key, select 'New shortcut key'"
      },
      {
        "Argument": "Continue flow run on timeout",
        "Type": "Boolean value",
        "Description": "Specify whether the flow run will continue anyway when the set period of time waiting for the shortcut key expires"
      },
      {
        "Argument": "Continue after",
        "Type": "Numeric value",
        "Description": "The time in seconds before continuing the flow run"
      }
    ],
    "Variables produced": [
      {
        "Argument": "IndexOfShortcutKeyPressed",
        "Type": "Numeric value",
        "Description": "The index of the shortcut key if the shortcut keys are in a list format."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Shortcut key failed to register",
        "Description": "Indicates that a shortcut key failed to register."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Append line to text",
    "description": "Appends a new line of text to a text value.",
    "Input parameters": [
      {
        "Argument": "Original text",
        "Type": "Text value",
        "Description": "The original text"
      },
      {
        "Argument": "Line to append",
        "Type": "Text value",
        "Description": "The text to add on as a new line"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Result",
        "Type": "Text value",
        "Description": "The new text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Get subtext",
    "description": "Retrieve a subtext from a text value.",
    "Input parameters": [
      {
        "Argument": "Original text",
        "Type": "Text value",
        "Description": "The text to retrieve a section of text from"
      },
      {
        "Argument": "Start index",
        "Type": "Start of text, Character position",
        "Description": "Specify how to find the starting point for text retrieval"
      },
      {
        "Argument": "Character position",
        "Type": "Numeric value",
        "Description": "The position of the first character to retrieve. This value is a zero-based index, counting from zero for the first character"
      },
      {
        "Argument": "Length",
        "Type": "End of text, Number of chars",
        "Description": "Specify whether the subtext continues to the end of the text, or includes only a certain number of characters"
      },
      {
        "Argument": "Number of chars",
        "Type": "Numeric value",
        "Description": "The number of characters to retrieve"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Subtext",
        "Type": "Text value",
        "Description": "The retrieved subtext"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Start index or length are out of range",
        "Description": "Indicates that the start index or length are out of range"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Crop text",
    "description": "Retrieves a text value that occurs before, after or between the specified text flag(s) in a given text.",
    "Input parameters": [
      {
        "Argument": "Original text",
        "Type": "Text value",
        "Description": "The text to retrieve a section of text from"
      },
      {
        "Argument": "Mode",
        "Type": "Get text before the specified flag, Get text after the specified flag, Get text between the two specified flags",
        "Description": "Specify whether to retrieve the text before, after, or between flags."
      },
      {
        "Argument": "Start flag",
        "Type": "Text value",
        "Description": "The retrieved text will be after this flag. The flag can be any character or text"
      },
      {
        "Argument": "End flag",
        "Type": "Text value",
        "Description": "The retrieved text will be before this flag. The flag can be any character or text"
      },
      {
        "Argument": "Ignore case",
        "Type": "Boolean value",
        "Description": "Specify whether to find the flags using case-sensitive or case-insensitive matching"
      }
    ],
    "Variables produced": [
      {
        "Argument": "CroppedText",
        "Type": "Text value",
        "Description": "The new cropped text"
      },
      {
        "Argument": "IsFlagFound",
        "Type": "Boolean value",
        "Description": "Indicates if flag(s) found or not"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Pad text",
    "description": "Creates a fixed length text by adding characters to the left or to the right of an existing text.",
    "Input parameters": [
      {
        "Argument": "Text to pad",
        "Type": "Text value",
        "Description": "The text to lengthen"
      },
      {
        "Argument": "Pad",
        "Type": "Left, Right",
        "Description": "Specify whether to add characters to the left or right of the existing text"
      },
      {
        "Argument": "Text for padding",
        "Type": "Text value",
        "Description": "The character or text that will be added to lengthen the original text"
      },
      {
        "Argument": "Total length",
        "Type": "Numeric value",
        "Description": "The total character length of the final padded text. The text for padding will be repeatedly added until the final text is of the specified length"
      }
    ],
    "Variables produced": [
      {
        "Argument": "PaddedText",
        "Type": "Text value",
        "Description": "The new, padded text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Trim text",
    "description": "Removes all occurrences of white space characters (such as space, tab, or new line) from the beginning and/or end of an existing text.",
    "Input parameters": [
      {
        "Argument": "Text to trim",
        "Type": "Text value",
        "Description": "Text to trim"
      },
      {
        "Argument": "What to trim",
        "Type": "whitespace characters from the beginning, whitespace characters from the end, whitespace characters from the beginning and end",
        "Description": "Specify where white space characters will be removed from"
      }
    ],
    "Variables produced": [
      {
        "Argument": "TrimmedText",
        "Type": "Text value",
        "Description": "The new trimmed text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Reverse text",
    "description": "Reverses the order of letters in a text string.",
    "Input parameters": [
      {
        "Argument": "Text to reverse",
        "Type": "Text value",
        "Description": "The text to reverse"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ReversedText",
        "Type": "Text value",
        "Description": "The new reversed text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Change text case",
    "description": "Changes the casing of a text to uppercase, lowercase, title case or sentence case.",
    "Input parameters": [
      {
        "Argument": "Text to convert",
        "Type": "Text value",
        "Description": "The text to convert"
      },
      {
        "Argument": "Convert to",
        "Type": "Upper case, Lower case, Title case, Sentence case",
        "Description": "Specify the text case style to use"
      }
    ],
    "Variables produced": [
      {
        "Argument": "TextWithNewCase",
        "Type": "Text value",
        "Description": "The new converted text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Convert text to number",
    "description": "Converts a text representation of a number to a variable that contains a numeric value.",
    "Input parameters": [
      {
        "Argument": "Text to convert",
        "Type": "Text value",
        "Description": "A text variable containing only a number, to convert to a numeric value variable. Spaces are ignored, but non-number text throws an exception"
      }
    ],
    "Variables produced": [
      {
        "Argument": "TextAsNumber",
        "Type": "Numeric value",
        "Description": "The new numeric value"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Provided text value can't be converted into a valid number",
        "Description": "Indicates that the provided text value can't be converted into a valid number"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Convert number to text",
    "description": "Converts a number to text using a specified format.",
    "Input parameters": [
      {
        "Argument": "Number to convert",
        "Type": "Numeric value",
        "Description": "A numeric value to convert to text"
      },
      {
        "Argument": "Decimal places",
        "Type": "Numeric value",
        "Description": "The number of decimal places that will be included before truncation. Zeros can also be added to the end to pad the text in this way"
      },
      {
        "Argument": "Use thousands separator",
        "Type": "Boolean value",
        "Description": "Specify whether or not to use punctuation as a 1000 separator"
      }
    ],
    "Variables produced": [
      {
        "Argument": "FormattedNumber",
        "Type": "Text value",
        "Description": "The formatted number as text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Convert text to datetime",
    "description": "Converts a text representation of a date and/or time value to a datetime value.",
    "Input parameters": [
      {
        "Argument": "Text to convert",
        "Type": "Text value",
        "Description": "The text to convert to a datetime value. This text must be in a recognizably datetime value format"
      },
      {
        "Argument": "Date is represented in custom format",
        "Type": "Boolean value",
        "Description": "Specify whether the text to convert contains a representation of the date and time in a nonstandard, nonrecognizable format"
      },
      {
        "Argument": "Custom format",
        "Type": "Text value",
        "Description": "The format in which the date is stored in the text. A custom format can be expressed as, for example, yyyyMMdd for date and hhmmss for time"
      }
    ],
    "Variables produced": [
      {
        "Argument": "TextAsDateTime",
        "Type": "Datetime",
        "Description": "The datetime value"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Provided text value can't be converted into a valid datetime",
        "Description": "Indicates that the provided text value can't be converted into a valid datetime"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Convert datetime to text",
    "description": "Converts a datetime value to text using a specified custom format.",
    "Input parameters": [
      {
        "Argument": "Datetime to convert",
        "Type": "Datetime",
        "Description": "The datetime value to convert to text"
      },
      {
        "Argument": "Format to use",
        "Type": "Standard, Custom",
        "Description": "Specify whether to use a standard datetime format, or create a custom one"
      },
      {
        "Argument": "Custom Format",
        "Type": "Text value",
        "Description": "The custom format to display the datetime value in. A datetime can be expressed as, for example, MM/dd/yyyy for date and hh:mm:sstt for time"
      },
      {
        "Argument": "Standard format",
        "Type": "Short date, Long date, Short time, Long time, Full datetime (short time), Full datetime (long time), General datetime (short time), General datetime (long time), Sortable datetime",
        "Description": "The standard datetime format the action uses to display the datetime value"
      }
    ],
    "Variables produced": [
      {
        "Argument": "FormattedDateTime",
        "Type": "Text value",
        "Description": "The formatted datetime as a text value"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Create random text",
    "description": "Generates a text of specified length consisting of random characters. This action can be useful for generating passwords.",
    "Input parameters": [
      {
        "Argument": "Use uppercase letters (A-Z)",
        "Type": "Boolean value",
        "Description": "Specify whether uppercase characters will be included in the generated text"
      },
      {
        "Argument": "Use lowercase letters (a-z)",
        "Type": "Boolean value",
        "Description": "Specify whether lowercase characters will be included in the generated text"
      },
      {
        "Argument": "Use digits (0-9)",
        "Type": "Boolean value",
        "Description": "Specify whether digits will be included in the generated text"
      },
      {
        "Argument": "Use symbols ( , . < > ? ! + - _ # $ ^ )",
        "Type": "Boolean value",
        "Description": "Specify whether symbols will be included in the generated text"
      },
      {
        "Argument": "Minimum length",
        "Type": "Numeric value",
        "Description": "The minimum length of the random text. For a certain length of text, set the minimum and maximum values to that number"
      },
      {
        "Argument": "Maximum length",
        "Type": "Numeric value",
        "Description": "The maximum length of the random text. For a certain length of text, set the minimum and maximum values to that number"
      }
    ],
    "Variables produced": [
      {
        "Argument": "RandomText",
        "Type": "Text value",
        "Description": "The generated random text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Join text",
    "description": "Converts a list into a text value by separating its items with a specified delimiter.",
    "Input parameters": [
      {
        "Argument": "Specify the list to join",
        "Type": "List of Text values",
        "Description": "The list to convert to text"
      },
      {
        "Argument": "Delimiter to separate list items",
        "Type": "None, Standard, Custom",
        "Description": "Specify whether to use no delimiter, a standard delimiter or a custom one"
      },
      {
        "Argument": "Custom delimiter",
        "Type": "Text value",
        "Description": "The character(s) to use as delimiter"
      },
      {
        "Argument": "Standard delimiter",
        "Type": "Space, Tab, New line",
        "Description": "Specify the delimiter to use"
      },
      {
        "Argument": "Times",
        "Type": "Numeric value",
        "Description": "Specify how many times to use the specified delimiter"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JoinedText",
        "Type": "Text value",
        "Description": "The new delimited text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Split text",
    "description": "Creates a list containing the substrings of a text that are separated by a specified delimiter or a regular expression.",
    "Input parameters": [
      {
        "Argument": "The text to split",
        "Type": "Text value",
        "Description": "The text to split"
      },
      {
        "Argument": "Delimiter type",
        "Type": "Standard, Custom",
        "Description": "Whether the used delimiter is of a standard or custom format"
      },
      {
        "Argument": "Custom delimiter",
        "Type": "Text value",
        "Description": "The character(s) that were used as a delimiter"
      },
      {
        "Argument": "Standard delimiter",
        "Type": "Space, Tab, New line",
        "Description": "The delimiter used"
      },
      {
        "Argument": "Times",
        "Type": "Numeric value",
        "Description": "Specify how many times the delimiter is used"
      },
      {
        "Argument": "Is regular expression",
        "Type": "Boolean value",
        "Description": "Specify whether the delimiter will be a regular expression. A regular expression creates a range of possibilities for the delimiter. For example, '\\d' means that the delimiter could be any digit"
      }
    ],
    "Variables produced": [
      {
        "Argument": "TextList",
        "Type": "List of Text values",
        "Description": "The new list"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Provided regular expression is invalid",
        "Description": "Indicates that the provided regular expression is invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Parse text",
    "description": "Parses a text to find the first or all occurrences of a specified subtext or a regular expression pattern.",
    "Input parameters": [
      {
        "Argument": "Text to Parse",
        "Type": "Text value",
        "Description": "The text to parse"
      },
      {
        "Argument": "Text to Find",
        "Type": "Text value",
        "Description": "The subtext or a regular expression to search for"
      },
      {
        "Argument": "Is regular expression",
        "Type": "Boolean value",
        "Description": "Specify whether the subtext is a regular expression. For example \\d means that the subtext could be any digit"
      },
      {
        "Argument": "Start Parsing at Position",
        "Type": "Numeric value",
        "Description": "The position to start looking for the 'Text to Find'. The first position is zero, so use 0 to start from the beginning"
      },
      {
        "Argument": "First occurrence only",
        "Type": "Boolean value",
        "Description": "Specify whether to find the first occurrence only, or each occurrence of the 'Text to find'"
      },
      {
        "Argument": "Ignore case",
        "Type": "Boolean value",
        "Description": "Specify whether to find the specified text using case-sensitive or case-insensitive matching"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Position",
        "Type": "Numeric value",
        "Description": "The position of the 'Text to find' into the 'Text to parse'. If the text isn't found within the original text, this variable will hold the value -1"
      },
      {
        "Argument": "Positions",
        "Type": "List of Numeric values",
        "Description": "The positions of the 'Text to find' into the 'Text to parse'. If the text isn't found within the original text, this variable will hold the value -1"
      },
      {
        "Argument": "Match",
        "Type": "Text value",
        "Description": "The result that matches the given regular expression"
      },
      {
        "Argument": "Matches",
        "Type": "List of Text values",
        "Description": "The results that match the given regular expression"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Provided regular expression is invalid",
        "Description": "Indicates that the provided regular expression is invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Replace text",
    "description": "Replaces all occurrences of a specified subtext with another text. It can also be used with regular expressions.",
    "Input parameters": [
      {
        "Argument": "Text to parse",
        "Type": "Text value",
        "Description": "The text to parse"
      },
      {
        "Argument": "Text to find",
        "Type": "Text value",
        "Description": "The subtext or a regular expression to search for"
      },
      {
        "Argument": "Use regular expressions for find and replace",
        "Type": "Boolean value",
        "Description": "Specify whether the subtexts are regular expressions. A regular expression creates a range of possibilities for the subtext. For example, '\\d' means that the subtext could be any digit"
      },
      {
        "Argument": "Ignore case",
        "Type": "Boolean value",
        "Description": "Specify whether to find the subtext to replace using case-sensitive or case-insensitive matching"
      },
      {
        "Argument": "Replace with",
        "Type": "Text value",
        "Description": "The text or a regular expression to replace found text"
      },
      {
        "Argument": "Activate escape sequences",
        "Type": "Boolean value",
        "Description": "Specify whether to use special sequences. For example, '\\t' in the replacement text will be interpreted as a tab"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Replaced",
        "Type": "Text value",
        "Description": "The new updated text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Escape text for regular expression",
    "description": "Escapes a minimal set of characters (, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes.",
    "Input parameters": [
      {
        "Argument": "Text to escape",
        "Type": "Text value",
        "Description": "The text to escape"
      }
    ],
    "Variables produced": [
      {
        "Argument": "EscapedText",
        "Type": "Text value",
        "Description": "The escaped text"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Recognize entities in text",
    "description": "Recognizes entities in text, such as numbers, units, data/time and others expressed in natural language across multiple languages.",
    "Input parameters": [
      {
        "Argument": "Text to recognize from",
        "Type": "Text value",
        "Description": "The text to recognize entities from"
      },
      {
        "Argument": "Entity type",
        "Type": "Date time, Dimension, Temperature, Currency, Number range, Number, Ordinal, Percentage, Phone number, Email, IP address, Mention, Hashtag, URL, GUID, Quoted text",
        "Description": "The type of entity to recognize (, Date time, Email, URL etc.)"
      },
      {
        "Argument": "Language",
        "Type": "English, Chinese (Simplified), Spanish, Spanish (Mexico), Portuguese, French, German, Italian, Japanese, Dutch, Korean, Swedish, Turkish, Hindi",
        "Description": "Specify the language of the text"
      }
    ],
    "Variables produced": [
      {
        "Argument": "RecognizedEntities",
        "Type": "Datatable",
        "Description": "The recognized entities"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Text",
    "action": "Create HTML content",
    "description": "Generates rich HTML content and stores it in a variable.",
    "Input parameters": [],
    "Variables produced": [
      {
        "Argument": "HtmlContent",
        "Type": "Text value",
        "Description": "The HTML code"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "If safe stop requested",
    "description": "Checks whether safe stop is requested for the specific flow.",
    "Input parameters": [
      {
        "Argument": "Stop the flow",
        "Type": "Boolean value",
        "Description": "Indicates whether the flow's execution should be terminated after the completion of the specific block of actions or if the execution should continue. Note that if you choose to continue execution, you need to manually add a Stop Flow action to terminate the flow."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "Comment",
    "description": "User comment.",
    "Input parameters": [
      {
        "Argument": "Comment",
        "Type": "Text value",
        "Description": "User comment"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "Get last error",
    "description": "Retrieves the last error that occurred in the flow.",
    "Input parameters": [
      {
        "Argument": "Clear error",
        "Type": "Boolean value",
        "Description": "After the error is stored in the variable, it's cleared so that next time the error is retrieved, it won't retrieve the same error value"
      }
    ],
    "Variables produced": [
      {
        "Argument": "LastError",
        "Type": "Error",
        "Description": "The details of the error that last occurred in the flow"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "Go to",
    "description": "Transfers the flow of execution to another point, indicated by a label.",
    "Input parameters": [
      {
        "Argument": "Go to label",
        "Type": "Text value",
        "Description": "Label in the flow"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "Label",
    "description": "Acts as the destination of a 'go to' statement.",
    "Input parameters": [
      {
        "Argument": "Label name",
        "Type": "Text value",
        "Description": "Label in the program"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "On block error",
    "description": "Marks the beginning of a block to handle actions errors.",
    "Input parameters": [
      {
        "Argument": "Name",
        "Type": "Text value",
        "Description": "The name of the Exception Block for Visual purposes only."
      },
      {
        "Argument": "Retry policy",
        "Type": "None, Fixed, Exponential",
        "Description": "The rules based on which retries are performed. Delays are estimated in seconds."
      },
      {
        "Argument": "Capture unexpected logic errors",
        "Type": "Boolean value",
        "Description": "Expand the scope of error handling, also capturing logical errors in the flow, for example, dividing a number by zero or trying to access an item from an out of bounds position."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "Region",
    "description": "Marks the beginning of a group of actions.",
    "Input parameters": [
      {
        "Argument": "Name",
        "Type": "Text value",
        "Description": "The name of the region."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "Run subflow",
    "description": "Run a subflow specifying any required arguments.",
    "Input parameters": [
      {
        "Argument": "Subflow name",
        "Type": "Subflow",
        "Description": "The name of the subflow to call"
      },
      {
        "Argument": "Input as expression",
        "Type": "Boolean value",
        "Description": "Define whether the input should be handled as an expression. If enabled, variables and expressions can be used to dynamically determine the subflow during runtime."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "Stop flow",
    "description": "Terminates the flow.",
    "Input parameters": [
      {
        "Argument": "End flow",
        "Type": "Successfully, With error message",
        "Description": "Terminate the execution of the flow, either successfully or with an error"
      },
      {
        "Argument": "Error message",
        "Type": "Text value",
        "Description": "The error message to return to the flow caller upon exit"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Flow control",
    "action": "Wait",
    "description": "Suspends the execution of the flow for a specified number of seconds.",
    "Input parameters": [
      {
        "Argument": "Duration",
        "Type": "Numeric value",
        "Description": "Time duration in seconds"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "OCR",
    "action": "Use the Tesseract OCR engine",
    "description": "Apart from the Windows OCR engine, Power Automate supports the Tesseract engine. This engine can extract text in five languages without further configuration: English, German, Spanish, French, and Italian.",
    "Input parameters": [
      {
        "Argument": "If text",
        "Type": "Exists, Doesn't exist",
        "Description": "Specifies whether to check if the text exists or not on the given source to analyze"
      },
      {
        "Argument": "OCR engine type",
        "Type": "Windows OCR engine, Tesseract engine, OCR engine variable",
        "Description": "The OCR engine type to use. Select a preconfigured OCR engine or set up a new one."
      },
      {
        "Argument": "OCR engine variable",
        "Type": "OCREngineObject",
        "Description": "The engine to use for the OCR operation"
      },
      {
        "Argument": "Text to find",
        "Type": "Text value",
        "Description": "The text to search for in the specified source"
      },
      {
        "Argument": "Is regular expression",
        "Type": "Boolean value",
        "Description": "Specifies whether to use a regular expression to find the specified text"
      },
      {
        "Argument": "Search for text on",
        "Type": "Entire screen, Foreground window",
        "Description": "Specifies whether to search for the specified text on the entire visible screen or just the foreground window"
      },
      {
        "Argument": "Search mode",
        "Type": "Whole of specified source, Specific subregion only, Subregion relative to image",
        "Description": "Specifies whether to scan the entire screen (or window) or a narrowed down subregion of it"
      },
      {
        "Argument": "Image(s)",
        "Type": "List of Images",
        "Description": "The image(s) specifying the subregion (relative to the top left corner of the image) to scan for the supplied text"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The start X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Tolerance",
        "Type": "Numeric value",
        "Description": "Specifies how much the image(s) searched for can differ from the originally chosen image"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The start Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The start X coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The end X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The start Y coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The end Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The end X coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The end Y coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "Windows OCR language",
        "Type": "Chinese (Simplified), Chinese (Traditional), Czech, Danish, Dutch, English, Finnish, French, German, Greek, Hungarian, Italian, Japanese, Korean, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian (Cyrillic), Serbian (Latin), Slovak, Spanish, Swedish, Turkish",
        "Description": "The language of the text that the Windows OCR engine detects"
      },
      {
        "Argument": "Use other language",
        "Type": "Boolean value",
        "Description": "Specifies whether to use a language not given in the 'Tesseract language' field"
      },
      {
        "Argument": "Tesseract language",
        "Type": "English, German, Spanish, French, Italian",
        "Description": "The language of the text that the Tesseract engine detects"
      },
      {
        "Argument": "Language abbreviation",
        "Type": "Text value",
        "Description": "The Tesseract abbreviation of the language to use. For example, if the data is 'eng.traineddata', set this parameter to 'eng'"
      },
      {
        "Argument": "Language data path",
        "Type": "Text value",
        "Description": "The path of the folder that holds the specified language's Tesseract data"
      },
      {
        "Argument": "Image width multiplier",
        "Type": "Numeric value",
        "Description": "The width multiplier of the image"
      },
      {
        "Argument": "Image height multiplier",
        "Type": "Numeric value",
        "Description": "The height multiplier of the image"
      },
      {
        "Argument": "Image matching algorithm",
        "Type": "Basic, Advanced",
        "Description": "Which image algorithm to use when searching for image"
      }
    ],
    "Variables produced": [
      {
        "Argument": "LocationOfTextFoundX",
        "Type": "Numeric value",
        "Description": "The X coordinate of the point where the text appears on the screen. If the search is performed in the foreground window, the coordinate returned is relative to the top left corner of the window"
      },
      {
        "Argument": "LocationOfTextFoundY",
        "Type": "Numeric value",
        "Description": "The X coordinate of the point where the text appears on the screen. If the search is performed in the foreground window, the coordinate returned is relative to the top left corner of the window"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't check if text exists in non-interactive mode",
        "Description": "Indicates that it isn't possible to check for the text on the screen when in non-interactive mode"
      },
      {
        "Exception": "Invalid subregion coordinates",
        "Description": "Indicates that the specified subregion coordinates are invalid"
      },
      {
        "Exception": "Failed to analyze text with OCR",
        "Description": "Indicates an error occurred while trying to analyze the text using OCR"
      },
      {
        "Exception": "Failed to create the OCR engine",
        "Description": "Indicates an error occurred while trying to create the OCR engine"
      },
      {
        "Exception": "Data path folder doesn't exist",
        "Description": "Indicates that the folder specified for the language data doesn't exist"
      },
      {
        "Exception": "The selected Windows language pack isn't installed on the machine",
        "Description": "Indicates that the selected Windows language pack hasn't been installed on the machine"
      },
      {
        "Exception": "OCR engine not alive",
        "Description": "Indicates that the OCR engine isn't alive"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "OCR",
    "action": "Wait for text on screen (OCR)",
    "description": "Wait until a specific text appears/disappears on the screen, on the foreground window, or relative to an image on the screen or foreground window using OCR.",
    "Input parameters": [
      {
        "Argument": "Wait for text to",
        "Type": "Appear, Disappear",
        "Description": "Specifies whether to wait for the text to appear or disappear"
      },
      {
        "Argument": "OCR engine type",
        "Type": "Windows OCR engine, Tesseract engine, OCR engine variable",
        "Description": "The OCR engine type to use. Select a preconfigured OCR engine or set up a new one."
      },
      {
        "Argument": "OCR engine variable",
        "Type": "OCREngineObject",
        "Description": "The engine to use for the OCR operation"
      },
      {
        "Argument": "Text to find",
        "Type": "Text value",
        "Description": "The text to search for in the specified source"
      },
      {
        "Argument": "Is regular expression",
        "Type": "Boolean value",
        "Description": "Specifies whether to use a regular expression to find the specified text"
      },
      {
        "Argument": "Search for text on",
        "Type": "Entire screen, Foreground window",
        "Description": "Specifies whether to search for the specified text on the entire visible screen or just the foreground window"
      },
      {
        "Argument": "Search mode",
        "Type": "Whole of specified source, Specific subregion only, Subregion relative to image",
        "Description": "Specifies whether to scan the entire screen (or window) or a narrowed down subregion of it"
      },
      {
        "Argument": "Image(s)",
        "Type": "List of Images",
        "Description": "The image(s) specifying the subregion (relative to the top left corner of the image) to scan for the supplied text"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The start X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Tolerance",
        "Type": "Numeric value",
        "Description": "Specifies how much the image(s) searched for can differ from the originally chosen image"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The start Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The start X coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The end X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The start Y coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The end Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The end X coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The end Y coordinate of the subregion relative to the specified image to scan for the supplied text"
      },
      {
        "Argument": "Windows OCR language",
        "Type": "Chinese (Simplified), Chinese (Traditional), Czech, Danish, Dutch, English, Finnish, French, German, Greek, Hungarian, Italian, Japanese, Korean, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian (Cyrillic), Serbian (Latin), Slovak, Spanish, Swedish, Turkish",
        "Description": "The language of the text that the Windows OCR engine detects"
      },
      {
        "Argument": "Use other language",
        "Type": "Boolean value",
        "Description": "Specifies whether to use a language not given in the 'Tesseract language' field"
      },
      {
        "Argument": "Tesseract language",
        "Type": "English, German, Spanish, French, Italian",
        "Description": "The language of the text that the Tesseract engine detects"
      },
      {
        "Argument": "Language abbreviation",
        "Type": "Text value",
        "Description": "The Tesseract abbreviation of the language to use. For example, if the data is 'eng.traineddata', set this parameter to 'eng'"
      },
      {
        "Argument": "Language data path",
        "Type": "Text value",
        "Description": "The path of the folder that holds the specified language's Tesseract data"
      },
      {
        "Argument": "Image width multiplier",
        "Type": "Numeric value",
        "Description": "The width multiplier of the image"
      },
      {
        "Argument": "Image height multiplier",
        "Type": "Numeric value",
        "Description": "The height multiplier of the image"
      },
      {
        "Argument": "Image matching algorithm",
        "Type": "Basic, Advanced",
        "Description": "Which image algorithm to use when searching for image"
      },
      {
        "Argument": "Fail with timeout error",
        "Type": "Boolean value",
        "Description": "Specify whether you want the action to wait indefinitely or fail after a set time period"
      }
    ],
    "Variables produced": [
      {
        "Argument": "LocationOfTextFoundX",
        "Type": "Numeric value",
        "Description": "The X coordinate of the point where the text appears on the screen. If the search is performed in the foreground window, the coordinate returned is relative to the top left corner of the window"
      },
      {
        "Argument": "LocationOfTextFoundY",
        "Type": "Numeric value",
        "Description": "The X coordinate of the point where the text appears on the screen. If the search is performed in the foreground window, the coordinate returned is relative to the top left corner of the window"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't check if text exists in non-interactive mode",
        "Description": "Indicates that it isn't possible to check for the text on the screen when in non-interactive mode"
      },
      {
        "Exception": "Invalid subregion coordinates",
        "Description": "Indicates that the specified subregion coordinates are invalid"
      },
      {
        "Exception": "Failed to analyze text with OCR",
        "Description": "Indicates an error occurred while trying to analyze the text using OCR"
      },
      {
        "Exception": "Failed to create the OCR engine",
        "Description": "Indicates an error occurred while trying to create the OCR engine"
      },
      {
        "Exception": "Data path folder doesn't exist",
        "Description": "Indicates that the folder specified for the language data doesn't exist"
      },
      {
        "Exception": "The selected Windows language pack isn't installed on the machine",
        "Description": "Indicates that the selected Windows language pack hasn't been installed on the machine"
      },
      {
        "Exception": "OCR engine not alive",
        "Description": "Indicates that the OCR engine isn't alive"
      },
      {
        "Exception": "Timeout error",
        "Description": "Indicates that the action failed after a set time period"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "OCR",
    "action": "Extract text with OCR",
    "description": "Extract text from a given source using the given OCR engine.",
    "Input parameters": [
      {
        "Argument": "OCR engine",
        "Type": "Windows OCR engine, Tesseract engine, OCR engine variable",
        "Description": "The OCR engine type to use. Select a preconfigured OCR engine or set up a new one"
      },
      {
        "Argument": "OCR engine variable",
        "Type": "OCREngineObject",
        "Description": "The engine to use for the OCR operation"
      },
      {
        "Argument": "OCR source",
        "Type": "Screen, Foreground window, Image on disk",
        "Description": "The source of the image to perform the OCR operation on"
      },
      {
        "Argument": "Image file path",
        "Type": "File",
        "Description": "The path of the image to perform the OCR operation on"
      },
      {
        "Argument": "Search mode",
        "Type": "Whole of specified source, Specific subregion only, Subregion relative to image",
        "Description": "The selected mode for the OCR operation"
      },
      {
        "Argument": "Image",
        "Type": "List of Images",
        "Description": "The image to use for narrowing down the scan to a subregion that is relative to the specified image"
      },
      {
        "Argument": "Tolerance",
        "Type": "Numeric value",
        "Description": "Specifies how much the image can differ from the originally chosen image"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The start X coordinate of the subregion to narrow down the scan"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The end X coordinate of the subregion to narrow down the scan"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The start Y coordinate of the subregion to narrow down the scan"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The end Y coordinate of the subregion to narrow down the scan"
      },
      {
        "Argument": "Windows OCR language",
        "Type": "Chinese (Simplified), Chinese (Traditional), Czech, Danish, Dutch, English, Finnish, French, German, Greek, Hungarian, Italian, Japanese, Korean, Norwegian, Polish, Portuguese, Romanian, Russian, Serbian (Cyrillic), Serbian (Latin), Slovak, Spanish, Swedish, Turkish",
        "Description": "The language of the text that the Windows OCR engine detects"
      },
      {
        "Argument": "Use other language",
        "Type": "Boolean value",
        "Description": "Specifies whether to use a language not given in the 'Tesseract language' field"
      },
      {
        "Argument": "Tesseract language",
        "Type": "English, German, Spanish, French, Italian",
        "Description": "The language of the text that the Tesseract engine detects"
      },
      {
        "Argument": "Language abbreviation",
        "Type": "Text value",
        "Description": "The Tesseract abbreviation of the language to use. For example, if the data is 'eng.traineddata', set this parameter to 'eng'"
      },
      {
        "Argument": "Language data path",
        "Type": "Text value",
        "Description": "The path of the folder that holds the specified language's Tesseract data"
      },
      {
        "Argument": "Image width multiplier",
        "Type": "Numeric value",
        "Description": "The width multiplier of the image"
      },
      {
        "Argument": "Image height multiplier",
        "Type": "Numeric value",
        "Description": "The height multiplier of the image"
      },
      {
        "Argument": "Wait for image to appear",
        "Type": "Boolean value",
        "Description": "Specifies whether to wait or not for the image to appear on the screen or foreground window"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "Specifies the time to wait for the operation to complete before the action fails"
      },
      {
        "Argument": "Image matching algorithm",
        "Type": "Basic, Advanced",
        "Description": "Which image algorithm to use when searching for image"
      }
    ],
    "Variables produced": [
      {
        "Argument": "OcrText",
        "Type": "Text value",
        "Description": "The result after the text extraction"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to extract text with OCR",
        "Description": "Indicates an error occurred while trying to extract text with OCR from the given source"
      },
      {
        "Exception": "Image file not found",
        "Description": "Indicates that the file doesn't exist on the given path"
      },
      {
        "Exception": "Landmark image not found",
        "Description": "Indicates that the landmark image doesn't exist"
      },
      {
        "Exception": "Can't get text from screen in non-interactive mode",
        "Description": "Indicates that it isn't possible to get text from screen when in non-interactive mode"
      },
      {
        "Exception": "Failed to create the OCR engine",
        "Description": "Indicates an error occurred while trying to create the OCR engine"
      },
      {
        "Exception": "Data path folder doesn't exist",
        "Description": "Indicates that the folder specified for the language data doesn't exist"
      },
      {
        "Exception": "The selected Windows language pack isn't installed on the machine",
        "Description": "Indicates that the selected Windows language pack hasn't been installed on the machine"
      },
      {
        "Exception": "OCR engine not alive",
        "Description": "Indicates that the OCR engine isn't alive"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Get details of window",
    "description": "Gets a property of a window such as its title or its source text.",
    "Input parameters": [
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window to get details from"
      },
      {
        "Argument": "Window property",
        "Type": "Get window title, Get window text, Get window location and size, Get process name",
        "Description": "Choose which property of the window to extract"
      },
      {
        "Argument": "Bring to front",
        "Type": "Boolean value",
        "Description": "Specify whether the window containing the UI element will be brought to the front during execution. If this option is disabled, the action is executed in the background. Note that not all UI elements are compatible with having the option disabled. Additionally, if execution of the action requires scrolling, disabling this option might not extract all elements."
      }
    ],
    "Variables produced": [
      {
        "Argument": "WindowProperty",
        "Type": "General value",
        "Description": "The retrieved information of the window"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve property of window",
        "Description": "Indicates a problem retrieving the window property"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Get details of a UI element in window",
    "description": "Gets the value of a UI element's attribute in a window.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The UI element to get details from"
      },
      {
        "Argument": "Attribute name",
        "Type": "Text value",
        "Description": "The attribute whose value will be retrieved"
      },
      {
        "Argument": "Bring to front",
        "Type": "Boolean value",
        "Description": "Specify whether the window containing the UI element will be brought to the front during execution. If this option is disabled, the action is executed in the background. Note that not all UI elements are compatible with having the option disabled. Additionally, if execution of the action requires scrolling, disabling this option might not extract all elements."
      }
    ],
    "Variables produced": [
      {
        "Argument": "AttributeValue",
        "Type": "Text value",
        "Description": "The value of the UI element's text"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve attribute of UI element",
        "Description": "Indicates a problem retrieving the UI element's attribute"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Get selected checkboxes in window",
    "description": "Retrieves the names of the selected checkboxes in a checkbox group or the state of a specific checkbox.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The checkbox or checkbox group"
      },
      {
        "Argument": "Operation",
        "Type": "Get names of selected checkboxes in group, Get state of checkbox",
        "Description": "Specify whether to retrieve the state of multiple selected checkboxes or just one"
      },
      {
        "Argument": "Bring to front",
        "Type": "Boolean value",
        "Description": "Specify whether the window containing the UI element should be brought to the front during execution. If this option is disabled, the action will be executed in the background. Note that not all UI elements might be compatible with having the option disabled. Additionally, if execution of the action requires scrolling, disabling this option might not extract all elements."
      }
    ],
    "Variables produced": [
      {
        "Argument": "IsChecked",
        "Type": "Boolean value",
        "Description": "The state of the selected checkbox"
      },
      {
        "Argument": "SelectedCheckboxes",
        "Type": "List of Text values",
        "Description": "The names of selected checkboxes inside the specified checkbox group"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve checkbox state(s)",
        "Description": "Indicates a problem retrieving the specified checkbox state(s)"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Get selected radio button in window",
    "description": "Retrieves the names of the selected radio button in a radio button group or the state of a specific radio button.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The radio button or radio button group"
      },
      {
        "Argument": "Operation",
        "Type": "Get selected radio button name in group, Get state of radio button",
        "Description": "Specify whether to retrieve the name of the radio button that's selected inside a group of radio buttons or just the state of a single radio button"
      },
      {
        "Argument": "Bring to front",
        "Type": "Boolean value",
        "Description": "Specify whether the window containing the UI element will be brought to the front during execution. If this option is disabled, the action is executed in the background. Note that not all UI elements are compatible with having the option disabled. Additionally, if execution of the action requires scrolling, disabling this option might not extract all elements."
      }
    ],
    "Variables produced": [
      {
        "Argument": "IsSelected",
        "Type": "Boolean value",
        "Description": "The state of the selected radio button"
      },
      {
        "Argument": "SelectedRadiobutton",
        "Type": "Text value",
        "Description": "The selected radio button inside the specified radio group"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve radio button state",
        "Description": "Indicates a problem retrieving the specified radio button state"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Extract data from window",
    "description": "Extracts data from specific parts of a window in the form of single values, lists, or tables.",
    "Input parameters": [
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window to extract data from"
      },
      {
        "Argument": "Store extracted data in",
        "Type": "an Excel spreadsheet, A variable",
        "Description": "Specify where to store the extracted data"
      },
      {
        "Argument": "Bring to front",
        "Type": "Boolean value",
        "Description": "Specify whether the window containing the UI element will be brought to the front during execution. If this option is disabled, the action is executed in the background. Note that not all UI elements are compatible with having the option disabled. Additionally, if execution of the action requires scrolling, disabling this option might not extract all elements."
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExcelInstance",
        "Type": "Excel instance",
        "Description": "The Excel instance with the extracted data. Use this instance to manipulate the spreadsheet (or save and close it) by using the dedicated Excel actions."
      },
      {
        "Argument": "DataFromWindow",
        "Type": "General value",
        "Description": "The extracted data in the form of a datatable"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Extraction failed",
        "Description": "Indicates a problem extracting data from the specified window"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Extract data from table",
    "description": "Extracts data from a table in the form of a datatable.",
    "Input parameters": [
      {
        "Argument": "Table",
        "Type": "UI element",
        "Description": "The table or grid to extract data from"
      },
      {
        "Argument": "Store extracted data in",
        "Type": "an Excel spreadsheet, A variable",
        "Description": "Specify where to store the extracted data"
      },
      {
        "Argument": "Bring to front",
        "Type": "Boolean value",
        "Description": "Specify whether the window containing the UI element is brought to the front during execution. If this option is disabled, the action is executed in the background. Not all UI elements are compatible with having the option disabled. Additionally, if execution of the action requires scrolling, disabling this option might not extract all elements."
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExcelInstance",
        "Type": "Excel instance",
        "Description": "The Excel instance with the extracted data. Use this instance to manipulate the spreadsheet (or save and close it) by using the dedicated Excel actions."
      },
      {
        "Argument": "DataFromTable",
        "Type": "General value",
        "Description": "The extracted data in the form of a datatable"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Extraction failed",
        "Description": "Indicates a problem extracting data from the specified table"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Take screenshot of UI element",
    "description": "Takes a screenshot of a UI element in window.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The UI element in the window to capture as screenshot"
      },
      {
        "Argument": "Save mode",
        "Type": "Clipboard, File",
        "Description": "Specify whether to save the image into a file or store it into the clipboard"
      },
      {
        "Argument": "Image file path",
        "Type": "File",
        "Description": "Set the full path for the file to be saved"
      },
      {
        "Argument": "File format",
        "Type": "BMP, EMF, EXIF, GIF, JPG, PNG, TIFF, WMF",
        "Description": "The file format of the image file"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ImageFile",
        "Type": "File",
        "Description": "The file path of the generated screenshot image file"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to retrieve UI element",
        "Description": "Indicates a problem retrieving the UI element"
      },
      {
        "Exception": "Failed to save image",
        "Description": "Indicates a problem saving the taken screenshot"
      },
      {
        "Exception": "Failed to take screenshot of UI element",
        "Description": "Indicates a problem taking a screenshot of the UI element"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Focus text field in window",
    "description": "Sets the focus on a text box of a window and scrolls it into view.",
    "Input parameters": [
      {
        "Argument": "Text field",
        "Type": "UI element",
        "Description": "The text box to focus"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to set input focus in window text box",
        "Description": "Indicates a problem setting the focus on the specified web page text field"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Populate text field in window",
    "description": "Fills a text box in a window with the specified text.",
    "Input parameters": [
      {
        "Argument": "Text box",
        "Type": "UI element",
        "Description": "The text box to populate"
      },
      {
        "Argument": "Text to fill in",
        "Type": "Direct encrypted input or Text value",
        "Description": "The text to fill in the text field"
      },
      {
        "Argument": "Simulate action",
        "Type": "Boolean value",
        "Description": "Simulate the keystrokes programmatically when populating text to UI text field elements. This option doesn't require the UI element's screen to be focused, it will not automatically bring it to the foreground. Note this option can be applied only to left-click action and it might not be applicable to every UI element."
      },
      {
        "Argument": "If field isn't empty",
        "Type": "Replace text, Append text",
        "Description": "Specify whether to replace existing content, or to append."
      },
      {
        "Argument": "Click before populating",
        "Type": "Left-click, Double-click, No",
        "Description": "Specify whether a left mouse click is performed before populating the text field or not."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to write in textbox",
        "Description": "Indicates a problem populating the specified text field"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Press button in window",
    "description": "Presses a window button.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The button to press"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to press button",
        "Description": "Indicates a problem pressing the specified button"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Select radio button in window",
    "description": "Selects a radio button on a window.",
    "Input parameters": [
      {
        "Argument": "Radio button",
        "Type": "UI element",
        "Description": "The radio button to select"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to select radio button UI element",
        "Description": "Indicates a problem selecting the specified radio button UI element"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Set checkbox state in window",
    "description": "Checks or unchecks a checkbox in a window form.",
    "Input parameters": [
      {
        "Argument": "Checkbox",
        "Type": "UI element",
        "Description": "The checkbox to set the state of"
      },
      {
        "Argument": "Set checkbox state to",
        "Type": "Checked, Unchecked",
        "Description": "Specify whether the checkbox will become checked or unchecked"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to set checkbox state",
        "Description": "Indicates a problem setting the specified checkbox state"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Set drop-down list value in window",
    "description": "Sets or clears the selected options for a drop-down list in a window form.",
    "Input parameters": [
      {
        "Argument": "Drop-down list",
        "Type": "UI element",
        "Description": "The drop-down list whose value to set"
      },
      {
        "Argument": "Operation",
        "Type": "Clear selected options, Select options by name, Select options by index",
        "Description": "Specify whether you want to select a value by name or by ordinal position (1 2 3 ...) or clear the selected value of the drop-down list"
      },
      {
        "Argument": "Option names",
        "Type": "List of Text values",
        "Description": "Enter an option or a list of options to be selected in the drop-down list. Multiple options make sense only when working with multi-selection lists. If the list is single-selection, then only the first option of the list specified will be used."
      },
      {
        "Argument": "Use regular expressions",
        "Type": "Boolean value",
        "Description": "Specify whether the option names values to interpret as a regular expression"
      },
      {
        "Argument": "Options indices",
        "Type": "List of Numeric values",
        "Description": "Enter an index or a list of indices to be selected in the drop-down list. Multiple options make sense only when working with multi-selection lists. If the list is single-selection, then only the first option of the list specified will be used."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to select the specified options in the drop-down list",
        "Description": "Indicates a problem selecting the specified options in the drop-down list"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Get window",
    "description": "Gets a running window, for automating desktop applications.",
    "Input parameters": [
      {
        "Argument": "Get window",
        "Type": "Specific window, Foreground window",
        "Description": "Specify whether to look using a selector or the foreground window"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The selector of the window to get"
      },
      {
        "Argument": "Bring window to front",
        "Type": "Boolean value",
        "Description": "Specify whether to bring the window to the foreground automatically upon acquiring it"
      },
      {
        "Argument": "Fail if window isn't found",
        "Type": "Boolean value",
        "Description": "Specify whether to wait indefinitely for the window to appear or to fail if the window doesn't show up within a set time period"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The timeout to wait in seconds"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WindowTitle",
        "Type": "Text value",
        "Description": "The title of the foreground window"
      },
      {
        "Argument": "AutomationWindow",
        "Type": "Window instance",
        "Description": "The specific window instance for use with later UI Automation actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to get window",
        "Description": "Indicates a problem getting the window"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Focus window",
    "description": "Activates and brings to the foreground a specific window.",
    "Input parameters": [
      {
        "Argument": "Find window mode",
        "Type": "By window UI element, By window instance/handle, By title and/or class",
        "Description": "Specify whether to look for the window using a UI element or a combination of window title/class"
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window UI element"
      },
      {
        "Argument": "Window title",
        "Type": "Text value",
        "Description": "The window title. Wildcards can be used, like '?' or '*'."
      },
      {
        "Argument": "Window instance",
        "Type": "Numeric value",
        "Description": "The instance or handle of the window to focus"
      },
      {
        "Argument": "Window class",
        "Type": "Text value",
        "Description": "If there are two windows with the same title, window class might help differentiate between them. In this case, enter the class of the window to use."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Window wasn't found",
        "Description": "Indicates that the specified window wasn't found"
      },
      {
        "Exception": "Can't focus window",
        "Description": "Indicates a problem focusing the specified window"
      },
      {
        "Exception": "Can't perform window-related action in noninteractive mode",
        "Description": "Indicates a problem performing window-related action in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Set window state",
    "description": "Restores, maximizes or minimizes a specific window.",
    "Input parameters": [
      {
        "Argument": "Find window mode",
        "Type": "By window UI element, By window instance/handle, By title and/or class",
        "Description": "Specify whether to look for the window using a UI element or a combination of window title/class"
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window UI element"
      },
      {
        "Argument": "Window title",
        "Type": "Text value",
        "Description": "The window title. Wildcards can be used, like '?' or '*'."
      },
      {
        "Argument": "Window instance",
        "Type": "Numeric value",
        "Description": "The instance or handle of the window to set the state of"
      },
      {
        "Argument": "Window class",
        "Type": "Text value",
        "Description": "If there are two windows with the same title, window class might help differentiate between them. In this case, enter the class of the window to use."
      },
      {
        "Argument": "Window state",
        "Type": "Restored, Maximized, Minimized",
        "Description": "Choose in which state to display the window"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Window wasn't found",
        "Description": "Indicates that the specified window wasn't found"
      },
      {
        "Exception": "Can't set window state",
        "Description": "Indicates a problem setting the window state of the specified window"
      },
      {
        "Exception": "Can't perform window-related action in noninteractive mode",
        "Description": "Indicates a problem performing window-related action in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Set window visibility",
    "description": "Shows a hidden window or hides a visible window.",
    "Input parameters": [
      {
        "Argument": "Find window mode",
        "Type": "By window UI element, By window instance/handle, By title and/or class",
        "Description": "Specify whether to look for the window using a UI element or a combination of window title/class"
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window UI element"
      },
      {
        "Argument": "Window title",
        "Type": "Text value",
        "Description": "The window title. Wildcards can be used, like '?' or '*'."
      },
      {
        "Argument": "Window instance",
        "Type": "Numeric value",
        "Description": "The instance or handle of the window to set the visibility of"
      },
      {
        "Argument": "Window class",
        "Type": "Text value",
        "Description": "If there are two windows with the same title, window class might help differentiate between them. In this case, enter the class of the window to use."
      },
      {
        "Argument": "Visibility",
        "Type": "Visible, Hidden",
        "Description": "Choose in which state to set the window visibility to"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Window wasn't found",
        "Description": "Indicates that the specified window wasn't found"
      },
      {
        "Exception": "Can't set window visibility",
        "Description": "Indicates a problem setting the visibility of the specified window"
      },
      {
        "Exception": "Can't perform window-related action in noninteractive mode",
        "Description": "Indicates a problem performing window-related action in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Move window",
    "description": "Sets the position of a specific window.",
    "Input parameters": [
      {
        "Argument": "Find window mode",
        "Type": "By window UI element, By window instance/handle, By title and/or class",
        "Description": "Specify whether to look for the Window using a UI element or a combination of window title/class"
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window UI element"
      },
      {
        "Argument": "Window title",
        "Type": "Text value",
        "Description": "The window title. Wildcards can be used, like '?' or '*'."
      },
      {
        "Argument": "Window instance",
        "Type": "Numeric value",
        "Description": "The instance or handle of the window to move"
      },
      {
        "Argument": "Window class",
        "Type": "Text value",
        "Description": "If you have two windows with the same title, Window Class might help differentiate between them. In this case, enter the class of the window to use."
      },
      {
        "Argument": "Position X",
        "Type": "Numeric value",
        "Description": "The X position of the window"
      },
      {
        "Argument": "Position Y",
        "Type": "Numeric value",
        "Description": "The Y position of the window"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Window wasn't found",
        "Description": "Indicates that the specified window wasn't found"
      },
      {
        "Exception": "Can't move window",
        "Description": "Indicates a problem moving the specified window"
      },
      {
        "Exception": "Can't perform window-related action in noninteractive mode",
        "Description": "Indicates a problem performing window-related action in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Resize window",
    "description": "Sets the size of a specific window.",
    "Input parameters": [
      {
        "Argument": "Find window mode",
        "Type": "By window UI element, By window instance/handle, By title and/or class",
        "Description": "Specify whether to look for the window using a UI element or a combination of window title/class"
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window UI element"
      },
      {
        "Argument": "Window title",
        "Type": "Text value",
        "Description": "The window title. Wildcards can be used, like '?' or '*'."
      },
      {
        "Argument": "Window instance",
        "Type": "Numeric value",
        "Description": "The instance or handle of the window to resize"
      },
      {
        "Argument": "Window class",
        "Type": "Text value",
        "Description": "If there are two windows with the same title, window class might help differentiate between them. In this case, enter the class of the window to use"
      },
      {
        "Argument": "Width",
        "Type": "Numeric value",
        "Description": "The new width, in pixels"
      },
      {
        "Argument": "Height",
        "Type": "Numeric value",
        "Description": "The new height, in pixels"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Window wasn't found",
        "Description": "Indicates that the specified window wasn't found"
      },
      {
        "Exception": "Can't resize window",
        "Description": "Indicates a problem resizing the specified window"
      },
      {
        "Exception": "Can't perform window-related action in noninteractive mode",
        "Description": "Indicates a problem performing window-related action in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Close window",
    "description": "Closes a specific window.",
    "Input parameters": [
      {
        "Argument": "Find window mode",
        "Type": "By window UI element, By window instance/handle, By title and/or class",
        "Description": "Specify whether to look for the window using a UI element or a combination of window title/class"
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window UI element"
      },
      {
        "Argument": "Window title",
        "Type": "Text value",
        "Description": "The window title. Wildcards can be used, like '?' or '*'."
      },
      {
        "Argument": "Window instance",
        "Type": "Numeric value",
        "Description": "The instance or handle of the window to close"
      },
      {
        "Argument": "Window class",
        "Type": "Text value",
        "Description": "If there are two windows with the same title, window class might help differentiate between them. In this case, enter the class of the window to use."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Window wasn't found",
        "Description": "Indicates that the specified window wasn't found"
      },
      {
        "Exception": "Can't close window",
        "Description": "Indicates a problem closing the specified window"
      },
      {
        "Exception": "Can't perform window-related action in noninteractive mode",
        "Description": "Indicates a problem performing window-related action in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "If window contains",
    "description": "Marks the beginning of a conditional block of actions depending on whether a specific piece of text or UI element exists in a window.",
    "Input parameters": [
      {
        "Argument": "Check if window",
        "Type": "Contains UI element, Doesn't contain UI element, Contains text, Doesn't contain text",
        "Description": "Check whether a specific text or UI element exists in a window"
      },
      {
        "Argument": "Check UI element state",
        "Type": "Boolean value",
        "Description": "Check whether a specific UI element is enabled or disabled"
      },
      {
        "Argument": "Text",
        "Type": "Text value",
        "Description": "The text to check for"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The UI element to check for"
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window to check if the text exists on"
      },
      {
        "Argument": "State",
        "Type": "Enabled, Disabled",
        "Description": "The UI element state to check for"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Wait for window content",
    "description": "Suspends the execution of the automation until a specific piece of text or UI element appears or disappears from a Window.",
    "Input parameters": [
      {
        "Argument": "Wait until window",
        "Type": "Contains UI element, Doesn't contain UI element, Contains text, Doesn't contain text",
        "Description": "Whether to wait for a specific text or UI element to appear in a window"
      },
      {
        "Argument": "Check UI element state",
        "Type": "Boolean value",
        "Description": "Check whether a specific UI element is enabled or disabled"
      },
      {
        "Argument": "Text",
        "Type": "Text value",
        "Description": "The text to check for"
      },
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The UI element to check for"
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window to check if the text exists on"
      },
      {
        "Argument": "State",
        "Type": "Enabled, Disabled",
        "Description": "The UI element state to check for"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Wait for window content failed",
        "Description": "Indicates that the wait operation failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "If image",
    "description": "This action marks the beginning of a conditional block of actions depending on whether a selected image is found on the screen or not.",
    "Input parameters": [
      {
        "Argument": "If image",
        "Type": "exists, doesn't exist",
        "Description": "Whether to check for the existence or absence of the selected image"
      },
      {
        "Argument": "Image",
        "Type": "List of Images",
        "Description": "The image/s that the action will check if it/they exist"
      },
      {
        "Argument": "Search for image on",
        "Type": "Entire screen, Foreground window only",
        "Description": "Whether to look for the specified image in the foremost window only or the entire visible screen. Neither choice will find the image if it isn't clearly visible on the screen"
      },
      {
        "Argument": "Search mode",
        "Type": "Search whole screen or foreground window, Search on specified subregion of screen or foreground window",
        "Description": "Whether to scan the entire screen (or window) to find the supplied text or only a narrowed down subregion of it"
      },
      {
        "Argument": "Find all images in the list",
        "Type": "Boolean value",
        "Description": "Check whether all images on the list exist or don't exist"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The start X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The end X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The start Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The end Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Tolerance",
        "Type": "Numeric value",
        "Description": "Specify how much the image(s) searched for can differ from the originally chosen image"
      },
      {
        "Argument": "Image matching algorithm",
        "Type": "Basic, Advanced",
        "Description": "Which image algorithm to use when searching for image"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't check image in noninteractive mode",
        "Description": "Indicates that an image can't be identified in non-interactive mode"
      },
      {
        "Exception": "Invalid subregion coordinates",
        "Description": "Indicates that the coordinates of the given subregion were invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Use desktop",
    "description": "Performs desktop and taskbar related operations.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The UI element to perform a click on"
      },
      {
        "Argument": "Click type",
        "Type": "Left-click, Right-click, Double-click",
        "Description": "The kind of click to perform"
      },
      {
        "Argument": "Launch new application when left-clicking on the taskbar",
        "Type": "Boolean value",
        "Description": "When this parameter is set to 'true', it ensures that a new window of an application will be created when left-clicking on its icon in the 'quick launch' bar, also known as the taskbar of Windows 7 or above. Uncheck this option to bring an already running instance of the application to the foreground."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Taskbar operation failed",
        "Description": "Indicates that the taskbar operation failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Select tab in window",
    "description": "Selects a tab from a group of tabs.",
    "Input parameters": [
      {
        "Argument": "Tab",
        "Type": "UI element",
        "Description": "The tab to select"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Selecting tab failed",
        "Description": "Indicates a problem selecting the specified tab"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Wait for image",
    "description": "This action waits until a specific image appears on the screen or on the foreground window.",
    "Input parameters": [
      {
        "Argument": "Wait for image to",
        "Type": "Appear, Disappear",
        "Description": "Check whether to wait for the image(s) to appear or disappear"
      },
      {
        "Argument": "Image to wait for",
        "Type": "List of Images",
        "Description": "The image/s that the action will check if it/they exist"
      },
      {
        "Argument": "Search for image on",
        "Type": "Entire screen, Foreground window only",
        "Description": "Whether to look for the specified image in the foremost window only or the entire visible screen. Neither choice will find the image if it isn't clearly visible on the screen"
      },
      {
        "Argument": "Search mode",
        "Type": "Search whole screen or foreground window, Search on specified subregion of screen or foreground window",
        "Description": "Whether to scan the entire screen (or window) to find the supplied text or only a narrowed down subregion of it"
      },
      {
        "Argument": "Wait for all images",
        "Type": "Boolean value",
        "Description": "Whether to wait for all the images on the list to appear(disappear), or just one of them"
      },
      {
        "Argument": "X1",
        "Type": "Numeric value",
        "Description": "The start X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "X2",
        "Type": "Numeric value",
        "Description": "The end X coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Y1",
        "Type": "Numeric value",
        "Description": "The start Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Y2",
        "Type": "Numeric value",
        "Description": "The end Y coordinate of the subregion to scan for the supplied text"
      },
      {
        "Argument": "Tolerance",
        "Type": "Numeric value",
        "Description": "Specify how much the image(s) searched for can differ from the originally chosen image"
      },
      {
        "Argument": "Image matching algorithm",
        "Type": "Basic, Advanced",
        "Description": "Which image algorithm to use when searching for image"
      },
      {
        "Argument": "Fail with timeout error",
        "Type": "Boolean value",
        "Description": "Specify whether you want the action to wait indefinitely or fail after a set time period"
      }
    ],
    "Variables produced": [
      {
        "Argument": "X",
        "Type": "Numeric value",
        "Description": "The X coordinate of the point where the text was found on the screen. If the text has been search in the foreground window, this value is relative to the top left corner of the window."
      },
      {
        "Argument": "Y",
        "Type": "Numeric value",
        "Description": "The Y coordinate of the point where the text was found on the screen. If the text has been search in the foreground window, this value is relative to the top left corner of the window."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Wait for image failed",
        "Description": "Indicates that the wait operation failed"
      },
      {
        "Exception": "Can't check image in noninteractive mode",
        "Description": "Indicates that an image can't be identified in non-interactive mode"
      },
      {
        "Exception": "Invalid subregion coordinates",
        "Description": "Indicates that the coordinates of the given subregion were invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Hover mouse over UI element in window",
    "description": "Hover the mouse over any UI element on window.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "Select the UI element in window to hover"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to hover over element",
        "Description": "Indicates that the hover over the element failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Click UI element in window",
    "description": "Clicks on any UI element of a window.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The UI element to click on"
      },
      {
        "Argument": "Click type",
        "Type": "Left-click, Right-click, Double-click, Middle-click, Left button down, Left button up, Right button down, Right button up",
        "Description": "The kind of click to perform"
      },
      {
        "Argument": "Simulate action",
        "Type": "Boolean value",
        "Description": "Specify whether to simulate the move of the mouse cursor over the element prior to clicking. This option does not require the UI element's screen to be focused, it will not automatically bring it to the foreground. Note this option can be applied only to left-click action and it might not be applicable to every UI element."
      },
      {
        "Argument": "Mouse position relative to UI element",
        "Type": "Top left, Top center, Top right, Middle left, Middle center, Middle right, Bottom left, Bottom center, Bottom right",
        "Description": "Specify which section of the UI element the mouse will be moved to prior to clicking"
      },
      {
        "Argument": "Offset X",
        "Type": "Text value",
        "Description": "Offset the mouse from the position by this many pixels to the right"
      },
      {
        "Argument": "Offset Y",
        "Type": "Text value",
        "Description": "Offset the mouse from the position by this many pixels down"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Click failed",
        "Description": "Indicates that the click failed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Select menu option in window",
    "description": "Selects an option in a menu of a window.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The menu option to select"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to select option",
        "Description": "Indicates a problem selecting the specified menu option"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Drag and drop UI element in window",
    "description": "Drags and drops a UI element of a window.",
    "Input parameters": [
      {
        "Argument": "UI element to drag",
        "Type": "UI element",
        "Description": "The UI element to drag"
      },
      {
        "Argument": "UI element to drop over",
        "Type": "UI element",
        "Description": "The UI element to drop over"
      },
      {
        "Argument": "Click type",
        "Type": "Left-click, Right-click",
        "Description": "Specify which mouse button to use for clicking and holding down, while dragging the UI element over to its destination"
      },
      {
        "Argument": "Mouse down offset X",
        "Type": "Text value",
        "Description": "Offset the mouse-down click, that will be used to grab the UI element drag, by this many pixels to the right"
      },
      {
        "Argument": "Mouse down offset Y",
        "Type": "Text value",
        "Description": "Offset the mouse-down click, that will be used to grab the UI element to drag, by this many pixels downwards"
      },
      {
        "Argument": "Mouse down position relative to drag-target UI element",
        "Type": "Top left, Top center, Top right, Middle left, Middle center, Middle right, Bottom left, Bottom center, Bottom right",
        "Description": "Specify which section of the UI element to drop the mouse onto prior to clicking"
      },
      {
        "Argument": "Mouse up offset X",
        "Type": "Text value",
        "Description": "Offset the mouse-up click, that will be used to grab the UI element to drag, by this many pixels to the right"
      },
      {
        "Argument": "Mouse up offset Y",
        "Type": "Text value",
        "Description": "Offset the mouse-up click, that will be used to grab the UI element to drag, by this many pixels downwards"
      },
      {
        "Argument": "Mouse up position relative to drop-target UI element",
        "Type": "Top left, Top center, Top right, Middle left, Middle center, Middle right, Bottom left, Bottom center, Bottom right",
        "Description": "Specify which section of the UI element to drag the mouse onto after clicking"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "UI element to drag wasn't found",
        "Description": "Indicates that the UI element to drag wasn't found"
      },
      {
        "Exception": "Drop target UI element wasn't found",
        "Description": "Indicates that the drop target UI element wasn't found"
      },
      {
        "Exception": "Drag and drop failed",
        "Description": "Indicates a problem during drag and drop of the specified UI element"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Expand/collapse tree node in window",
    "description": "Expands or collapses a node of a tree view residing in a window.",
    "Input parameters": [
      {
        "Argument": "UI element",
        "Type": "UI element",
        "Description": "The tree node to expand/collapse"
      },
      {
        "Argument": "Folders path",
        "Type": "Text value",
        "Description": "A forward slash separated path made out of folder names leading to the tree node to expand or collapse"
      },
      {
        "Argument": "Use regular expressions",
        "Type": "Boolean value",
        "Description": "Specify whether each folder name in the path to interpret as a regular expression"
      },
      {
        "Argument": "Operation",
        "Type": "Expand, Collapse",
        "Description": "Specify whether to expand or collapse the tree node"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to set tree node to the specified state",
        "Description": "Indicates a problem setting the tree node to the specified state"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "If window",
    "description": "This action marks the beginning of a conditional block of actions depending on whether a window is open or not or whether a window is the focused (foreground) window.",
    "Input parameters": [
      {
        "Argument": "Get window",
        "Type": "By window UI element, By window instance/handle, By title and/or class",
        "Description": "Specify whether to look for the Window using a UI element or a combination of window title/class"
      },
      {
        "Argument": "Window title",
        "Type": "Text value",
        "Description": "The window title. Wildcards can be used, like '?' or '*'."
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window UI element"
      },
      {
        "Argument": "Window instance",
        "Type": "Numeric value",
        "Description": "The instance or handle of the window to check"
      },
      {
        "Argument": "Window class",
        "Type": "Text value",
        "Description": "If there are two windows with the same title, window class might help differentiate between them. In this case, enter the class of the window to be used."
      },
      {
        "Argument": "Check if window",
        "Type": "Is open, Isn't open, Is focused, Isn't focused",
        "Description": "The state of the window to be checked"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "UI automation",
    "action": "Wait for window",
    "description": "Suspends the execution or the process until a specific window opens, closes, get or loses the focus.",
    "Input parameters": [
      {
        "Argument": "Find window",
        "Type": "By window UI element, By window instance/handle, By title and/or class",
        "Description": "Specify whether to look for the window using a UI element or a combination of window title/class"
      },
      {
        "Argument": "Window title",
        "Type": "Text value",
        "Description": "The window title. Wildcards can be used, like '?' or '*'."
      },
      {
        "Argument": "Window",
        "Type": "UI element",
        "Description": "The window UI element"
      },
      {
        "Argument": "Window instance",
        "Type": "Numeric value",
        "Description": "The instance or handle of the window to check"
      },
      {
        "Argument": "Window class",
        "Type": "Text value",
        "Description": "If there are two windows with the same title, window class might help differentiate between them. In this case, enter the class of the window to be used"
      },
      {
        "Argument": "Wait for window to",
        "Type": "Open, Close, Become focused, Lose focus",
        "Description": "Whether to wait for a specific window to open, close, become focused (i.e become the foreground window), or lose focus (i.e stop being the foreground window)."
      },
      {
        "Argument": "Focus window after it opens",
        "Type": "Boolean value",
        "Description": "Bring the window to the front after it opens, so later actions are directed at this window"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't focus window",
        "Description": "Indicates a problem focusing the specified window"
      },
      {
        "Exception": "Wait for window failed",
        "Description": "Indicates that the wait operation failed"
      },
      {
        "Exception": "Can't perform window-related action in noninteractive mode",
        "Description": "Indicates a problem performing window-related action in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "CMD session",
    "action": "Open CMD session",
    "description": "Open a new CMD session.",
    "Input parameters": [
      {
        "Argument": "Working folder",
        "Type": "Folder",
        "Description": "The full path of the folder to start the CMD session, if applicable"
      },
      {
        "Argument": "Change code page",
        "Type": "Boolean value",
        "Description": "Specifies whether to change the session's current code page"
      },
      {
        "Argument": "Encoding",
        "Type": "ASMO-708 : Arabic (ASMO 708), big5 : Chinese Traditional (Big5), cp1025 : IBM EBCDIC (Cyrillic Serbian-Bulgarian), cp866 : Cyrillic (DOS), cp875 : IBM EBCDIC (Greek Modern), csISO2022JP : Japanese (JIS-Allow 1 byte Kana), DOS-720 : Arabic (DOS), DOS-862 : Hebrew (DOS), EUC-CN : Chinese Simplified (EUC), EUC-JP : Japanese (JIS 0208-1990 and 0212-1990), euc-jp : Japanese (EUC), euc-kr : Korean (EUC), GB18030 : Chinese Simplified (GB18030), gb2312 : Chinese Simplified (GB2312), hz-gb-2312 : Chinese Simplified (HZ), IBM-Thai : IBM EBCDIC (Thai), IBM00858 : OEM Multilingual Latin I, IBM00924 : IBM Latin-1, IBM01047 : IBM Latin-1, IBM01140 : IBM EBCDIC (US-Canada-Euro), IBM01141 : IBM EBCDIC (Germany-Euro), IBM01142 : IBM EBCDIC (Denmark-Norway-Euro), IBM01143 : IBM EBCDIC (Finland-Sweden-Euro), IBM01144 : IBM EBCDIC (Italy-Euro), IBM01145 : IBM EBCDIC (Spain-Euro), IBM01146 : IBM EBCDIC (UK-Euro), IBM01147 : IBM EBCDIC (France-Euro), IBM01148 : IBM EBCDIC (International-Euro), IBM01149 : IBM EBCDIC (Icelandic-Euro), IBM037 : IBM EBCDIC (US-Canada), IBM1026 : IBM EBCDIC (Turkish Latin-5), IBM273 : IBM EBCDIC (Germany), IBM277 : IBM EBCDIC (Denmark-Norway), IBM278 : IBM EBCDIC (Finland-Sweden), IBM280 : IBM EBCDIC (Italy), IBM284 : IBM EBCDIC (Spain), IBM285 : IBM EBCDIC (UK), IBM290 : IBM EBCDIC (Japanese katakana), IBM297 : IBM EBCDIC (France), IBM420 : IBM EBCDIC (Arabic), IBM423 : IBM EBCDIC (Greek), IBM424 : IBM EBCDIC (Hebrew), IBM437 : OEM United States, IBM500 : IBM EBCDIC (International), ibm737 : Greek (DOS), ibm775 : Baltic (DOS), ibm850 : Western European (DOS), ibm852 : Central European (DOS), IBM855 : OEM Cyrillic, ibm857 : Turkish (DOS), IBM860 : Portuguese (DOS), ibm861 : Icelandic (DOS), IBM863 : French Canadian (DOS), IBM864 : Arabic (864), IBM865 : Nordic (DOS), ibm869 : Greek, Modern (DOS), IBM870 : IBM EBCDIC (Multilingual Latin-2), IBM871 : IBM EBCDIC (Icelandic), IBM880 : IBM EBCDIC (Cyrillic Russian), IBM905 : IBM EBCDIC (Turkish), iso-2022-jp : Japanese (JIS), iso-2022-jp : Japanese (JIS-Allow 1 byte Kana - SO/SI), iso-2022-kr : Korean (ISO), iso-8859-1 : Western European (ISO), iso-8859-13 : Estonian (ISO), iso-8859-15 : Latin 9 (ISO), iso-8859-2 : Central European (ISO), iso-8859-3 : Latin 3 (ISO), iso-8859-4 : Baltic (ISO), iso-8859-5 : Cyrillic (ISO), iso-8859-6 : Arabic (ISO), iso-8859-7 : Greek (ISO), iso-8859-8 : Hebrew (ISO-Visual), iso-8859-8-i : Hebrew (ISO-Logical), iso-8859-9 : Turkish (ISO), Johab : Korean (Johab), koi8-r : Cyrillic (KOI8-R), koi8-u : Cyrillic (KOI8-U), ks_c_5601-1987 : Korean, macintosh : Western European (Mac), shift_jis : Japanese (Shift-JIS), us-ascii : US-ASCII, utf-16 : Unicode, utf-16BE : Unicode (Big-Endian), utf-32 : Unicode (UTF-32), utf-32BE : Unicode (UTF-32 Big-Endian), utf-7 : Unicode (UTF-7), utf-8 : Unicode (UTF-8), windows-1250 : Central European (Windows), windows-1251 : Cyrillic (Windows), Windows-1252 : Western European (Windows), windows-1253 : Greek (Windows), windows-1254 : Turkish (Windows), windows-1255 : Hebrew (Windows), windows-1256 : Arabic (Windows), windows-1257 : Baltic (Windows), windows-1258 : Vietnamese (Windows), windows-874 : Thai (Windows), x-Chinese-CNS : Chinese Traditional (CNS), x-Chinese-Eten : Chinese Traditional (Eten), x-cp20001 : TCA Taiwan, x-cp20003 : IBM5550 Taiwan, x-cp20004 : TeleText Taiwan, x-cp20005 : Wang Taiwan, x-cp20261 : T.61, x-cp20269 : ISO-6937, x-cp20936 : Chinese Simplified (GB2312-80), x-cp20949 : Korean Wansung, x-cp50227 : Chinese Simplified (ISO-2022), x-EBCDIC-KoreanExtended : IBM EBCDIC (Korean Extended), x-Europa : Europa, x-IA5 : Western European (IA5), x-IA5-German : German (IA5), x-IA5-Norwegian : Norwegian (IA5), x-IA5-Swedish : Swedish (IA5), x-iscii-as : ISCII Assamese, x-iscii-be : ISCII Bengali, x-iscii-de : ISCII Devanagari, x-iscii-gu : ISCII Gujarati, x-iscii-ka : ISCII Kannada, x-iscii-ma : ISCII Malayalam, x-iscii-or : ISCII Oriya, x-iscii-pa : ISCII Punjabi, x-iscii-ta : ISCII Tamil, x-iscii-te : ISCII Telugu, x-mac-arabic : Arabic (Mac), x-mac-ce : Central European (Mac), x-mac-chinesesimp : Chinese Simplified (Mac), x-mac-chinesetrad : Chinese Traditional (Mac), x-mac-croatian : Croatian (Mac), x-mac-cyrillic : Cyrillic (Mac), x-mac-greek : Greek (Mac), x-mac-hebrew : Hebrew (Mac), x-mac-icelandic : Icelandic (Mac), x-mac-japanese : Japanese (Mac), x-mac-korean : Korean (Mac), x-mac-romanian : Romanian (Mac), x-mac-thai : Thai (Mac), x-mac-turkish : Turkish (Mac), x-mac-ukrainian : Ukrainian (Mac)`",
        "Description": "The encoding to use when reading the output"
      }
    ],
    "Variables produced": [
      {
        "Argument": "CmdSession",
        "Type": "CMD session",
        "Description": "The CMD session for use with later CMD actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't start command session",
        "Description": "Indicates a problem initiating a CMD session"
      },
      {
        "Exception": "Working directory doesn't exist",
        "Description": "Indicates that an error occurred trying to locate the working directory"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "CMD session",
    "action": "Read from CMD session",
    "description": "Read the output of a CMD session.",
    "Input parameters": [
      {
        "Argument": "CMD session",
        "Type": "CMD session",
        "Description": "A previously opened CMD session"
      },
      {
        "Argument": "Separate output from error",
        "Type": "Boolean value",
        "Description": "Specifies whether to store the standard output and the standard error into different variables or combined into one"
      }
    ],
    "Variables produced": [
      {
        "Argument": "CmdOutput",
        "Type": "Text value",
        "Description": "The CMD session's standard output"
      },
      {
        "Argument": "CmdError",
        "Type": "Text value",
        "Description": "The CMD session's standard error"
      }
    ],
    "Exceptions": [
      {
        "Exception": "CMD session is closed",
        "Description": "Indicates that the CMD session specified is closed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "CMD session",
    "action": "Write to CMD session",
    "description": "Execute a command on an open CMD session.",
    "Input parameters": [
      {
        "Argument": "CMD session",
        "Type": "CMD session",
        "Description": "A previously opened CMD session variable"
      },
      {
        "Argument": "Command",
        "Type": "Text value",
        "Description": "The name of the command to execute"
      },
      {
        "Argument": "Send Enter after command",
        "Type": "Boolean value",
        "Description": "Specifies whether to send an Enter the command"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't write to CMD session",
        "Description": "Indicates an error writing to a CMD session"
      },
      {
        "Exception": "CMD session is closed",
        "Description": "Indicates that the CMD session specified is closed"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "CMD session",
    "action": "Wait for text on CMD session",
    "description": "Wait for a specific text on a previously opened CMD session.",
    "Input parameters": [
      {
        "Argument": "CMD session",
        "Type": "CMD session",
        "Description": "An open CMD session variable"
      },
      {
        "Argument": "Text to wait",
        "Type": "Text value",
        "Description": "The text or regular expression to wait to appear on standard output or on standard error"
      },
      {
        "Argument": "Is regular expression",
        "Type": "Boolean value",
        "Description": "Specifies whether to wait for a regular expression instead of plain text"
      },
      {
        "Argument": "Ignore case",
        "Type": "Boolean value",
        "Description": "Specifies whether the text to wait should match with standard output or standard error without taking into account the case of the text"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "Specifies whether to wait indefinitely for the text to appear or to fail if the text doesn't show up within a set time period"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "CMD session is closed",
        "Description": "Indicates that the CMD session specified is closed"
      },
      {
        "Exception": "Timeout occurred while waiting for text",
        "Description": "Indicates that the specified timeout period has elapsed before the text appeared in the command session"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "CMD session",
    "action": "Close CMD session",
    "description": "Close a previously opened CMD session.",
    "Input parameters": [
      {
        "Argument": "CMD session",
        "Type": "CMD session",
        "Description": "The CMD session to close. Specify this variable in an open CMD session action"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "If folder exists",
    "description": "Mark the beginning of a conditional block of actions depending on whether a folder exists or not.",
    "Input parameters": [
      {
        "Argument": "If folder",
        "Type": "Exists, Doesn't exist",
        "Description": "Choose the state of the folder to check"
      },
      {
        "Argument": "Folder path",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to check its state"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "Get files in folder",
    "description": "Retrieve the list of files in a folder.",
    "Input parameters": [
      {
        "Argument": "Folder",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to retrieve the list of files from"
      },
      {
        "Argument": "File filter",
        "Type": "Text value",
        "Description": "Choose a filter to limit the files retrieved. This parameter allows wild cards, for example, *.txt or document?.doc. To allow for multiple file filters, separate the choices with a semi-colon, for example, .txt;.exe."
      },
      {
        "Argument": "Include subfolders",
        "Type": "Boolean value",
        "Description": "Specify whether to look into subfolders as well"
      },
      {
        "Argument": "Fail upon denied access to any subfolder",
        "Type": "Boolean value",
        "Description": "Specify whether to throw an error when trying to get files of a folder with no access rights or ignore those folders"
      },
      {
        "Argument": "Sort by",
        "Type": "No sort, Full name, Root path, Directory, Name, Name without extension, Extension, Size, Creation time, Last accessed, Last modified, Is hidden, Is system, Is read-only, Is archive, Exists",
        "Description": "Specify whether to sort the results and by which criterion"
      },
      {
        "Argument": "Descending",
        "Type": "Boolean value",
        "Description": "Specify whether to sort the items in descending or ascending order"
      },
      {
        "Argument": "Then by",
        "Type": "No sort, Full name, Root path, Directory, Name, Name without extension, Extension, Size, Creation time, Last accessed, Last modified, Is hidden, Is system, Is read-only, Is archive, Exists",
        "Description": "Specify whether to sort the results by a second criterion"
      },
      {
        "Argument": "Descending",
        "Type": "Boolean value",
        "Description": "Specify whether to sort the items in descending or ascending order"
      },
      {
        "Argument": "Then by",
        "Type": "No sort, Full name, Root path, Directory, Name, Name without extension, Extension, Size, Creation time, Last accessed, Last modified, Is hidden, Is system, Is read-only, Is archive, Exists",
        "Description": "Specify whether to sort the results by a third criterion"
      },
      {
        "Argument": "Descending",
        "Type": "Boolean value",
        "Description": "Specify whether to sort the items in descending or ascending order"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Files",
        "Type": "List of Files",
        "Description": "The retrieved files as a list of file objects"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Folder doesn't exist",
        "Description": "Indicates that the folder wasn't found"
      },
      {
        "Exception": "Can't retrieve list of files",
        "Description": "Indicates a problem retrieving the list of files"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "Get subfolders in folder",
    "description": "Retrieve the list of subfolders in a folder.",
    "Input parameters": [
      {
        "Argument": "Folder",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to retrieve the list of subfolders from"
      },
      {
        "Argument": "Folder filter",
        "Type": "Text value",
        "Description": "Choose a filter to limit the subfolders retrieved. This parameter allows wild cards, for example, Doc* or Document?. To allow for multiple folder filters, separate the choices with a semi-colon, for example, Doc*;*."
      },
      {
        "Argument": "Include subfolders",
        "Type": "Boolean value",
        "Description": "Specify whether to look into the subfolders and retrieve their subfolders (and so on) as well"
      },
      {
        "Argument": "Fail upon denied access to any subfolder",
        "Type": "Boolean value",
        "Description": "Specify whether to throw an error when trying to get subfolders of a folder with no access rights or ignore those folders"
      },
      {
        "Argument": "Sort by",
        "Type": "No sort, Full name, Root path, Directory, Name, Name without extension, Extension, Size, Creation time, Last accessed, Last modified, Is hidden, Is system, Is read-only, Is archive, Exists",
        "Description": "Specify whether to sort the results and by which criterion"
      },
      {
        "Argument": "Descending",
        "Type": "Boolean value",
        "Description": "Specify whether to sort the items in descending or ascending order"
      },
      {
        "Argument": "Then by",
        "Type": "No sort, Full name, Root path, Directory, Name, Name without extension, Extension, Size, Creation time, Last accessed, Last modified, Is hidden, Is system, Is read-only, Is archive, Exists",
        "Description": "Specify whether to sort the results by a second criterion"
      },
      {
        "Argument": "Descending",
        "Type": "Boolean value",
        "Description": "Specify whether to sort the items in descending or ascending order"
      },
      {
        "Argument": "Then by",
        "Type": "No sort, Full name, Root path, Directory, Name, Name without extension, Extension, Size, Creation time, Last accessed, Last modified, Is hidden, Is system, Is read-only, Is archive, Exists",
        "Description": "Specify whether to sort the results by a third criterion"
      },
      {
        "Argument": "Descending",
        "Type": "Boolean value",
        "Description": "Specify whether to sort the items in descending or ascending order"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Folders",
        "Type": "List of Folders",
        "Description": "The retrieved subfolders as a list of folder objects"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Folder doesn't exist",
        "Description": "Indicates that the folder wasn't found"
      },
      {
        "Exception": "Can't retrieve list of subfolders",
        "Description": "Indicates a problem retrieving the list of subfolders"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "Create folder",
    "description": "Create a new folder.",
    "Input parameters": [
      {
        "Argument": "Create new folder into",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to create a new folder in"
      },
      {
        "Argument": "New folder name",
        "Type": "Text value",
        "Description": "Enter the text, or a text variable, to be the name of the new folder"
      }
    ],
    "Variables produced": [
      {
        "Argument": "NewFolder",
        "Type": "Folder",
        "Description": "The created folder object (which is a representation and can access the folder and all its information)"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Folder doesn't exist",
        "Description": "Indicates that the folder wasn't found"
      },
      {
        "Exception": "Can't create folder",
        "Description": "Indicates a problem creating the folder"
      },
      {
        "Exception": "New folder path and name are empty",
        "Description": "Indicates that both the new folder path and folder name don't have value"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "Delete folder",
    "description": "Delete an existing folder and its contents (files and subfolders).",
    "Input parameters": [
      {
        "Argument": "Folder to delete",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to delete. Remember that all contents of that folder and its subfolders are deleted too."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Folder doesn't exist",
        "Description": "Indicates that the folder wasn't found"
      },
      {
        "Exception": "Can't delete folder",
        "Description": "Indicates a problem deleting the folder"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "Empty folder",
    "description": "Delete all the contents of a folder (files and subfolders) without deleting the folder itself.",
    "Input parameters": [
      {
        "Argument": "Folder to empty",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to delete its contents"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Folder doesn't exist",
        "Description": "Indicates that the folder wasn't found"
      },
      {
        "Exception": "Can't delete folder's contents",
        "Description": "Indicates a problem clearing the folder's contents"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "Copy folder",
    "description": "Copy a folder into a destination folder.",
    "Input parameters": [
      {
        "Argument": "Folder to copy",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to copy. If the folder path ends with a \\ only the contents of the folder (files + subfolders) are copied. Otherwise, the folder itself (along with its contents) is copied as a subfolder into the destination folder."
      },
      {
        "Argument": "Destination folder",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to be the destination folder"
      },
      {
        "Argument": "If folder exists",
        "Type": "Do nothing, Overwrite",
        "Description": "Specify whether to overwrite files or not copy them at all, if the destination folder already exists. If the folder exists, but the files have different names, the old files still remain in the folder."
      }
    ],
    "Variables produced": [
      {
        "Argument": "CopiedFolder",
        "Type": "Folder",
        "Description": "The copied folder object (which is a representation and can access the folder and all its information)"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Folder doesn't exist",
        "Description": "Indicates that the folder wasn't found"
      },
      {
        "Exception": "Destination folder doesn't exist",
        "Description": "Indicates that the destination folder wasn't found"
      },
      {
        "Exception": "Can't copy folder",
        "Description": "Indicates a problem copying the folder"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "Move folder",
    "description": "Move an existing folder into a destination folder.",
    "Input parameters": [
      {
        "Argument": "Folder to move",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to move"
      },
      {
        "Argument": "Destination folder",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to be the destination folder"
      }
    ],
    "Variables produced": [
      {
        "Argument": "MovedFolder",
        "Type": "Folder",
        "Description": "The moved folder object (which is a representation and can access the folder and all its information)"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Folder doesn't exist",
        "Description": "Indicates that the folder wasn't found"
      },
      {
        "Exception": "Destination folder doesn't exist",
        "Description": "Indicates that the destination folder wasn't found"
      },
      {
        "Exception": "Can't move folder",
        "Description": "Indicates a problem moving the folder"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "Rename folder",
    "description": "Change the name of a folder.",
    "Input parameters": [
      {
        "Argument": "Folder to rename",
        "Type": "Folder",
        "Description": "Enter or choose the full path of the folder, or a variable containing the folder, to change its name"
      },
      {
        "Argument": "New folder name",
        "Type": "Text value",
        "Description": "Enter the text, or a text variable, to be the new folder name"
      }
    ],
    "Variables produced": [
      {
        "Argument": "RenamedFolder",
        "Type": "Folder",
        "Description": "The renamed folder object (which is a representation and can access the folder and all its information)"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Folder doesn't exist",
        "Description": "Indicates that the folder wasn't found"
      },
      {
        "Exception": "Can't rename folder",
        "Description": "Indicates a problem renaming the folder"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Folder",
    "action": "Get special folder",
    "description": "Retrieve the path of a Windows' special folder (such as Desktop, My Pictures, Internet Cache etc.).",
    "Input parameters": [
      {
        "Argument": "Special folder name",
        "Type": "Programs, Personal, Favorites, Startup, Recent, Send To, Start Menu, Music, Desktop, Templates, Application Data, Local Application Data, Internet Cache, Cookies, History, Common Application Data, System, Program Files, Pictures, Common Program Files",
        "Description": "Choose the name of the special folder (like My Documents or Desktop). This option is independent of path, to find the special folder on any computer regardless of path specifics."
      }
    ],
    "Variables produced": [
      {
        "Argument": "SpecialFolderPath",
        "Type": "Folder",
        "Description": "The special folder object (which is a representation and can access the folder and all its information)"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Outlook",
    "action": "Launch Outlook",
    "description": "Launch Outlook and create a new Outlook instance.",
    "Input parameters": [],
    "Variables produced": [
      {
        "Argument": "OutlookInstance",
        "Type": "Outlook instance",
        "Description": "The specific Outlook instance for use with later Outlook actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to launch Outlook",
        "Description": "Indicates a problem launching Outlook"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Outlook",
    "action": "Retrieve email messages from Outlook",
    "description": "Retrieve email messages from an Outlook account.",
    "Input parameters": [
      {
        "Argument": "Outlook instance",
        "Type": "Outlook instance",
        "Description": "The Outlook instance to work with. Specify this variable in a 'Launch Outlook' action"
      },
      {
        "Argument": "Account",
        "Type": "Text value",
        "Description": "The name of the Outlook account (data file name) to work with"
      },
      {
        "Argument": "Mail folder",
        "Type": "Text value",
        "Description": "The name of the folder to retrieve messages from. Enter the full folder path for subfolders (ex: Inbox\\Work)"
      },
      {
        "Argument": "Retrieve",
        "Type": "All email messages, Unread email messages only, Read email messages only",
        "Description": "Specifies whether to retrieve all messages in the folder or only the unread ones"
      },
      {
        "Argument": "Mark as read",
        "Type": "Boolean value",
        "Description": "Specifies whether to mark as read all the unread messages retrieved"
      },
      {
        "Argument": "From contains",
        "Type": "Text value",
        "Description": "The full email address of the sender whose messages to retrieve. Leave this attribute blank to retrieve all messages regardless of the sender"
      },
      {
        "Argument": "To contains",
        "Type": "Text value",
        "Description": "The full email address(es) of the recipient(s) (separated by space or semicolon if more than one) for the messages to retrieve. Leave this attribute blank to retrieve all messages regardless of the recipient(s)"
      },
      {
        "Argument": "Subject contains",
        "Type": "Text value",
        "Description": "The key phrase to find within the email subject. Leave this attribute blank to retrieve all email messages regardless of their subject"
      },
      {
        "Argument": "Body contains",
        "Type": "Text value",
        "Description": "The key phrase to find within the email body. Leave this attribute blank to retrieve all email messages regardless of their content"
      },
      {
        "Argument": "Attachments",
        "Type": "Save attachments, Don't save attachments",
        "Description": "Specifies whether to save the attachments of the email messages retrieved or not"
      },
      {
        "Argument": "Save attachments into",
        "Type": "Folder",
        "Description": "The path to save the attachments of the retrieved emails into"
      }
    ],
    "Variables produced": [
      {
        "Argument": "RetrievedEmails",
        "Type": "List of Outlook mail messages",
        "Description": "The retrieved email messages for later processing. The variable contain a list of Outlook message objects"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to find Outlook account",
        "Description": "Indicates that the specified Outlook account doesn't exist"
      },
      {
        "Exception": "Mail-folder specified not valid in Outlook",
        "Description": "Indicates that the specified mail folder isn't valid"
      },
      {
        "Exception": "Directory for saving attachments not found",
        "Description": "Indicates that the directory to save the attachments into doesn't exist"
      },
      {
        "Exception": "Failed to retrieve email messages from Outlook",
        "Description": "Indicates a problem retrieving the email messages from Outlook"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Outlook",
    "action": "Send email through Outlook",
    "description": "Create and send a new email message through Outlook.",
    "Input parameters": [
      {
        "Argument": "Outlook instance",
        "Type": "Outlook instance",
        "Description": "The Outlook instance to work with. Specify this variable in a 'Launch Outlook' action"
      },
      {
        "Argument": "Account",
        "Type": "Text value",
        "Description": "The name of the Outlook account (data file name) to work with"
      },
      {
        "Argument": "Send email from",
        "Type": "Account, Other mailbox",
        "Description": "Specifies whether to send the email using the specified account or a different one, for example from a shared mailbox"
      },
      {
        "Argument": "Send from",
        "Type": "Text value",
        "Description": "The name of the Outlook account to send the email from; for example, a shared mailbox."
      },
      {
        "Argument": "To",
        "Type": "Text value",
        "Description": "The email address(es) of the recipient(s). To enter more than one email address, separate the list of addresses by spaces or semicolons"
      },
      {
        "Argument": "CC",
        "Type": "Text value",
        "Description": "The email address(es) of the CC recipient(s). To enter more than one email address, separate the list of addresses by spaces or semicolons"
      },
      {
        "Argument": "BCC",
        "Type": "Text value",
        "Description": "The email address(es) of the BCC (hidden) recipient(s). To enter more than one email address, separate the list of addresses by spaces or semicolons"
      },
      {
        "Argument": "Subject",
        "Type": "Text value",
        "Description": "The subject of the email"
      },
      {
        "Argument": "Body",
        "Type": "Text value",
        "Description": "The text of the body"
      },
      {
        "Argument": "Body is HTML",
        "Type": "Boolean value",
        "Description": "Specifies whether to interpret the body of the email as HTML coding"
      },
      {
        "Argument": "Attachment(s)",
        "Type": "List of Files",
        "Description": "The full path of any attachment(s). Enclose multiple files in double quotes (\") and separate them by a space character"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to find Outlook account",
        "Description": "Indicates that the specified Outlook account doesn't exist. Power Automate doesn't throw this error for the email addresses populated in the Send from input parameter"
      },
      {
        "Exception": "Failed to send email",
        "Description": "Indicates a problem sending the email"
      },
      {
        "Exception": "Attachment not found",
        "Description": "Indicates that the specified attachment(s) don't exist"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Outlook",
    "action": "Process email messages in Outlook",
    "description": "Move or deletes an email (or a list of email messages) retrieved by a 'Retrieve emails from Outlook' action.",
    "Input parameters": [
      {
        "Argument": "Outlook instance",
        "Type": "Outlook instance",
        "Description": "The Outlook instance to work with. Specify this variable in a 'Launch Outlook' action"
      },
      {
        "Argument": "Account",
        "Type": "Text value",
        "Description": "The name of the Outlook account (data file name) to work with"
      },
      {
        "Argument": "Email messages to process",
        "Type": "List of Outlook mail messages",
        "Description": "The email message(s) to process. Use a variable populated by a 'Retrieve email messages from Outlook' action"
      },
      {
        "Argument": "Operation",
        "Type": "Delete email messages, Move email messages to mail folder, Mark as unread",
        "Description": "Specifies which operation to perform on the specified email messages"
      },
      {
        "Argument": "Mail folder",
        "Type": "Text value",
        "Description": "The name of the folder to retrieve messages from. Enter the full folder path for subfolders (for example, Inbox\\Work)"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to find Outlook account",
        "Description": "Indicates that the specified Outlook account doesn't exist"
      },
      {
        "Exception": "Specified mail-folder doesn't exist",
        "Description": "Indicates that the specified mail folder doesn't exist"
      },
      {
        "Exception": "Failed to process email messages in Outlook",
        "Description": "Indicates a problem processing the specified email messages in Outlook"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Outlook",
    "action": "Save Outlook email messages",
    "description": "Save Outlook email messages given an account.",
    "Input parameters": [
      {
        "Argument": "Outlook instance",
        "Type": "Outlook instance",
        "Description": "The Outlook instance to work with. Specify this variable in a 'Launch Outlook' action"
      },
      {
        "Argument": "Account",
        "Type": "Text value",
        "Description": "The name of the Outlook account (data file name) to work with"
      },
      {
        "Argument": "Email message(s) to save",
        "Type": "List of Outlook mail messages",
        "Description": "The email message(s) to save. Use a variable populated by a 'Retrieve email messages from Outlook' action"
      },
      {
        "Argument": "Save format",
        "Type": "Text only (.txt), Outlook template (.oft), Outlook message format (.msg), Outlook message format - Unicode (.msg), HTML (.html), MHT files (.mht)",
        "Description": "Specifies the format to save the messages"
      },
      {
        "Argument": "File name",
        "Type": "Default, Custom",
        "Description": "Specifies whether to save the messages using the default name (subject) or provide another"
      },
      {
        "Argument": "Save as",
        "Type": "Text value",
        "Description": "Specifies the custom name for messages' name, which differs from message to message by an automatically added suffix"
      },
      {
        "Argument": "Save email message(s) to",
        "Type": "Folder",
        "Description": "The folder to save the messages to"
      }
    ],
    "Variables produced": [
      {
        "Argument": "StoredMessagesFiles",
        "Type": "List of Text values",
        "Description": "The file paths of the saved email messages for later processing"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to find Outlook account",
        "Description": "Indicates that the specified Outlook account doesn't exist"
      },
      {
        "Exception": "Directory not found",
        "Description": "Indicates that the specified email message(s) couldn't be saved because the directory doesn't exist"
      },
      {
        "Exception": "Email message is deleted or moved to another folder",
        "Description": "Indicates that the specified email message(s) couldn't be saved because they're moved or deleted"
      },
      {
        "Exception": "Failed to save email message(s)",
        "Description": "Indicates a problem saving the specified email message(s)"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Outlook",
    "action": "Respond to Outlook mail message",
    "description": "Respond to an Outlook message, by replying, replying to all or forwarding it.",
    "Input parameters": [
      {
        "Argument": "Outlook instance",
        "Type": "Outlook instance",
        "Description": "The Outlook instance to work with. Specify this variable in a 'Launch Outlook' action"
      },
      {
        "Argument": "Account",
        "Type": "Text value",
        "Description": "The name of the Outlook account (data file name) to work with"
      },
      {
        "Argument": "Mail message",
        "Type": "Outlook mail message",
        "Description": "The mail message to act upon. Use a variable populated by a 'Retrieve email messages from Outlook' action"
      },
      {
        "Argument": "Response action",
        "Type": "Reply, Reply all, Forward",
        "Description": "Specifies whether to reply (to sender or all) with a message or forward the received message"
      },
      {
        "Argument": "To",
        "Type": "Text value",
        "Description": "The email address(es) of the recipient(s). To enter more than one email address, separate the list of addresses by spaces or semicolons"
      },
      {
        "Argument": "CC",
        "Type": "Text value",
        "Description": "The email address(es) of the CC recipient(s). To enter more than one email address, separate the list of addresses by spaces or semicolons"
      },
      {
        "Argument": "BCC",
        "Type": "Text value",
        "Description": "The email address(es) of the BCC (hidden) recipient(s). To enter more than one email address, separate the list of addresses by spaces or semicolons"
      },
      {
        "Argument": "Body",
        "Type": "Text value",
        "Description": "The text of the body"
      },
      {
        "Argument": "Attachment(s)",
        "Type": "List of Files",
        "Description": "The full path of any attachment(s). Enclose multiple files in double quotes (\") and separate them by a space character"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to find Outlook account",
        "Description": "Indicates that the specified Outlook account doesn't exist"
      },
      {
        "Exception": "Failed to send email",
        "Description": "Indicates a problem sending the email"
      },
      {
        "Exception": "Attachment not found",
        "Description": "Indicates that the specified attachment(s) don't exist"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Outlook",
    "action": "Close Outlook",
    "description": "Close a previously launched Outlook instance.",
    "Input parameters": [
      {
        "Argument": "Outlook instance",
        "Type": "Outlook instance",
        "Description": "The Outlook instance to work with. This variable is specified in a 'Launch Outlook' action"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to close Outlook instance",
        "Description": "Indicates a problem closing the Outlook instance"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Create new data table",
    "description": "Creates a new data table variable.",
    "Input parameters": [
      {
        "Argument": "New table",
        "Type": "Datatable",
        "Description": "The input data table"
      }
    ],
    "Variables produced": [
      {
        "Argument": "DataTable",
        "Type": "Datatable",
        "Description": "The new data table"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Insert row into data table",
    "description": "Inserts a row at the end or before a specific index value.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. This variable must have been previously specified by an action that produces a data table variable"
      },
      {
        "Argument": "Into location",
        "Type": "End of data table, Before row index",
        "Description": "Specify whether to insert the new row at the end of the data table or before a specified row index"
      },
      {
        "Argument": "Row index",
        "Type": "Numeric value",
        "Description": "Insert the row index value to be used when before row index is specified as the into location parameter"
      },
      {
        "Argument": "New value(s)",
        "Type": "List, Datarow",
        "Description": "This parameter accepts a list or datarow variable where the column count should match the column count in the data table"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Item index is out of range",
        "Description": "Indicates that the provided item index is out of range"
      },
      {
        "Exception": "Invalid input arguments",
        "Description": "Indicates that there's an invalid input parameter"
      },
      {
        "Exception": "Incompatible type error",
        "Description": "Indicates that an input parameter of an incompatible type is provided"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Delete row from data table",
    "description": "Delete a data table row at the corresponding row index.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. This variable must be specified by an action that produces a data table variable"
      },
      {
        "Argument": "Row index",
        "Type": "Numeric value",
        "Description": "The row index within a data table that should be deleted"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Item index is out of range",
        "Description": "Indicates that the specified data table item is out of range"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Update data table item",
    "description": "Update a data table row item on a defined column.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. This variable must have been previously specified by an action that produces a data table variable."
      },
      {
        "Argument": "Column",
        "Type": "Text value",
        "Description": "The column name or index of the item to update."
      },
      {
        "Argument": "Row",
        "Type": "Numeric value",
        "Description": "The row index of the item to update."
      },
      {
        "Argument": "New value",
        "Type": "Text value",
        "Description": "The new value to update at the specified row index and column."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Item index is out of range",
        "Description": "Indicates that the specified data table item is out of range"
      },
      {
        "Exception": "Column name doesn't exist",
        "Description": "Indicates that the provided column name doesn't exist"
      },
      {
        "Exception": "Column index is out of range",
        "Description": "Indicates that the provided column index is out of range"
      },
      {
        "Exception": "Incompatible type error",
        "Description": "Indicates that an input parameter of an incompatible type was provided"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Find or replace in data table",
    "description": "Finds and/or replaces data table values.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. This variable must have been previously specified by an action that produces a data table variable"
      },
      {
        "Argument": "Search mode",
        "Type": "Find, Find and replace",
        "Description": "The mode to search with (find or find and replace)"
      },
      {
        "Argument": "All matches",
        "Type": "Boolean value",
        "Description": "Specify whether to find or replace text in all the matching cells found or the first matching cell only"
      },
      {
        "Argument": "Text to find",
        "Type": "Text value",
        "Description": "The text to find in the data table"
      },
      {
        "Argument": "Find using a regular expression",
        "Type": "Boolean value",
        "Description": "Specify whether to use a regular expression to match the cell contents with the text to find"
      },
      {
        "Argument": "Match case",
        "Type": "Boolean value",
        "Description": "Specify whether to search for case-sensitive data"
      },
      {
        "Argument": "Match entire cell contents",
        "Type": "Boolean value",
        "Description": "Specify whether to search for cells that contain just the specified text"
      },
      {
        "Argument": "Text to replace with",
        "Type": "Text value",
        "Description": "The text used to replace the matching cells"
      },
      {
        "Argument": "Search by",
        "Type": "Everywhere, On column",
        "Description": "The order in which to search for the text (everywhere, or on column)"
      },
      {
        "Argument": "Column index or name",
        "Type": "Text value",
        "Description": "The column header or index value"
      }
    ],
    "Variables produced": [
      {
        "Argument": "DataTableMatches",
        "Type": "Datatable",
        "Description": "The data table containing the row and column indexes for matches"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Provided regular expression is invalid",
        "Description": "Indicates that the provided regular expression is invalid"
      },
      {
        "Exception": "Column name doesn't exist",
        "Description": "Indicates that the provided column name doesn't exist"
      },
      {
        "Exception": "Column index is out of range",
        "Description": "Indicates that the provided column index is out of range"
      },
      {
        "Exception": "Incompatible type error",
        "Description": "Indicates that an input parameter of an incompatible type is provided"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Insert column into data table",
    "description": "Inserts a column at the end or before a specific index value.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. This variable must be specified by an action that produces a data table variable."
      },
      {
        "Argument": "Into location",
        "Type": "End of data table, Before column index",
        "Description": "Specify whether to insert the new column at the end of the data table or before a specified column index."
      },
      {
        "Argument": "Column name",
        "Type": "Text value",
        "Description": "Specify the header of the new column."
      },
      {
        "Argument": "Column index",
        "Type": "Numeric value",
        "Description": "Specify the column index value that is utilized when the Before column index option is selected for the Into location parameter."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Column index is out of range",
        "Description": "Indicates that the provided column index is out of range."
      },
      {
        "Exception": "Duplicate column name",
        "Description": "Indicates that the provided column name already exists."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Delete column from data table",
    "description": "Delete a data table column at the specified column index or column name.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. This variable must be specified by an action that produces a data table variable."
      },
      {
        "Argument": "Specify column with",
        "Type": "Name, Index",
        "Description": "Specify whether to find the column by name or index."
      },
      {
        "Argument": "Column name",
        "Type": "Text value",
        "Description": "The name of the column that should be deleted."
      },
      {
        "Argument": "Column index",
        "Type": "Numeric value",
        "Description": "The index of the column that should be deleted. Column indexes start from 0."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Column name doesn't exist",
        "Description": "Indicates that the provided column name doesn't exist"
      },
      {
        "Exception": "Column index is out of range",
        "Description": "Indicates that the provided column index is out of range"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Delete empty rows from data table",
    "description": "Deletes the rows of the data table that have all of their cells empty.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. This variable must have been previously specified by an action that produces a data table variable"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Delete duplicate rows from data table",
    "description": "Deletes all the rows that are duplicate from the data table, if the values have the same data type in each column.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. The specified variable must be defined through an action that generates a data table variable."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Type mismatch in the cells of a column",
        "Description": "​Indicates that two or more values in a single column are of different data type"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Clear data table",
    "description": "Deletes all the rows of the data table, keeping table headers unaffected.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. The specified variable must be defined through an action that generates a data table variable."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Sort data table",
    "description": "Sorts the data table rows in ascending or descending order by the specified column, if all its values have the same data type.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. The specified variable must be defined through an action that generates a data table variable."
      },
      {
        "Argument": "Specify column with",
        "Type": "Name, Index",
        "Description": "Specify whether to find the column by name or index."
      },
      {
        "Argument": "Column name",
        "Type": "Text value",
        "Description": "The name of the column that should be sorted."
      },
      {
        "Argument": "Column index",
        "Type": "Numeric value",
        "Description": "The index of the column that should be sorted. Column indexes start from 0."
      },
      {
        "Argument": "Order",
        "Type": "Ascending, Descending",
        "Description": "The order to sort the data table."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Column name doesn't exist",
        "Description": "​Indicates that the provided column name doesn't exist"
      },
      {
        "Exception": "Column index is out of range",
        "Description": "​Indicates that the provided column index is out of range"
      },
      {
        "Exception": "Type mismatch in the cells of a column",
        "Description": "​Indicates that two or more values in a single column are of different data type"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Filter data table",
    "description": "Filters the data table rows based on the applied rules.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. The specified variable must be defined through an action that generates a data table variable."
      },
      {
        "Argument": "Filters to apply",
        "Type": "Filtering rules as defined by the user",
        "Description": "Filtering rules applied to the defined columns"
      },
      {
        "Argument": "Match case",
        "Type": "Boolean value",
        "Description": "Specify whether to search for case-sensitive data. Applies only in filters: Equal to, Not equal to, Contains, Does not contain, Starts with, Does not start with, Ends with, Does not end with."
      }
    ],
    "Variables produced": [
      {
        "Argument": "FilteredDataTable",
        "Type": "Datatable",
        "Description": "The generated data table after applying the filters"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Column name doesn't exist",
        "Description": "​Indicates that the provided column name doesn't exist"
      },
      {
        "Exception": "Column index is out of range",
        "Description": "​Indicates that the provided column index is out of range"
      },
      {
        "Exception": "Type mismatch in the cells of a column",
        "Description": "​Indicates that two or more values in a single column are of different data type"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Merge data tables",
    "description": "Merges two data tables together, specifying the merging behavior in case their number of columns is different.",
    "Input parameters": [
      {
        "Argument": "First data table",
        "Type": "Datatable",
        "Description": "The first data table variable to work with. This is also the action's produced variable that holds the merged data table"
      },
      {
        "Argument": "Second data table",
        "Type": "Datatable",
        "Description": "The second data table that is merged into the first data table"
      },
      {
        "Argument": "Merge mode",
        "Type": "Add extra columns, Ignore extra columns, Error on extra columns",
        "Description": "The merging behavior that is applied when the tables don't have the same number of columns"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Missing Schema",
        "Description": "​​Indicates that the data tables don't have the same number of columns"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Join data tables",
    "description": "Joins two data tables based on the specified join rule.",
    "Input parameters": [
      {
        "Argument": "First data table",
        "Type": "Datatable",
        "Description": "The first data table variable to work with. The specified variable must be defined through an action that generates a data table variable."
      },
      {
        "Argument": "Second data table",
        "Type": "Datatable",
        "Description": "The second data table variable to work with. The specified variable must be defined through an action that generates a data table variable."
      },
      {
        "Argument": "Join operation",
        "Type": "Inner, Left, Full",
        "Description": "The join operation that is used to join the two tables"
      },
      {
        "Argument": "Join rules",
        "Type": "Join rules as defined by the user",
        "Description": "Define the columns and the operation to be used for joining the two data tables"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JoinedDataTable",
        "Type": "Datatable",
        "Description": "The generated data table after the join operation"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Column name doesn't exist",
        "Description": "​Indicates that the provided column name doesn't exist"
      },
      {
        "Exception": "Column index is out of range",
        "Description": "​Indicates that the provided column index is out of range"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Read from CSV text variable",
    "description": "Generates a data table from a CSV text.",
    "Input parameters": [
      {
        "Argument": "CSV text",
        "Type": "Text value",
        "Description": "The CSV text variable to read."
      },
      {
        "Argument": "Trim fields",
        "Type": "Boolean value",
        "Description": "Specifies whether to automatically trim off the leading and trailing whitespaces of the extracted cells."
      },
      {
        "Argument": "First line contains column names",
        "Type": "Boolean value",
        "Description": "Specifies whether to use the first row of the CSV text to set the column names of the resulting data table. Enable this option to avoid reading the names as data into the table. Subsequent actions might access the data held by the data table using column names (instead of column numbers)."
      },
      {
        "Argument": "Get CSV fields as text",
        "Type": "Boolean value",
        "Description": "Specify whether to retrieve the content of the CSV text fields purely as text or as the closest matching type. For example, Date Time for dates and Numeric for numbers."
      },
      {
        "Argument": "Columns separator",
        "Type": "Predefined, Custom, Fixed Column Widths",
        "Description": "Specifies whether to use a predefined columns separator, a custom separator, or fixed column widths."
      },
      {
        "Argument": "Separator",
        "Type": "System default, Comma, Semicolon, Tab",
        "Description": "The column-separator to parse the CSV text."
      },
      {
        "Argument": "Custom separator",
        "Type": "Text value",
        "Description": "The custom column-separator to use for parsing the CSV text."
      },
      {
        "Argument": "Fixed column widths",
        "Type": "Text value",
        "Description": "The fixed column-widths to use for parsing the CSV text. Separate the widths using commas, spaces, tabs, or newlines."
      }
    ],
    "Variables produced": [
      {
        "Argument": "CSVTable",
        "Type": "Datatable",
        "Description": "The contents of the CSV text as a data table"
      }
    ],
    "Exceptions": [
      {
        "Exception": "CSV parsing failed",
        "Description": "​Indicates a problem parsing the CSV text"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Convert data table to text",
    "description": "Converts a data table to a CSV text.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table variable to work with. The specified variable must be defined through an action that generates a data table variable."
      },
      {
        "Argument": "Include column names",
        "Type": "Boolean value",
        "Description": "Specifies whether the column names of the variant specified should become the first row of the CSV text."
      },
      {
        "Argument": "Use custom columns separator",
        "Type": "Boolean value",
        "Description": "Specifies whether to use a custom column separator or a predefined column separator."
      },
      {
        "Argument": "Separator",
        "Type": "System default, Comma, Semicolon, Tab",
        "Description": "The column separator to use in the specified CSV text."
      },
      {
        "Argument": "Custom columns separator",
        "Type": "Text value",
        "Description": "The custom column separator to use in the specified CSV text."
      }
    ],
    "Variables produced": [
      {
        "Argument": "CSVText",
        "Type": "Text value",
        "Description": "The variable in which the CSV result is stored"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Conversion failed",
        "Description": "​Indicates a problem converting the data table to CSV text"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Truncate number",
    "description": "Get the integral or fractional digits of a numeric value, or round up the value to a specified number of decimal places.",
    "Input parameters": [
      {
        "Argument": "Number to truncate",
        "Type": "Numeric value",
        "Description": "The number or variable that holds the numeric value to truncate/round up"
      },
      {
        "Argument": "Operation",
        "Type": "Get integer part, Get decimal part, Round number",
        "Description": "Specifies the operation to perform on the given number"
      },
      {
        "Argument": "Decimal places",
        "Type": "Numeric value",
        "Description": "The number of decimal places to round the given number up to. Enter 0 to return an integer as a result"
      }
    ],
    "Variables produced": [
      {
        "Argument": "TruncatedValue",
        "Type": "Numeric value",
        "Description": "The truncated or rounded number"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Generate random number",
    "description": "Generate a random number or a list of random numbers that fall between a minimum and maximum value.",
    "Input parameters": [
      {
        "Argument": "Minimum value",
        "Type": "Numeric value",
        "Description": "The lower boundary for the random number(s) to generate"
      },
      {
        "Argument": "Maximum value",
        "Type": "Numeric value",
        "Description": "The upper boundary for the random number(s) to generate"
      },
      {
        "Argument": "Generate multiple numbers",
        "Type": "Boolean value",
        "Description": "Specifies whether to generate a single random number or a list of random numbers"
      },
      {
        "Argument": "How many numbers",
        "Type": "Numeric value",
        "Description": "Specifies how many random numbers to generate"
      },
      {
        "Argument": "Allow duplicates",
        "Type": "Boolean value",
        "Description": "Specifies whether to permit or prevent the same number from appearing more than once in the random numbers list"
      }
    ],
    "Variables produced": [
      {
        "Argument": "RandomNumber",
        "Type": "Numeric value",
        "Description": "The newly generated random number"
      },
      {
        "Argument": "RandomNumbers",
        "Type": "List of Numeric values",
        "Description": "The newly generated list of random numbers"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to generate random number",
        "Description": "Indicates that there's an error generating a random number"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Clear list",
    "description": "Remove all items from a list.",
    "Input parameters": [
      {
        "Argument": "List to clear",
        "Type": "List of General values",
        "Description": "A list variable to remove its elements"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Remove item from list",
    "description": "Remove one or multiple items from a list.",
    "Input parameters": [
      {
        "Argument": "Remove item by",
        "Type": "Index, Value",
        "Description": "Specifies whether to remove the item at a specified index or the item(s) with a specific value"
      },
      {
        "Argument": "At index",
        "Type": "Numeric value",
        "Description": "The index number of the item to remove"
      },
      {
        "Argument": "With value",
        "Type": "General value",
        "Description": "The item to remove"
      },
      {
        "Argument": "Remove all item occurrences",
        "Type": "Boolean value",
        "Description": "Removes all the occurrences that match the item specified"
      },
      {
        "Argument": "From list",
        "Type": "List of General values",
        "Description": "The list with items to remove"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Item index is out of range",
        "Description": "Indicates that item index is out of range"
      },
      {
        "Exception": "Item not found",
        "Description": "Indicates that item doesn't exist in the list"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Sort list",
    "description": "Sort the items of a list. Use items of the same type.",
    "Input parameters": [
      {
        "Argument": "List to sort",
        "Type": "List of General values",
        "Description": "The variable that holds the list to sort"
      },
      {
        "Argument": "Sort by list item's properties",
        "Type": "Boolean value",
        "Description": "If the list items are objects (such are files, folders, etc.), enable this option to sort the item by a specific property. Leave this option disabled to sort the elements by their default property (for example, file objects are sorted by their full path)"
      },
      {
        "Argument": "First property to sort by",
        "Type": "Text value",
        "Description": "The name of an item's property to sort the list by. Refer to the help file for the property names of each object"
      },
      {
        "Argument": "Sort",
        "Type": "Ascending, Descending",
        "Description": "Specifies whether to sort by the first property ascending or descending"
      },
      {
        "Argument": "Second property to sort by",
        "Type": "Text value",
        "Description": "The name of a second property to sort the list by"
      },
      {
        "Argument": "Sort",
        "Type": "Ascending, Descending",
        "Description": "Specifies whether to sort by the second property ascending or descending"
      },
      {
        "Argument": "Third property to sort by",
        "Type": "Text value",
        "Description": "The name of a third property to sort the list by"
      },
      {
        "Argument": "Sort",
        "Type": "Ascending, Descending",
        "Description": "Specifies whether to sort by the third property ascending or descending"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Shuffle list",
    "description": "Create a random permutation of a list.",
    "Input parameters": [
      {
        "Argument": "List to shuffle",
        "Type": "List of General values",
        "Description": "The variable that contains the list to shuffle"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Merge lists",
    "description": "Merge two lists into one.",
    "Input parameters": [
      {
        "Argument": "First list",
        "Type": "List of General values",
        "Description": "The first list of items to merge"
      },
      {
        "Argument": "Second list",
        "Type": "List of General values",
        "Description": "The second list of items to merge"
      }
    ],
    "Variables produced": [
      {
        "Argument": "OutputList",
        "Type": "List of General values",
        "Description": "The merged list. The initial lists aren't affected"
      }
    ],
    "Exceptions": [
      {
        "Exception": "The lists supplied are of incompatible types",
        "Description": "Indicates that the lists supplied are of incompatible types"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Reverse list",
    "description": "Reverse the order of the items of a list.",
    "Input parameters": [
      {
        "Argument": "List to reverse",
        "Type": "List of General values",
        "Description": "The list whose items order to reverse"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Remove duplicate items from list",
    "description": "Remove the multiple occurrences of items in a list, so that in the resulting list each item is unique.",
    "Input parameters": [
      {
        "Argument": "List to remove duplicate items from",
        "Type": "List of General values",
        "Description": "The list variable to remove duplicate items from"
      },
      {
        "Argument": "Ignore text case while searching for duplicate items",
        "Type": "Boolean value",
        "Description": "Specifies whether to perform case insensitive comparison of text while searching for duplicate items (only applies to lists made of text items)"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Find common list items",
    "description": "Compare two lists and create a new list with the items that are common to both.",
    "Input parameters": [
      {
        "Argument": "First list",
        "Type": "List of General values",
        "Description": "The variable that contains the first list to compare"
      },
      {
        "Argument": "Second list",
        "Type": "List of General values",
        "Description": "The variable that contains the second list to compare"
      }
    ],
    "Variables produced": [
      {
        "Argument": "IntersectionList",
        "Type": "List of General values",
        "Description": "The new list of common items"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Subtract lists",
    "description": "Compare two lists and create a new list with the items that are in the first list but not in the second.",
    "Input parameters": [
      {
        "Argument": "First list",
        "Type": "List of General values",
        "Description": "The variable that holds the first list to compare"
      },
      {
        "Argument": "Second list",
        "Type": "List of General values",
        "Description": "The variable that holds the second list to compare"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ListDifference",
        "Type": "List of General values",
        "Description": "The new resulting list"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Retrieve data table column into list",
    "description": "Convert the contents of a data table column into a list.",
    "Input parameters": [
      {
        "Argument": "Data table",
        "Type": "Datatable",
        "Description": "The data table with the column to convert into a list"
      },
      {
        "Argument": "Column name or index",
        "Type": "Text value",
        "Description": "The column name, if column names are defined, or the index number of the column to retrieve"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ColumnAsList",
        "Type": "List of General values",
        "Description": "The new list that holds the contents of the specified data table"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Column name doesn't exist",
        "Description": "Indicates that the column name isn't in the data table"
      },
      {
        "Exception": "Column index is out of range",
        "Description": "Indicates that the column index is out of range"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Convert JSON to custom object",
    "description": "Convert a JSON string to a custom object.",
    "Input parameters": [
      {
        "Argument": "JSON",
        "Type": "Text value",
        "Description": "A JSON text, or a previously created variable containing one, to convert it to a custom object"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JsonAsCustomObject",
        "Type": "General value",
        "Description": "The converted custom object from the provided JSON"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Error parsing the JSON",
        "Description": "Indicates that there's an error parsing the specified JSON"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Convert custom object to JSON",
    "description": "Convert a custom object to a JSON string.",
    "Input parameters": [
      {
        "Argument": "Custom object",
        "Type": "Custom object",
        "Description": "The custom object to convert to JSON"
      }
    ],
    "Variables produced": [
      {
        "Argument": "CustomObjectAsJson",
        "Type": "Text value",
        "Description": "The converted JSON from the provided custom object"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Error parsing the custom object",
        "Description": "Indicates that there's an error parsing the custom object"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Add item to list",
    "description": "Append a new item to a list.",
    "Input parameters": [
      {
        "Argument": "Add item",
        "Type": "General value",
        "Description": "A value or a variable to add to the list. Provide a list of values to append multiple elements. If the list has a specific type of elements, the new element is converted over to that type"
      },
      {
        "Argument": "Into list",
        "Type": "List of General values",
        "Description": "A list variable to append the new elements to"
      }
    ],
    "Variables produced": [
      {
        "Argument": "NewList",
        "Type": "List of General values",
        "Description": "The new list"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Create new list",
    "description": "Create a new empty list.",
    "Input parameters": [],
    "Variables produced": [
      {
        "Argument": "List",
        "Type": "List of General values",
        "Description": "The new list"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Increase variable",
    "description": "Increase the value of a variable by a specific amount.",
    "Input parameters": [
      {
        "Argument": "Variable name",
        "Type": "Numeric value",
        "Description": "The numeric value to increase"
      },
      {
        "Argument": "Increase by",
        "Type": "Numeric value",
        "Description": "A numeric value, or a previously created variable containing one, to increase the variable by"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Decrease variable",
    "description": "Decrease the value of a variable by a specific amount.",
    "Input parameters": [
      {
        "Argument": "Variable name",
        "Type": "Numeric value",
        "Description": "A numeric value, or a previously created variable containing one, to decrease the variable by"
      },
      {
        "Argument": "Decrease by",
        "Type": "Numeric value",
        "Description": "A numeric value, or a previously created variable containing one, to decrease the variable by"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Run Power Fx expression",
    "description": "Runs the provided Power Fx expression.",
    "Input parameters": [
      {
        "Argument": "Expression",
        "Type": "*",
        "Description": "The Power Fx expression to run"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Variables",
    "action": "Set variable",
    "description": "Set the value of a new or existing variable, create a new variable or overwrite a previously created variable.",
    "Input parameters": [
      {
        "Argument": "To",
        "Type": "*",
        "Description": "The value to assign to the variable"
      }
    ],
    "Variables produced": [
      {
        "Argument": "NewVar",
        "Type": "*",
        "Description": "The name of the variable to set"
      }
    ],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Compression",
    "action": "ZIP files",
    "description": "Compress one or more files or folders into a ZIP archive.",
    "Input parameters": [
      {
        "Argument": "Archive path",
        "Type": "File",
        "Description": "The full path of ZIP file to create. If the file already exists, this action adds the new zipped files and/or to the existing ZIP file. If the ZIP file already contains a file or folder with the same name, it overwrites it."
      },
      {
        "Argument": "File(s) to zip",
        "Type": "List of FileSystemObject",
        "Description": "The full path of the file(s) or folder(s) to include in the ZIP file"
      },
      {
        "Argument": "Compression level",
        "Type": "None, Best speed, Best balance of speed and compression, Best compression",
        "Description": "The level of compression to use. The higher the compression the smaller the file, though it takes longer to create or access"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password to use for protecting the ZIP. Leave this attribute blank to create a non password-protected ZIP"
      },
      {
        "Argument": "Archive comment",
        "Type": "Text value",
        "Description": "The comment to include in the ZIP file as a file property"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ZipFile",
        "Type": "File",
        "Description": "The ZIP file created by this action"
      }
    ],
    "Exceptions": [
      {
        "Exception": "File or folder doesn't exist",
        "Description": "Indicates that the specified file or folder doesn't exist"
      },
      {
        "Exception": "File or folder name is invalid",
        "Description": "Indicates that the file or folder name is invalid"
      },
      {
        "Exception": "Archive already exists but it isn't a valid ZIP archive",
        "Description": "Indicates that the archive already exists but it isn't a valid ZIP archive"
      },
      {
        "Exception": "Failed to zip files",
        "Description": "Indicates a problem zipping the files"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Compression",
    "action": "Unzip files",
    "description": "Uncompress one or more files or folders contained in a ZIP archive.",
    "Input parameters": [
      {
        "Argument": "Archive path",
        "Type": "File",
        "Description": "The full path of a ZIP file to extract"
      },
      {
        "Argument": "Destination folder",
        "Type": "Folder",
        "Description": "The full path of the folder to extract the archive to. This action overwrites files in the folder with the same name as a file in the archive"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password, if any, that is used for this archive. If the ZIP file isn't password-protected, leave this blank"
      },
      {
        "Argument": "Include mask",
        "Type": "Text value",
        "Description": "The filter to limit the files extracted to the files entered here. This parameter allows wild cards, for example '.txt' or 'document?.doc' (without the quotes). To allow multiple file filters, separate the choices with a semi-colon, for instance, '.txt;*.exe'"
      },
      {
        "Argument": "Exclude mask",
        "Type": "Text value",
        "Description": "The filter to limit the files extracted by excluding the file entered here. This parameter allows wild cards, for example, '.txt' or 'document?.doc' (without the quotes). To allow multiple file filters, separate the choices with a semi-colon, for instance, '.txt;*.exe'"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't create destination folder",
        "Description": "Indicates that the destination folder couldn't be created"
      },
      {
        "Exception": "Archive not found",
        "Description": "Indicates that the archive doesn't exist"
      },
      {
        "Exception": "Archive isn't a valid ZIP file",
        "Description": "Indicates that the archive isn't a valid ZIP file"
      },
      {
        "Exception": "Failed to unzip files",
        "Description": "Indicates a problem unzipping the files"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Open FTP connection",
    "description": "This action establishes a specific connection to a remote FTP server, and stores that connection as a variable for later use.",
    "Input parameters": [
      {
        "Argument": "Host",
        "Type": "Text value",
        "Description": "Enter the FTP server address here."
      },
      {
        "Argument": "Port",
        "Type": "Numeric value",
        "Description": "Enter the FTP server port here."
      },
      {
        "Argument": "Active mode",
        "Type": "Boolean value",
        "Description": "Specify the mode of the connection"
      },
      {
        "Argument": "Username",
        "Type": "Text value",
        "Description": "Specify the username of the FTP account to use"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "Specify the password of the FTP account to use"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "Set the time in seconds that you want to wait for the connection to be established before the action fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "FTPConnection",
        "Type": "FTP connection",
        "Description": "The FTP connection"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Login failure error",
        "Description": "Indicated that the login failed"
      },
      {
        "Exception": "Connection error",
        "Description": "Indicates that there's a problem with the connection"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "List FTP directory",
    "description": "This action returns the subdirectories and files contained in the current directory of an FTP connection.",
    "Input parameters": [
      {
        "Argument": "Connection",
        "Type": "FTP connection",
        "Description": "The FTP connection"
      },
      {
        "Argument": "Path",
        "Type": "Text value",
        "Description": "The path that you want to list."
      }
    ],
    "Variables produced": [
      {
        "Argument": "Directories",
        "Type": "List of FTP directories",
        "Description": "The listed directories"
      },
      {
        "Argument": "Files",
        "Type": "List of FTP files",
        "Description": "The listed files"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Listing error",
        "Description": "Indicates that the listing of the folder couldn't be performed"
      },
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      },
      {
        "Exception": "Directory doesn't exist error",
        "Description": "Indicates that the directory couldn't be found"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Open secure FTP connection",
    "description": "This action establishes a specific secure connection to a remote FTP server, and stores that connection as a variable for later use.",
    "Input parameters": [
      {
        "Argument": "Host",
        "Type": "Text value",
        "Description": "Enter the FTP server address here."
      },
      {
        "Argument": "Port",
        "Type": "Numeric value",
        "Description": "Enter the FTP server port here."
      },
      {
        "Argument": "Active mode",
        "Type": "Boolean value",
        "Description": "Specify the mode of the connection"
      },
      {
        "Argument": "Secure FTP Protocol",
        "Type": "SFTP, FTPS explicit, FTPS implicit",
        "Description": "Choose the FTP protocol you wish to use to encrypt your connection"
      },
      {
        "Argument": "Authentication method",
        "Type": "Username and password, Private key, Private key and passphrase",
        "Description": "Choose the method you wish to use to authenticate yourself on the FTP server"
      },
      {
        "Argument": "User name",
        "Type": "Text value",
        "Description": "Specify the username of the FTP account to use"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "Specify the password of the FTP account you wish to use"
      },
      {
        "Argument": "Path to private key",
        "Type": "Text value",
        "Description": "Enter the file path to the private-key to be used for authentication"
      },
      {
        "Argument": "Private key pass phrase",
        "Type": "Direct encrypted input or Text value",
        "Description": "Enter a variable containing the private-key pass phrase here"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "Set the time in seconds that you want to wait for the connection to be established before the action fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "SftpConnection",
        "Type": "FTP connection",
        "Description": "SFTP connection"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Login failure error",
        "Description": "Indicated that the login failed"
      },
      {
        "Exception": "Connection error",
        "Description": "Indicates that there's a problem with the connection"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Close connection",
    "description": "This action closes an open FTP connection.",
    "Input parameters": [
      {
        "Argument": "Connection",
        "Type": "FTP connection",
        "Description": "The FTP connection"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Change working directory",
    "description": "This action sets the current working directory for an FTP connection.",
    "Input parameters": [
      {
        "Argument": "Connection",
        "Type": "FTP connection",
        "Description": "The FTP connection"
      },
      {
        "Argument": "Set working directory to",
        "Type": "Text value",
        "Description": "Set the path to be set as the working directory"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      },
      {
        "Exception": "Directory doesn't exist error",
        "Description": "Indicates that the directory couldn't be found"
      },
      {
        "Exception": "Can't change working directory error",
        "Description": "Indicates that it isn't possible to change the working directory"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Download file(s) from FTP",
    "description": "Downloads one or more files from an FTP server.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an Open FTP connection action"
      },
      {
        "Argument": "Download into folder",
        "Type": "Folder",
        "Description": "The folder to be the destination of the file(s) that will be downloaded"
      },
      {
        "Argument": "File(s) to download",
        "Type": "List of FTP files",
        "Description": "The file(s) to download"
      },
      {
        "Argument": "Transfer type",
        "Type": "Auto, Binary, ASCII",
        "Description": "Enter ASCII or binary to specify the method for downloading a single file. If the file type is uncertain, or more than one is downloaded, choose Auto to follow the transfer rules specified in options"
      },
      {
        "Argument": "If file exists",
        "Type": "Overwrite, Do not download, Download with unique name",
        "Description": "Specify what to do if the file already exists. Overwrite writes over the original file so you can't access it anymore, and download with unique name adds an underscore and a sequential number to the end"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      },
      {
        "Exception": "Remote file doesn't exist error",
        "Description": "Indicates that the file doesn't exist on the FTP server"
      },
      {
        "Exception": "Directory doesn't exist error",
        "Description": "Indicates that the directory couldn't be found"
      },
      {
        "Exception": "FTP connection aborted error",
        "Description": "Indicates that the FTP connection was aborted"
      },
      {
        "Exception": "Can't download file error",
        "Description": "Indicates that it wasn't possible to download the file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Download folder(s) from FTP",
    "description": "Downloads one or more folders from an FTP server.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an Open FTP connection action"
      },
      {
        "Argument": "Folder(s) to download",
        "Type": "List of FTP directories",
        "Description": "The name of the folder path(s), or FTP folder(s) to download"
      },
      {
        "Argument": "Download into local folder",
        "Type": "Folder",
        "Description": "The full path of the destination of the FTP folder(s) you're downloading"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      },
      {
        "Exception": "Remote directory doesn't exist error",
        "Description": "Indicates that the directory doesn't exist on the FTP server"
      },
      {
        "Exception": "Directory doesn't exist error",
        "Description": "Indicates that the directory couldn't be found"
      },
      {
        "Exception": "FTP connection aborted error",
        "Description": "Indicates that the FTP connection was aborted"
      },
      {
        "Exception": "Can't download directory error",
        "Description": "Indicates that it wasn't possible to download the directory"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Upload File(s) to FTP",
    "description": "Uploads one or more files to an FTP server.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an Open FTP connection action"
      },
      {
        "Argument": "File(s) to upload",
        "Type": "List of Files",
        "Description": "The file(s) to upload"
      },
      {
        "Argument": "Remote location",
        "Type": "Text value",
        "Description": "The location where the files should be uploaded"
      },
      {
        "Argument": "Transfer type",
        "Type": "Auto, Binary, ASCII",
        "Description": "Enter ASCII or binary to specify the method for downloading a single file. If you're not sure what type the file will be, or if you're downloading more than one, choose Auto to follow the transfer rules specified in Options"
      },
      {
        "Argument": "If file exists",
        "Type": "Overwrite, Do not download, Download with unique name",
        "Description": "Specify what to do if the file already exists. Overwrite writes over the original file so you can't access it anymore, and Download with Unique Name adds an underscore and a sequential number to the end"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      },
      {
        "Exception": "File not found error",
        "Description": "Indicates that the file wasn't found"
      },
      {
        "Exception": "FTP connection aborted error",
        "Description": "Indicates that the FTP connection was aborted"
      },
      {
        "Exception": "Upload file error",
        "Description": "Indicates that the file couldn't be uploaded"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Upload folder(s) to FTP",
    "description": "Uploads one or more folders to an FTP server.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an Open FTP connection action"
      },
      {
        "Argument": "Folder(s) to upload",
        "Type": "List of Folders",
        "Description": "The folder(s) to upload. The folders being uploaded shouldn't already exist within the active directory of the FTP server"
      },
      {
        "Argument": "Remote location",
        "Type": "Text value",
        "Description": "The location where the folders should be uploaded"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      },
      {
        "Exception": "Remote directory doesn't exist error",
        "Description": "Indicates that the directory doesn't exist on the FTP server"
      },
      {
        "Exception": "FTP connection aborted error",
        "Description": "Indicates that the FTP connection was aborted"
      },
      {
        "Exception": "Upload directory error",
        "Description": "Indicates that the directory couldn't be uploaded"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Delete FTP file",
    "description": "Deletes one or more files from an FTP server.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an Open FTP connection action"
      },
      {
        "Argument": "Files to delete",
        "Type": "List of FTP files",
        "Description": "The files to delete"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      },
      {
        "Exception": "File not found error",
        "Description": "Indicates that the file wasn't found"
      },
      {
        "Exception": "Can't delete file error",
        "Description": "Indicates that the deletion of the file wasn't possible"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Rename FTP File",
    "description": "Renames a file that resides on an FTP server.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an Open FTP connection action"
      },
      {
        "Argument": "File to rename",
        "Type": "FTP file",
        "Description": "The file to rename"
      },
      {
        "Argument": "New file name",
        "Type": "Text value",
        "Description": "The new name for the file. If you enter a name with a path, the file will also be moved to that location. If the location doesn't exist, it will throw an exception"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      },
      {
        "Exception": "Can't rename file error",
        "Description": "Indicates that it wasn't possible to rename the file"
      },
      {
        "Exception": "File not found error",
        "Description": "Indicates that the file wasn't found"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Create FTP directory",
    "description": "Creates a directory on an FTP server.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an Open FTP connection action"
      },
      {
        "Argument": "New directory",
        "Type": "FTP directory",
        "Description": "The new directory. If a path is specified, all of the new folders leading to the new directory will be created"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Access denied error",
        "Description": "Indicates that this account doesn't have access for an operation"
      },
      {
        "Exception": "File exists error",
        "Description": "Indicates that the file already exists"
      },
      {
        "Exception": "Create directory error",
        "Description": "Indicates that it wasn't possible creating the directory"
      },
      {
        "Exception": "Directory doesn't exist error",
        "Description": "Indicates that the directory couldn't be found"
      },
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Delete FTP directory",
    "description": "Deletes a directory from an FTP server.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an Open FTP connection action"
      },
      {
        "Argument": "Directory to delete",
        "Type": "FTP directory",
        "Description": "The folder to be deleted. Everything in the folder will be deleted as well"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Delete directory error",
        "Description": "Indicates that it wasn't possible to delete the directory"
      },
      {
        "Exception": "Remote directory doesn't exist error",
        "Description": "Indicates that the directory doesn't exist on the FTP server"
      },
      {
        "Exception": "Working directory change error",
        "Description": "Indicates that the working directory couldn't be changed"
      },
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Invoke FTP command",
    "description": "Invokes the given literal FTP command on the server.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an open FTP connection action"
      },
      {
        "Argument": "FTP command",
        "Type": "Text value",
        "Description": "The command to run along with any arguments. For example, you could run FEAT, or CHMOD here"
      },
      {
        "Argument": "Valid reply code(s)",
        "Type": "Text value",
        "Description": "The code(s) that could be returned by the command, separated by semi-colon. If the FTP command returns a code that wasn't entered here, this action will throw an exception. Only applies over simple FTP or FTPS connections"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ReplyCode",
        "Type": "Text value",
        "Description": "The actual code that was returned. Only applies over simple FTP or FTPS connections"
      },
      {
        "Argument": "ReplyText",
        "Type": "Text value",
        "Description": "The text returned by the FTP server"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Invoke command error",
        "Description": "Indicates that an error occurred while invoking an FTP command"
      },
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "FTP",
    "action": "Synchronize directories",
    "description": "Synchronize the files and subdirectories of a given Folder with a given remote FTP directory.",
    "Input parameters": [
      {
        "Argument": "FTP connection",
        "Type": "FTP connection",
        "Description": "The FTP connection to work with. This variable must have been previously specified in an Open FTP connection action"
      },
      {
        "Argument": "Synchronization direction",
        "Type": "Remote -> local (Download), Local -> remote (Upload)",
        "Description": "Direction of the Synchronization method. Whether the local folder will be synchronized to the remote directory (DOWNLOAD) or the remote directory will be synchronized to the local folder (UPLOAD)"
      },
      {
        "Argument": "Files to sync",
        "Type": "All files, Only files matching the file filter, Only files not matching the file filter",
        "Description": "Choose whether you want to synchronize all files, or you want to use a file filter to include or exclude a specific set of files"
      },
      {
        "Argument": "File filter",
        "Type": "Text value",
        "Description": "File-name pattern that controls which files will be included or excluded. This option allows wildcards such as \".txt\", \"document?.doc\". The option also allows for multiple filters by using coma as a separator, \".txt,*.pdf,document?\""
      },
      {
        "Argument": "Local folder",
        "Type": "Folder",
        "Description": "Name of the local folder to be synchronized"
      },
      {
        "Argument": "FTP directory",
        "Type": "FTP directory",
        "Description": "Name of the FTP directory to be synchronized"
      },
      {
        "Argument": "Delete if source is absent",
        "Type": "Boolean value",
        "Description": "This option will delete a file or folder that exists in the target directory and not the source."
      },
      {
        "Argument": "Include subdirectories",
        "Type": "Boolean value",
        "Description": "This option will include subdirectories in the synchronization process."
      },
      {
        "Argument": "Time difference in hours",
        "Type": "Numeric value",
        "Description": "Time difference in hours of the remote server in case it operates on a different Time Zone."
      },
      {
        "Argument": "Time difference in minutes",
        "Type": "Numeric value",
        "Description": "Time difference in Minutes of the remote server in case it operates on a different Time Zone."
      },
      {
        "Argument": "Time difference ahead",
        "Type": "Boolean value",
        "Description": "Specify whether the server's time zone is ahead or not."
      }
    ],
    "Variables produced": [
      {
        "Argument": "FtpFilesAdded",
        "Type": "List of FTP files",
        "Description": "List of FTP files that initially existed in the source and after the synchronization process were added to the target."
      },
      {
        "Argument": "FtpFilesModified",
        "Type": "List of FTP files",
        "Description": "List of FTP files that initially existed in both the source and the target and after the synchronization process were added to the target."
      },
      {
        "Argument": "FtpFilesDeleted",
        "Type": "List of FTP files",
        "Description": "List of FTP files that initially existed in the target directory and after the synchronization process were deleted."
      },
      {
        "Argument": "FilesAdded",
        "Type": "List of Files",
        "Description": "List of files that initially existed in the source and after the synchronization process were added to the target."
      },
      {
        "Argument": "FilesModified",
        "Type": "List of Files",
        "Description": "List of files that initially existed in both the source and the target and after the synchronization process were added to the target."
      },
      {
        "Argument": "FilesDeleted",
        "Type": "List of Files",
        "Description": "List of files that initially existed in the target directory and after the synchronization process were deleted."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Listing error",
        "Description": "Indicates that the listing of the folder couldn't be performed"
      },
      {
        "Exception": "Not connected error",
        "Description": "Indicates that there's no open connection with the FTP server"
      },
      {
        "Exception": "File not found error",
        "Description": "Indicates that the file wasn't found"
      },
      {
        "Exception": "FTP connection aborted error",
        "Description": "Indicates that the FTP connection was aborted"
      },
      {
        "Exception": "Upload file error",
        "Description": "Indicates that the file couldn't be uploaded"
      },
      {
        "Exception": "Remote file doesn't exist error",
        "Description": "Indicates that the file doesn't exist on the FTP server"
      },
      {
        "Exception": "Can't download file error",
        "Description": "Indicates that it wasn't possible to download the file"
      },
      {
        "Exception": "Delete directory error",
        "Description": "Indicates that it wasn't possible to delete the directory"
      },
      {
        "Exception": "Synchronization failed error",
        "Description": "Indicates that the synchronization process failed due to an unexpected error."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Power Automate secret variables",
    "action": "Get credential",
    "description": "Retrieves the values of a credential created through Power Automate's portal page for this environment.",
    "Input parameters": [
      {
        "Argument": "Credential",
        "Type": "Text value",
        "Description": "The credential whose values are retrieved"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The maximum waiting time (in seconds) to get the credential"
      }
    ],
    "Variables produced": [
      {
        "Argument": "Credential",
        "Type": "Credential",
        "Description": "The content of the retrieved credential"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to get credential",
        "Description": "Indicates a problem while retrieving the credential"
      },
      {
        "Exception": "Invalid credentials configuration",
        "Description": "Indicates that the credentials configuration is invalid"
      },
      {
        "Exception": "Credential timed out",
        "Description": "Indicates that the request timed out"
      },
      {
        "Exception": "Failed to contact credentials vault",
        "Description": "Indicates that there was a failure in contacting the credentials vault"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Windows services",
    "action": "If service",
    "description": "Marks the beginning of a conditional block of actions depending on whether a service is running, paused, stopped or installed on the computer.",
    "Input parameters": [
      {
        "Argument": "If service",
        "Type": "Is stopped, Is installed, Isn't installed, Is running, Is paused",
        "Description": "The state of the service to check"
      },
      {
        "Argument": "Service name",
        "Type": "Text value",
        "Description": "The name of the service to check"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Service not found",
        "Description": "Indicates that the service can't be found"
      },
      {
        "Exception": "Can't retrieve status for service",
        "Description": "Indicates that there's a problem retrieving the status of the service"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Windows services",
    "action": "Wait for service",
    "description": "Suspend the execution of the automation until a service is running, paused or stopped on the computer.",
    "Input parameters": [
      {
        "Argument": "Wait for service to",
        "Type": "Stop, Start, Pause",
        "Description": "Specifies whether the flow pauses until a certain service starts, stops or pauses"
      },
      {
        "Argument": "Service name",
        "Type": "Text value",
        "Description": "The name of the service to check"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Service not found",
        "Description": "Indicates that the service can't be found"
      },
      {
        "Exception": "Can't retrieve status for service",
        "Description": "Indicates that there's a problem retrieving the status of the service"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Windows services",
    "action": "Start service",
    "description": "Start a stopped Windows service.",
    "Input parameters": [
      {
        "Argument": "Service to start",
        "Type": "Text value",
        "Description": "The name of the service to start"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Service not found",
        "Description": "Indicates that the service can't be found"
      },
      {
        "Exception": "Service is already running",
        "Description": "Indicates that the service is already running"
      },
      {
        "Exception": "Can't start service",
        "Description": "Indicates that there's a problem starting the service"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Windows services",
    "action": "Stop service",
    "description": "Stop a running Windows service.",
    "Input parameters": [
      {
        "Argument": "Service to stop",
        "Type": "Text value",
        "Description": "The name of the service to stop"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Service not found",
        "Description": "Indicates that the service can't be found"
      },
      {
        "Exception": "Service isn't running",
        "Description": "Indicates that the service isn't running"
      },
      {
        "Exception": "Can't stop service",
        "Description": "Indicates that there's a problem stopping the service"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Windows services",
    "action": "Pause service",
    "description": "Pause a running Windows service.",
    "Input parameters": [
      {
        "Argument": "Service to pause",
        "Type": "Text value",
        "Description": "The name of the service to pause"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Service not found",
        "Description": "Indicates that the service can't be found"
      },
      {
        "Exception": "Service isn't running",
        "Description": "Indicates that the service isn't running"
      },
      {
        "Exception": "Can't pause service",
        "Description": "Indicates that there's a problem pausing the service"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Windows services",
    "action": "Resume service",
    "description": "Resume a paused Windows service.",
    "Input parameters": [
      {
        "Argument": "Service to resume",
        "Type": "Text value",
        "Description": "The name of the service to resume"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Service not found",
        "Description": "Indicates that the service can't be found"
      },
      {
        "Exception": "Service isn't running",
        "Description": "Indicates that the service isn't running"
      },
      {
        "Exception": "Can't resume service",
        "Description": "Indicates that there's a problem resuming the service"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Conditionals",
    "action": "Case",
    "description": "An expression that, if met, a block of actions associated with that particular case runs.",
    "Input parameters": [
      {
        "Argument": "Operator",
        "Type": "Equal to (=), Not equal to (<>), Greater than (>), Greater than or equal to (>=), Less than (<), Less than or equal to (<=), Contains, Does not contain, Is empty, Is not empty, Starts with, Does not start with, Ends with, Does not end with, Is blank, Is not blank",
        "Description": "The comparison operator of this case"
      },
      {
        "Argument": "Value to compare",
        "Type": "*",
        "Description": "Enter a value to compare with the switch-block value"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Conditionals",
    "action": "Else if",
    "description": "Marks the beginning of a block of actions that run if the conditions specified in the preceding 'If' statements aren't met, but the condition specified in this statement is met.",
    "Input parameters": [
      {
        "Argument": "Operator",
        "Type": "Equal to (=), Not equal to (<>), Greater than (>), Greater than or equal to (>=), Less than (<), Less than or equal to (<=), Contains, Does not contain, Is empty, Is not empty, Starts with, Does not start with, Ends with, Does not end with, Is blank, Is not blank",
        "Description": "Choose the relationship of first operand to the second operand."
      },
      {
        "Argument": "First operand",
        "Type": "*",
        "Description": "Enter a value name defined by a previous action, text, number or expression to compare with the second operand."
      },
      {
        "Argument": "Second operand",
        "Type": "*",
        "Description": "Enter a value name produced by a previous action, text, number or expression to compare with the first operand."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Conditionals",
    "action": "If",
    "description": "Marks the beginning of a block of actions that is run if the condition specified in this statement is met.",
    "Input parameters": [
      {
        "Argument": "Operator",
        "Type": "Equal to (=), Not equal to (<>), Greater than (>), Greater than or equal to (>=), Less than (<), Less than or equal to (<=), Contains, Does not contain, Is empty, Is not empty, Starts with, Does not start with, Ends with, Does not end with, Is blank, Is not blank",
        "Description": "Choose the relationship of first operand to the second operand."
      },
      {
        "Argument": "First operand",
        "Type": "*",
        "Description": "Enter a value name defined by a previous action, text, number or expression to compare with the second operand."
      },
      {
        "Argument": "Second operand",
        "Type": "*",
        "Description": "Enter a value name produced by a previous action, text, number or expression to compare with the first operand."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Conditionals",
    "action": "Switch",
    "description": "Dispatches execution to different parts of the switch body based on the value of the expression.",
    "Input parameters": [
      {
        "Argument": "Value to check",
        "Type": "*",
        "Description": "Enter a value name, text, or number to compare with the following cases."
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Google Cognitive",
    "action": "Analyze sentiment",
    "description": "Invokes the Google Cloud Natural Language service named 'Analyze Sentiment'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The Google Cloud API key to be used for this API call"
      },
      {
        "Argument": "Document type",
        "Type": "Plain text, HTML",
        "Description": "The type of document to transmit"
      },
      {
        "Argument": "Provide document",
        "Type": "From file, From GCS",
        "Description": "Specify whether the document will be provided by a full path or a Google Cloud Storage URI"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the document to transmit"
      },
      {
        "Argument": "GCS Content URI",
        "Type": "Text value",
        "Description": "The URI of the image residing on Google Cloud Storage"
      },
      {
        "Argument": "Language",
        "Type": "Text value",
        "Description": "The language of the text"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      },
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Google Cognitive",
    "action": "Analyze entities",
    "description": "Invokes the Google Cloud Natural Language service named 'Analyze Entities'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The Google Cloud API key to be used for this API call"
      },
      {
        "Argument": "Document type",
        "Type": "Plain text, HTML",
        "Description": "The type of the document to transmit"
      },
      {
        "Argument": "Provide file",
        "Type": "From file, From GCS",
        "Description": "Specify whether the document will be provided by a full path or a Google Cloud Storage URI"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the document to transmit"
      },
      {
        "Argument": "GCS URL",
        "Type": "Text value",
        "Description": "The URI of the document residing on Google Cloud Storage"
      },
      {
        "Argument": "Language",
        "Type": "Text value",
        "Description": "The language of the text"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      },
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Google Cognitive",
    "action": "Analyze syntax",
    "description": "Invokes the Google Cloud Natural Language service named 'Analyze Syntax'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The Google Cloud API key to be used for this API call"
      },
      {
        "Argument": "Document type",
        "Type": "Plain text, HTML",
        "Description": "The type of document to transmit"
      },
      {
        "Argument": "Provide document",
        "Type": "From file, From GCS",
        "Description": "Specify whether the document will be provided by a full path or a Google Cloud Storage URI"
      },
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the document to transmit"
      },
      {
        "Argument": "GCS Content URI",
        "Type": "Text value",
        "Description": "The URI of the image residing on Google Cloud Storage"
      },
      {
        "Argument": "Language",
        "Type": "Text value",
        "Description": "The language of the text"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      },
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Google Cognitive",
    "action": "Label detection",
    "description": "Invokes the Google Cloud Vision service named 'Label Detection'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The Google Cloud API key to be used for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a Google Cloud Storage URI"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "GCS Image URI",
        "Type": "Text value",
        "Description": "The URI of the image residing on Google Cloud Storage"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      },
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Google Cognitive",
    "action": "Landmark detection",
    "description": "Invokes the Google Cloud Vision service named 'Landmark Detection'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The Google Cloud API key to be used for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a Google Cloud Storage URI"
      },
      {
        "Argument": "Image file path",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "GCS Image URI",
        "Type": "Text value",
        "Description": "The URI of the image residing on Google Cloud Storage"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      },
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Google Cognitive",
    "action": "Text Detection",
    "description": "Invokes the Google Cloud Vision service named 'Text Detection'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The Google Cloud API key to be used for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a Google Cloud Storage URI"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "GCS Image URI",
        "Type": "Text value",
        "Description": "The URI of the image residing on Google Cloud Storage"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      },
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Google Cognitive",
    "action": "Logo detection",
    "description": "Invokes the Google Cloud Vision service named 'Logo Detection'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The Google Cloud API key to be used for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a Google Cloud Storage URI"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "GCS Image URI",
        "Type": "Text value",
        "Description": "The URI of the image residing on Google Cloud Storage"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      },
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Google Cognitive",
    "action": "Image properties detection",
    "description": "Invokes the Google Cloud Vision service named 'Image Properties Detection'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The Google Cloud API key to be used for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a Google Cloud Storage URI"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "GCS Image URI",
        "Type": "Text value",
        "Description": "The URI of the image residing on Google Cloud Storage"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      },
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Google Cognitive",
    "action": "Safe search detection",
    "description": "Invokes the Google Cloud Vision service named 'Safe Search Detection'.",
    "Input parameters": [
      {
        "Argument": "API key",
        "Type": "Text value",
        "Description": "The Google Cloud API key to be used for this API call"
      },
      {
        "Argument": "Provide image",
        "Type": "From file, From GCS",
        "Description": "Specify whether the image will be provided by a full path or a Google Cloud Storage URI"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path (folder plus filename) of the image file to transmit"
      },
      {
        "Argument": "GCS Image URI",
        "Type": "Text value",
        "Description": "The URI of the image residing on Google Cloud Storage"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before it fails"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response results"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to Invoke cognitive services",
        "Description": "Indicates a problem while trying to invoke Cognitive Services"
      },
      {
        "Exception": "Request timeout expired",
        "Description": "Indicates that the timeout expired while performing the request"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "PDF",
    "action": "Extract text from PDF",
    "description": "You can extract text from a PDF file by using the \"Extract text from PDF\" action. In the action properties you can define the source PDF file and the pages that text should be extracted from. Under the advanced action properties you can define a password in case the PDF file is protected and if the engine should optimize for structured data or not.",
    "Input parameters": [
      {
        "Argument": "PDF file",
        "Type": "File",
        "Description": "The PDF file to extract text from. Enter a file path, a variable containing a file or a text path"
      },
      {
        "Argument": "Page(s) to extract",
        "Type": "All, Single, Range",
        "Description": "Specifies how many pages to extract: All pages, a single page or a range of pages"
      },
      {
        "Argument": "Single page number",
        "Type": "Numeric value",
        "Description": "The number of the single page to extract text from"
      },
      {
        "Argument": "From page number",
        "Type": "Numeric value",
        "Description": "The first page number from the range of pages to extract text from"
      },
      {
        "Argument": "To page number",
        "Type": "Numeric value",
        "Description": "The last page number from the range of pages to extract text from"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password of the PDF file. Leave this blank if the PDF isn't password protected"
      },
      {
        "Argument": "Optimize for structured data",
        "Type": "Boolean value",
        "Description": "Specify whether to detect formatted layout in the document and extract text accordingly"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExtractedPDFText",
        "Type": "Text value",
        "Description": "The extracted text"
      }
    ],
    "Exceptions": [
      {
        "Exception": "PDF file doesn't exist",
        "Description": "File doesn't exist on the given path"
      },
      {
        "Exception": "Invalid password",
        "Description": "The given password is invalid"
      },
      {
        "Exception": "Failed to extract text",
        "Description": "Error while trying to extract text"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "PDF",
    "action": "Extract tables from PDF",
    "description": "You can extract tables that are contained in a PDF file by using the Extract tables from PDF action. In the action properties you can define the PDF file and the range of pages that the tables will be extracted from. Under the advanced action properties you can define a password in case a the PDF file is protected, define if the table has headers or not, and finally if tables that cross page margins should be merged or not.",
    "Input parameters": [
      {
        "Argument": "PDF file",
        "Type": "File",
        "Description": "The PDF file to extract tables from. Enter a file path, a variable containing a file or a text path"
      },
      {
        "Argument": "Page(s) to extract",
        "Type": "All, Single, Range",
        "Description": "Specifies how many pages to extract tables from: all pages, a single page or a range of pages"
      },
      {
        "Argument": "Single page number",
        "Type": "Numeric value",
        "Description": "The number of the single page to extract tables from"
      },
      {
        "Argument": "From page number",
        "Type": "Numeric value",
        "Description": "The first page number from the range of pages to extract tables from"
      },
      {
        "Argument": "To page number",
        "Type": "Numeric value",
        "Description": "The last page number from the range of pages to extract tables from"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password of the PDF file. Leave this blank if the PDF isn't password protected"
      },
      {
        "Argument": "Merge tables that cross page margins",
        "Type": "Boolean value",
        "Description": "Specifies whether to merge tables that cross page margins in the specified page range"
      },
      {
        "Argument": "First line contains column names",
        "Type": "Boolean value",
        "Description": "Specifies whether the first line of table contains column names"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExtractedPDFTables",
        "Type": "List of PDF table info",
        "Description": "The extracted tables with their info as a list"
      }
    ],
    "Exceptions": [
      {
        "Exception": "PDF file doesn't exist",
        "Description": "File doesn't exist on the given path"
      },
      {
        "Exception": "Invalid password",
        "Description": "The given password is invalid"
      },
      {
        "Exception": "Failed to extract tables",
        "Description": "Error while trying to extract tables"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "PDF",
    "action": "Extract images from PDF",
    "description": "To extract images from a PDF file you can use the Extract images from PDF action. In the action parameters you can define the PDF file and the pages to extract images from, the naming convention of the extacted images and the target location of the saved images. You can also define a password if the PDF file is protected under the advanced settings.",
    "Input parameters": [
      {
        "Argument": "PDF file",
        "Type": "File",
        "Description": "The PDF file to extract images from. Enter a file path, a variable containing a file or a text path"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password of the PDF file. Leave this blank if the PDF isn't password protected"
      },
      {
        "Argument": "Page(s) to extract",
        "Type": "All, Single, Range",
        "Description": "Specifies how many pages to extract: All pages, a single page or a range of pages"
      },
      {
        "Argument": "Single page number",
        "Type": "Numeric value",
        "Description": "The number of the single page to extract images from"
      },
      {
        "Argument": "From page number",
        "Type": "Numeric value",
        "Description": "The first page number from the range of pages to extract images from"
      },
      {
        "Argument": "To page number",
        "Type": "Numeric value",
        "Description": "The last page number from the range of pages to extract images from"
      },
      {
        "Argument": "Image(s) name",
        "Type": "Text value",
        "Description": "How the name of the image(s) starts. Extracted image(s) name example: GivenName_1, GivenName_2"
      },
      {
        "Argument": "Save image(s) to",
        "Type": "Folder",
        "Description": "The folder to save the extracted images as png files"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid password",
        "Description": "The given password is invalid"
      },
      {
        "Exception": "Failed to extract images",
        "Description": "Indicates that an error occurred while extracting images from the given pages of the PDF"
      },
      {
        "Exception": "Folder doesn't exist",
        "Description": "Indicates that the folder doesn't exist"
      },
      {
        "Exception": "PDF file doesn't exist",
        "Description": "File doesn't exist on the given path"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "PDF",
    "action": "Extract PDF file pages to new PDF file",
    "description": "You can create a new PDF file by extracting pages from an existing PDF file by using the PDF file pages to a new PDF file action. In the action parameters you can define the PDF file to extract the pages from, the page(s) to be extracted, the location of the new PDF file and what should happen if a file with the same name and extension already exists. Finally, under the advanced properties you can define a password in case the source PDF is protected.",
    "Input parameters": [
      {
        "Argument": "PDF file",
        "Type": "File",
        "Description": "The PDF file to extract pages from. Enter a file path, a variable containing a file or a text path"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password of the PDF file. Leave this blank if the PDF isn't password protected"
      },
      {
        "Argument": "Page selection",
        "Type": "Text value",
        "Description": "The index numbers of the pages to keep (for example, 1,3,17-24)"
      },
      {
        "Argument": "Extracted PDF path",
        "Type": "File",
        "Description": "The path to store the extracted PDF file"
      },
      {
        "Argument": "If file exists",
        "Type": "Overwrite, Don't overwrite, Add sequential suffix",
        "Description": "Specifies what to do in case the output PDF file already exists"
      }
    ],
    "Variables produced": [
      {
        "Argument": "ExtractedPDF",
        "Type": "File",
        "Description": "The new PDF file"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Invalid password",
        "Description": "The given password is invalid"
      },
      {
        "Exception": "PDF file doesn't exist",
        "Description": "File doesn't exist on the given path"
      },
      {
        "Exception": "Page out of bounds",
        "Description": "Indicates that one or more pages are out of bounds of the PDF file"
      },
      {
        "Exception": "Invalid page selection",
        "Description": "Indicates that the given pages aren't valid for the PDF file"
      },
      {
        "Exception": "Failed to extract new PDF",
        "Description": "Indicates that an error occurred while trying to extract new PDF"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "PDF",
    "action": "Merge PDF files",
    "description": "Merges multiple PDF files into a new one.",
    "Input parameters": [
      {
        "Argument": "PDF files",
        "Type": "List of Files",
        "Description": "The files to merge. Enclose multiple files in double quotes (\") and separate them by a delimiter, or use a list of files"
      },
      {
        "Argument": "Merged PDF path",
        "Type": "File",
        "Description": "The path to store the merged PDF"
      },
      {
        "Argument": "If file exists",
        "Type": "Overwrite, Don't overwrite, Add sequential suffix",
        "Description": "Specifies what to do in case the destination file already exists"
      },
      {
        "Argument": "Passwords",
        "Type": "Direct encrypted input or Text value",
        "Description": "The delimited passwords. The order should be the same as the order of the input PDFs. Leave this blank if the PDFs aren't password protected"
      },
      {
        "Argument": "Delimiter",
        "Type": "Text value",
        "Description": "A custom password delimiter. This delimiter shouldn't be part of any of the passwords"
      }
    ],
    "Variables produced": [
      {
        "Argument": "MergedPDF",
        "Type": "File",
        "Description": "The merged PDF file"
      }
    ],
    "Exceptions": [
      {
        "Exception": "PDF file doesn't exist",
        "Description": "File doesn't exist on the given path"
      },
      {
        "Exception": "Invalid password",
        "Description": "The given password is invalid"
      },
      {
        "Exception": "Failed to merge PDF files",
        "Description": "Indicates that an error occurred while merging the files"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Print document",
    "description": "Prints a document on the default printer.",
    "Input parameters": [
      {
        "Argument": "Document to print",
        "Type": "File",
        "Description": "The path of the document to print"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Document not found",
        "Description": "Indicates that the specified document wasn't found"
      },
      {
        "Exception": "Access denied for document",
        "Description": "Indicates that access was denied for the provided document"
      },
      {
        "Exception": "Can't print document",
        "Description": "Indicates a problem printing the specified document"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Get default printer",
    "description": "Gets the name of the default printer.",
    "Input parameters": [],
    "Variables produced": [
      {
        "Argument": "PrinterName",
        "Type": "Text value",
        "Description": "The name of the default printer"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Can't get default printer",
        "Description": "Indicates a problem getting the default printer"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Set default printer",
    "description": "Sets a printer as the default printer.",
    "Input parameters": [
      {
        "Argument": "Printer name",
        "Type": "Text value",
        "Description": "The name of the printer to set as default"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't set default printer",
        "Description": "Indicates a problem setting the default printer"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Show desktop",
    "description": "Shows the desktop.",
    "Input parameters": [
      {
        "Argument": "Operation",
        "Type": "Minimize all windows (show desktop), Restore all windows (undo show desktop)",
        "Description": "Specify whether to minimize all windows to reveal the desktop or restore all windows to their original respective states"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Lock workstation",
    "description": "Locks the workstation's display to protect it from unauthorized use.",
    "Input parameters": [],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't lock the computer in non interactive mode",
        "Description": "Indicates a problem locking the computer in non interactive mode"
      },
      {
        "Exception": "Can't lock the computer",
        "Description": "Indicates a problem locking the computer in non-interactive mode"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Play sound",
    "description": "Plays a system sound or a wav file.",
    "Input parameters": [
      {
        "Argument": "Play sound from",
        "Type": "System, WAV file",
        "Description": "The type of sound to play"
      },
      {
        "Argument": "Sound to play",
        "Type": "Asterisk, Beep, Exclamation, Hand, Question",
        "Description": "The specific sound to play"
      },
      {
        "Argument": "File to play",
        "Type": "File",
        "Description": "The full path of the specific WAV file to play"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't find sound file",
        "Description": "Indicates that the sound file couldn't be found"
      },
      {
        "Exception": "Invalid sound file",
        "Description": "Indicates an invalid sound file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Take screenshot",
    "description": "Takes a screenshot of the foreground window or the specified screen and saves the image in a file or to the clipboard.",
    "Input parameters": [
      {
        "Argument": "Capture",
        "Type": "All screens, Primary screen, Select screen, Foreground window",
        "Description": "The area to capture"
      },
      {
        "Argument": "Screen to capture",
        "Type": "Numeric value",
        "Description": "Specify which screen to capture"
      },
      {
        "Argument": "Save screenshot to",
        "Type": "Clipboard, File",
        "Description": "The location to save the screenshot to"
      },
      {
        "Argument": "Image file",
        "Type": "File",
        "Description": "The full path of the file name where the captured image will be saved"
      },
      {
        "Argument": "Image format",
        "Type": "BMP, EMF, EXIF, GIF, JPG, PNG, TIFF, WMF",
        "Description": "The format for the image file to save"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to take screenshot",
        "Description": "Indicates a problem taking the screenshot"
      },
      {
        "Exception": "Failed to save screenshot to file",
        "Description": "Indicates a problem saving the screenshot to a file"
      },
      {
        "Exception": "Failed to set screenshot to clipboard",
        "Description": "Indicates a problem setting the screenshot to the clipboard"
      },
      {
        "Exception": "Failed to get specified screen",
        "Description": "Indicates a problem getting the specified screen"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Control screen saver",
    "description": "Enables, disables, starts or stops the screensaver.",
    "Input parameters": [
      {
        "Argument": "Screen saver action",
        "Type": "Enable, Disable, Start, Stop",
        "Description": "The function of the screensaver"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Get screen resolution",
    "description": "Gets the width, height, bit count and frequency of a selected monitor.",
    "Input parameters": [
      {
        "Argument": "Monitor number",
        "Type": "Numeric value",
        "Description": "The number of the monitor to get the resolution of"
      }
    ],
    "Variables produced": [
      {
        "Argument": "MonitorWidth",
        "Type": "Numeric value",
        "Description": "The width of the monitor"
      },
      {
        "Argument": "MonitorHeight",
        "Type": "Numeric value",
        "Description": "The height of the monitor"
      },
      {
        "Argument": "MonitorBitCount",
        "Type": "Numeric value",
        "Description": "The monitor bit count"
      },
      {
        "Argument": "MonitorFrequency",
        "Type": "Numeric value",
        "Description": "The monitor frequency"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to get the screen's resolution",
        "Description": "Indicates a problem getting the screen's resolution"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Set screen resolution",
    "description": "Sets the width, height, bit count and frequency of a selected monitor during an attended desktop flow run.",
    "Input parameters": [
      {
        "Argument": "Monitor number",
        "Type": "Numeric value",
        "Description": "The number of monitor to set the resolution of"
      },
      {
        "Argument": "Monitor width",
        "Type": "Numeric value",
        "Description": "The value to set the monitor width to"
      },
      {
        "Argument": "Monitor height",
        "Type": "Numeric value",
        "Description": "The value to set the monitor height to"
      },
      {
        "Argument": "Monitor bit count",
        "Type": "Numeric value",
        "Description": "The value to set the monitor bit count to"
      },
      {
        "Argument": "Monitor frequency",
        "Type": "Numeric value",
        "Description": "The value to set the monitor frequency to"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to set the screen's resolution",
        "Description": "Indicates a problem setting the screen's resolution"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Log off user",
    "description": "Logs off the current user.",
    "Input parameters": [
      {
        "Argument": "Force log off",
        "Type": "Boolean value",
        "Description": "Specify whether to force the user account to log off, regardless of unsaved files or programs that won't close"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't log off user in non interactive mode",
        "Description": "Indicates a problem logging off the user in non-interactive mode"
      },
      {
        "Exception": "Can't log off the current user",
        "Description": "Indicates a problem logging off the current user"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workstation",
    "action": "Shutdown computer",
    "description": "Instructs the computer to shut down.",
    "Input parameters": [
      {
        "Argument": "Action to perform",
        "Type": "Shutdown, Restart, Suspend, Hibernate",
        "Description": "Specify which shutdown option the computer will perform"
      },
      {
        "Argument": "Force",
        "Type": "Boolean value",
        "Description": "Specify whether to force the computer to shut down, regardless of unsaved files or programs that won't close"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Can't shut down the computer",
        "Description": "Indicates a problem shutting down the computer"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "HTTP",
    "action": "Download from web",
    "description": "Downloads text or a file from the web and stores it.",
    "Input parameters": [
      {
        "Argument": "URL",
        "Type": "Text value",
        "Description": "The web page or file's URL"
      },
      {
        "Argument": "Method",
        "Type": "GET, POST",
        "Description": "Specify how to retrieve a website's information. GET should be used when all information needed is in the URL, and POST to enter more information (passwords, etc.)"
      },
      {
        "Argument": "Post parameters",
        "Type": "Datatable",
        "Description": "The POST parameters in the form of a datatable with two columns"
      },
      {
        "Argument": "Save response",
        "Type": "Get text into variable (for web pages), Save to disk (for files)",
        "Description": "Specify how the returned data will be saved"
      },
      {
        "Argument": "File name",
        "Type": "Keep original file name (specify only destination folder), Specify full path (destination folder + custom file name)",
        "Description": "Specify whether to keep the original file name of the downloaded file or specify a new name"
      },
      {
        "Argument": "Destination folder",
        "Type": "Folder",
        "Description": "The folder where the file returned from the web server will be saved"
      },
      {
        "Argument": "Destination file path",
        "Type": "File",
        "Description": "The full path (folder plus filename) where the file returned by the web server will be stored"
      },
      {
        "Argument": "Connection timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before giving up"
      },
      {
        "Argument": "Follow redirection",
        "Type": "Boolean value",
        "Description": "Specify whether to allow the web server to redirect you to another web page or website"
      },
      {
        "Argument": "Clear cookies",
        "Type": "Boolean value",
        "Description": "Specify whether to clear all cookies created by similar actions during this automation"
      },
      {
        "Argument": "User agent",
        "Type": "Text value",
        "Description": "Specify which browser identity to be seen as. Some web servers won't allow access unless a browser identity is chosen"
      },
      {
        "Argument": "Encoding",
        "Type": "Auto - detect, IBM037: IBM EBCDIC (US-Canada), IBM437: OEM United States, IBM500: IBM EBCDIC (International), ASMO-708: Arabic (ASMO 708), DOS-720: Arabic (DOS), ibm737: Greek (DOS), ibm775: Baltic (DOS), ibm850: Western European (DOS), ibm852: Central European (DOS), IBM855: OEM Cyrillic, ibm857: Turkish (DOS), IBM00858: OEM Multilingual Latin I, IBM860: Portuguese (DOS), ibm861: Icelandic (DOS), DOS-862: Hebrew (DOS), IBM863: French Canadian (DOS), IBM864: Arabic (864), IBM865: Nordic (DOS), cp866: Cyrillic (DOS), ibm869: Greek, Modern (DOS), IBM870: IBM EBCDIC (Multilingual Latin-2), windows-874: Thai (Windows), cp875: IBM EBCDIC (Greek Modern), shift_jis: Japanese (Shift-JIS), gb2312: Chinese Simplified (GB2312), ks_c_5601-1987: Korean, big5: Chinese Traditional (Big5), IBM1026: IBM EBCDIC (Turkish Latin-5), IBM01047: IBM Latin-1, IBM01140: IBM EBCDIC (US-Canada-Euro), IBM01141: IBM EBCDIC (Germany-Euro), IBM01142: IBM EBCDIC (Denmark-Norway-Euro), IBM01143: IBM EBCDIC (Finland-Sweden-Euro), IBM01144: IBM EBCDIC (Italy Euro), IBM01145: IBM EBCDIC (Spain-Euro), IBM01146: IBM EBCDIC (UK-Euro), IBM01147: IBM EBCDIC (France-Euro), IBM01148: IBM EBCDIC (International-Euro), IBM01149: IBM EBCDIC (Icelandic-Euro), utf-16: Unicode, utf-16BE: Unicode (Big-Endian), windows-1250: Central European (Windows), windows-1251: Cyrillic (Windows), Windows-1252: Western European (Windows), windows-1253: Greek (Windows), windows-1254: Turkish (Windows), windows-1255: Hebrew (Windows), windows-1256: Arabic (Windows), windows-1257: Baltic (Windows), windows-1258: Vietnamese (Windows), Johab: Korean (Johab), macintosh: Western European (Mac), x-mac-japanese: Japanese (Mac), x-mac-chinesetrad: Chinese Traditional (Mac), x-mac-korean: Korean (Mac), x-mac-arabic: Arabic (Mac), x-mac-hebrew: Hebrew (Mac), x-mac-greek: Greek (Mac), x-mac-cyrillic: Cyrillic (Mac), x-mac-chinesesimp: Chinese Simplified (Mac), x-mac-romanian: Romanian (Mac), x-mac-ukrainian: Ukrainian (Mac), x-mac-thai: Thai (Mac), x-mac-ce: Central European (Mac), x-mac-icelandic: Icelandic (Mac), x-mac-turkish: Turkish (Mac), x-mac-croatian: Croatian (Mac), utf-32: Unicode (UTF-32), utf-32BE: Unicode (UTF-32 Big-Endian), x-Chinese-CNS: Chinese Traditional (CNS), x-cp20001: TCA Taiwan, x-Chinese-Eten: Chinese Traditional (Eten), x-cp20003: IBM5550 Taiwan, x-cp20004: TeleText Taiwan, x-cp20005: Wang Taiwan, x-IA5: Western European (IA5), x-IA5-German: German (IA5), x-IA5-Swedish: Swedish (IA5), x-IA5-Norwegian: Norwegian (IA5), us-ascii: US-ASCII, x-cp20261: T.61, x-cp20269: ISO-6937, IBM273: IBM EBCDIC (Germany), IBM277: IBM EBCDIC (Denmark-Norway), IBM278: IBM EBCDIC (Finland-Sweden), IBM280: IBM EBCDIC (Italy), IBM284: IBM EBCDIC (Spain), IBM285: IBM EBCDIC (UK), IBM290: IBM EBCDIC (Japanese katakana), IBM297: IBM EBCDIC (France), IBM420: IBM EBCDIC (Arabic), IBM423: IBM EBCDIC (Greek), IBM424: IBM EBCDIC (Hebrew), x-EBCDIC-KoreanExtended: IBM EBCDIC (Korean Extended), IBM-Thai: IBM EBCDIC (Thai), koi8-r: Cyrillic (KOI8-R), IBM871: IBM EBCDIC (Icelandic), IBM880: IBM EBCDIC (Cyrillic Russian), IBM905: IBM EBCDIC (Turkish), IBM00924: IBM Latin-1, EUC-JP: Japanese (JIS 0208-1990 and 0212-1990), x-cp20936: Chinese Simplified (GB2312-80), x-cp20949: Korean Wansung, cp1025: IBM EBCDIC (Cyrillic Serbian-Bulgarian), koi8-u: Cyrillic (KOI8-U), iso-8859-1: Western European (ISO), iso-8859-2: Central European (ISO), iso-8859-3: Latin 3 (ISO), iso-8859-4: Baltic (ISO), iso-8859-5: Cyrillic (ISO), iso-8859-6: Arabic (ISO), iso-8859-7: Greek (ISO), iso-8859-8: Hebrew (ISO-Visual), iso-8859-9: Turkish (ISO), iso-8859-13: Estonian (ISO), iso-8859-15: Latin 9 (ISO), x-Europa: Europa, iso-8859-8-i: Hebrew (ISO-Logical), iso-2022-jp: Japanese (JIS), csISO2022JP: Japanese (JIS-Allow 1 byte Kana), iso-2022-jp: Japanese (JIS-Allow 1 byte Kana - SO/SI), iso-2022-kr: Korean (ISO), x-cp50227: Chinese Simplified (ISO-2022), euc-jp: Japanese (EUC), EUC-CN: Chinese Simplified (EUC), euc-kr: Korean (EUC), hz-gb-2312: Chinese Simplified (HZ), GB18030: Chinese Simplified (GB18030), x-iscii-de: ISCII Devanagari, x-iscii-be: ISCII Bengali, x-iscii-ta: ISCII Tamil, x-iscii-te: ISCII Telugu, x-iscii-as: ISCII Assamese, x-iscii-or: ISCII Oriya, x-iscii-ka: ISCII Kannada, x-iscii-ma: ISCII Malayalam, x-iscii-gu: ISCII Gujarati, x-iscii-pa: ISCII Punjabi, utf-7: Unicode (UTF-7), utf-8: Unicode (UTF-8)",
        "Description": "The encoding used for the web page. If the Auto-detect option is chosen, the encoding to be used will be specified by the web server"
      },
      {
        "Argument": "Accept untrusted certificates",
        "Type": "Boolean value",
        "Description": "Specify whether untrusted certificates will be accepted"
      },
      {
        "Argument": "Use credentials",
        "Type": "Boolean value",
        "Description": "Specify whether the web server requires authentication. This property refers to HTTP authentication (that is, when the browser displays a popup window asking for user name and password)"
      },
      {
        "Argument": "User name",
        "Type": "Text value",
        "Description": "The user name for the web server"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password for the web server"
      }
    ],
    "Variables produced": [
      {
        "Argument": "DownloadedFile",
        "Type": "File",
        "Description": "The downloaded file"
      },
      {
        "Argument": "WebPageText",
        "Type": "Text value",
        "Description": "The web page text"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Directory doesn't exist",
        "Description": "Indicates that a required directory doesn't exist"
      },
      {
        "Exception": "Download from web error",
        "Description": "Indicates a problem downloading from web"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "HTTP",
    "action": "Invoke SOAP web service",
    "description": "Invokes a method from a SOAP web service.",
    "Input parameters": [
      {
        "Argument": "Endpoint",
        "Type": "Text value",
        "Description": "The endpoint of the web service"
      },
      {
        "Argument": "Custom headers",
        "Type": "Text value",
        "Description": "The custom headers to be included in the request that will be sent to the web service"
      },
      {
        "Argument": "Request body",
        "Type": "Text value",
        "Description": "The body of the request that will be sent to the web service"
      },
      {
        "Argument": "Connection timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server"
      },
      {
        "Argument": "Follow redirection",
        "Type": "Boolean value",
        "Description": "Specify whether to allow the web server to redirect you to another web service"
      },
      {
        "Argument": "Clear cookies",
        "Type": "Boolean value",
        "Description": "Specify whether to clear all cookies previously created by similar actions during this flow"
      },
      {
        "Argument": "Fail on error status",
        "Type": "Boolean value",
        "Description": "Specify whether the responses of the invoked web service that denote errors will be processed as if they were normal responses (suppressing all exceptions) or will result in the related exceptions"
      },
      {
        "Argument": "User agent",
        "Type": "Text value",
        "Description": "Specify which browser identity to be seen as. Some web servers won't allow access unless a browser identity is chosen"
      },
      {
        "Argument": "User agent",
        "Type": "Text value",
        "Description": "Specify which browser identity to be seen as. Some web servers won't allow access unless a browser identity is chosen"
      },
      {
        "Argument": "Encoding",
        "Type": "Auto - detect, IBM037: IBM EBCDIC (US-Canada), IBM437: OEM United States, IBM500: IBM EBCDIC (International), ASMO-708: Arabic (ASMO 708), DOS-720: Arabic (DOS), ibm737: Greek (DOS), ibm775: Baltic (DOS), ibm850: Western European (DOS), ibm852: Central European (DOS), IBM855: OEM Cyrillic, ibm857: Turkish (DOS), IBM00858: OEM Multilingual Latin I, IBM860: Portuguese (DOS), ibm861: Icelandic (DOS), DOS-862: Hebrew (DOS), IBM863: French Canadian (DOS), IBM864: Arabic (864), IBM865: Nordic (DOS), cp866: Cyrillic (DOS), ibm869: Greek, Modern (DOS), IBM870: IBM EBCDIC (Multilingual Latin-2), windows-874: Thai (Windows), cp875: IBM EBCDIC (Greek Modern), shift_jis: Japanese (Shift-JIS), gb2312: Chinese Simplified (GB2312), ks_c_5601-1987: Korean, big5: Chinese Traditional (Big5), IBM1026: IBM EBCDIC (Turkish Latin-5), IBM01047: IBM Latin-1, IBM01140: IBM EBCDIC (US-Canada-Euro), IBM01141: IBM EBCDIC (Germany-Euro), IBM01142: IBM EBCDIC (Denmark-Norway-Euro), IBM01143: IBM EBCDIC (Finland-Sweden-Euro), IBM01144: IBM EBCDIC (Italy Euro), IBM01145: IBM EBCDIC (Spain-Euro), IBM01146: IBM EBCDIC (UK-Euro), IBM01147: IBM EBCDIC (France-Euro), IBM01148: IBM EBCDIC (International-Euro), IBM01149: IBM EBCDIC (Icelandic-Euro), utf-16: Unicode, utf-16BE: Unicode (Big-Endian), windows-1250: Central European (Windows), windows-1251: Cyrillic (Windows), Windows-1252: Western European (Windows), windows-1253: Greek (Windows), windows-1254: Turkish (Windows), windows-1255: Hebrew (Windows), windows-1256: Arabic (Windows), windows-1257: Baltic (Windows), windows-1258: Vietnamese (Windows), Johab: Korean (Johab), macintosh: Western European (Mac), x-mac-japanese: Japanese (Mac), x-mac-chinesetrad: Chinese Traditional (Mac), x-mac-korean: Korean (Mac), x-mac-arabic: Arabic (Mac), x-mac-hebrew: Hebrew (Mac), x-mac-greek: Greek (Mac), x-mac-cyrillic: Cyrillic (Mac), x-mac-chinesesimp: Chinese Simplified (Mac), x-mac-romanian: Romanian (Mac), x-mac-ukrainian: Ukrainian (Mac), x-mac-thai: Thai (Mac), x-mac-ce: Central European (Mac), x-mac-icelandic: Icelandic (Mac), x-mac-turkish: Turkish (Mac), x-mac-croatian: Croatian (Mac), utf-32: Unicode (UTF-32), utf-32BE: Unicode (UTF-32 Big-Endian), x-Chinese-CNS: Chinese Traditional (CNS), x-cp20001: TCA Taiwan, x-Chinese-Eten: Chinese Traditional (Eten), x-cp20003: IBM5550 Taiwan, x-cp20004: TeleText Taiwan, x-cp20005: Wang Taiwan, x-IA5: Western European (IA5), x-IA5-German: German (IA5), x-IA5-Swedish: Swedish (IA5), x-IA5-Norwegian: Norwegian (IA5), us-ascii: US-ASCII, x-cp20261: T.61, x-cp20269: ISO-6937, IBM273: IBM EBCDIC (Germany), IBM277: IBM EBCDIC (Denmark-Norway), IBM278: IBM EBCDIC (Finland-Sweden), IBM280: IBM EBCDIC (Italy), IBM284: IBM EBCDIC (Spain), IBM285: IBM EBCDIC (UK), IBM290: IBM EBCDIC (Japanese katakana), IBM297: IBM EBCDIC (France), IBM420: IBM EBCDIC (Arabic), IBM423: IBM EBCDIC (Greek), IBM424: IBM EBCDIC (Hebrew), x-EBCDIC-KoreanExtended: IBM EBCDIC (Korean Extended), IBM-Thai: IBM EBCDIC (Thai), koi8-r: Cyrillic (KOI8-R), IBM871: IBM EBCDIC (Icelandic), IBM880: IBM EBCDIC (Cyrillic Russian), IBM905: IBM EBCDIC (Turkish), IBM00924: IBM Latin-1, EUC-JP: Japanese (JIS 0208-1990 and 0212-1990), x-cp20936: Chinese Simplified (GB2312-80), x-cp20949: Korean Wansung, cp1025: IBM EBCDIC (Cyrillic Serbian-Bulgarian), koi8-u: Cyrillic (KOI8-U), iso-8859-1: Western European (ISO), iso-8859-2: Central European (ISO), iso-8859-3: Latin 3 (ISO), iso-8859-4: Baltic (ISO), iso-8859-5: Cyrillic (ISO), iso-8859-6: Arabic (ISO), iso-8859-7: Greek (ISO), iso-8859-8: Hebrew (ISO-Visual), iso-8859-9: Turkish (ISO), iso-8859-13: Estonian (ISO), iso-8859-15: Latin 9 (ISO), x-Europa: Europa, iso-8859-8-i: Hebrew (ISO-Logical), iso-2022-jp: Japanese (JIS), csISO2022JP: Japanese (JIS-Allow 1 byte Kana), iso-2022-jp: Japanese (JIS-Allow 1 byte Kana - SO/SI), iso-2022-kr: Korean (ISO), x-cp50227: Chinese Simplified (ISO-2022), euc-jp: Japanese (EUC), EUC-CN: Chinese Simplified (EUC), euc-kr: Korean (EUC), hz-gb-2312: Chinese Simplified (HZ), GB18030: Chinese Simplified (GB18030), x-iscii-de: ISCII Devanagari, x-iscii-be: ISCII Bengali, x-iscii-ta: ISCII Tamil, x-iscii-te: ISCII Telugu, x-iscii-as: ISCII Assamese, x-iscii-or: ISCII Oriya, x-iscii-ka: ISCII Kannada, x-iscii-ma: ISCII Malayalam, x-iscii-gu: ISCII Gujarati, x-iscii-pa: ISCII Punjabi, utf-7: Unicode (UTF-7), utf-8: Unicode (UTF-8)",
        "Description": "The encoding used for the web service response. If the auto-detect option is chosen, the encoding to be used will be specified by the web service"
      },
      {
        "Argument": "Accept untrusted certificates",
        "Type": "Boolean value",
        "Description": "Specify whether untrusted certificates will be accepted"
      },
      {
        "Argument": "HTTP Authentication",
        "Type": "Boolean value",
        "Description": "Specify whether the web server requires HTTP authentication (that is, the browser displays a popup window asking for a username and password)"
      },
      {
        "Argument": "User name",
        "Type": "Text value",
        "Description": "The user name for the web server"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password for the web server"
      },
      {
        "Argument": "Trim whitespaces",
        "Type": "Boolean value",
        "Description": "Enable this option to trim the whitespace at the end of the request body of the web service response"
      },
      {
        "Argument": "WSDL",
        "Type": "File",
        "Description": "The Web Services Description Language (WSDL) document to build the request with"
      },
      {
        "Argument": "Service",
        "Type": "Text value",
        "Description": "The service to invoke"
      },
      {
        "Argument": "Port",
        "Type": "Text value",
        "Description": "The port to invoke the service"
      },
      {
        "Argument": "SOAP version",
        "Type": "Text value",
        "Description": "The version of the SOAP service"
      },
      {
        "Argument": "Operation",
        "Type": "Text value",
        "Description": "The operation to invoke the service"
      },
      {
        "Argument": "Request envelope",
        "Type": "Text value",
        "Description": "The envelope to send in the request to invoke the service"
      }
    ],
    "Variables produced": [
      {
        "Argument": "SoapServiceResponseHeaders",
        "Type": "List of Text values",
        "Description": "The HTTP headers of the response"
      },
      {
        "Argument": "SoapServiceResponse",
        "Type": "Text value",
        "Description": "The web service response text"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Invoke SOAP service error",
        "Description": "Indicates a problem invoking the SOAP service"
      },
      {
        "Exception": "Invalid header in custom headers",
        "Description": "Indicates that some custom headers were invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "HTTP",
    "action": "Invoke web service",
    "description": "Invokes a web service by sending data and stores the response text.",
    "Input parameters": [
      {
        "Argument": "URL",
        "Type": "Text value",
        "Description": "The web service's URL"
      },
      {
        "Argument": "Method",
        "Type": "GET, POST, CONNECT, HEAD, PUT, DELETE, OPTIONS, TRACE, PATCH",
        "Description": "The HTTP method to be used to invoke the web service"
      },
      {
        "Argument": "Accept",
        "Type": "Text value",
        "Description": "The acceptable content type for the response of the web service"
      },
      {
        "Argument": "Custom headers",
        "Type": "Text value",
        "Description": "The custom headers to be included in the request that will be sent to the web service"
      },
      {
        "Argument": "Upload attachments",
        "Type": "Boolean value",
        "Description": "Specify whether the web service will include files to upload"
      },
      {
        "Argument": "Content type",
        "Type": "Text value",
        "Description": "The content type of the request that will be sent to the web service"
      },
      {
        "Argument": "Request body",
        "Type": "Text value",
        "Description": "The body of the request that will be sent to the web service"
      },
      {
        "Argument": "Attachments",
        "Type": "Attachments",
        "Description": "Select the attachments that will be added to the web request. You can only choose one of the two attachment types (File or Binary)."
      },
      {
        "Argument": "Attach",
        "Type": "File, Binary",
        "Description": "The type of the attachments that will be sent by the web service"
      },
      {
        "Argument": "Save response",
        "Type": "Get text into variable (for web pages), Save to disk (for files)",
        "Description": "Specify how the returned data will be saved"
      },
      {
        "Argument": "File name",
        "Type": "Keep original file name (specify only destination folder), Specify full path (destination folder + custom file name)",
        "Description": "Specify whether to keep the original file name of the downloaded file or specify a new name"
      },
      {
        "Argument": "Destination folder",
        "Type": "Folder",
        "Description": "The folder where the file returned by the web service will be saved"
      },
      {
        "Argument": "Destination file path",
        "Type": "File",
        "Description": "The full path (folder plus filename) where the file returned by the web service will be stored"
      },
      {
        "Argument": "Connection timeout",
        "Type": "Numeric value",
        "Description": "The time (in seconds) that the agent should wait for a connection to be established with the server, before giving up"
      },
      {
        "Argument": "Follow redirection",
        "Type": "Boolean value",
        "Description": "Specify whether to allow the web server to redirect you to another web service"
      },
      {
        "Argument": "Clear cookies",
        "Type": "Boolean value",
        "Description": "Specify whether to clear all cookies created by similar actions during this automation before this action"
      },
      {
        "Argument": "Fail on error status",
        "Type": "Boolean value",
        "Description": "Specify whether the responses of the invoked web service that denote errors will be processed as if they were normal responses (suppressing all exceptions) or will result in the related exceptions"
      },
      {
        "Argument": "Encode request body",
        "Type": "Boolean value",
        "Description": "Specify whether the body of request should be URL-encoded before invoking"
      },
      {
        "Argument": "User agent",
        "Type": "Text value",
        "Description": "Specify which browser identity to be seen as. Some web servers won't allow access unless a browser identity is chosen"
      },
      {
        "Argument": "Encoding",
        "Type": "Auto - detect, IBM037: IBM EBCDIC (US-Canada), IBM437: OEM United States, IBM500: IBM EBCDIC (International), ASMO-708: Arabic (ASMO 708), DOS-720: Arabic (DOS), ibm737: Greek (DOS), ibm775: Baltic (DOS), ibm850: Western European (DOS), ibm852: Central European (DOS), IBM855: OEM Cyrillic, ibm857: Turkish (DOS), IBM00858: OEM Multilingual Latin I, IBM860: Portuguese (DOS), ibm861: Icelandic (DOS), DOS-862: Hebrew (DOS), IBM863: French Canadian (DOS), IBM864: Arabic (864), IBM865: Nordic (DOS), cp866: Cyrillic (DOS), ibm869: Greek, Modern (DOS), IBM870: IBM EBCDIC (Multilingual Latin-2), windows-874: Thai (Windows), cp875: IBM EBCDIC (Greek Modern), shift_jis: Japanese (Shift-JIS), gb2312: Chinese Simplified (GB2312), ks_c_5601-1987: Korean, big5: Chinese Traditional (Big5), IBM1026: IBM EBCDIC (Turkish Latin-5), IBM01047: IBM Latin-1, IBM01140: IBM EBCDIC (US-Canada-Euro), IBM01141: IBM EBCDIC (Germany-Euro), IBM01142: IBM EBCDIC (Denmark-Norway-Euro), IBM01143: IBM EBCDIC (Finland-Sweden-Euro), IBM01144: IBM EBCDIC (Italy Euro), IBM01145: IBM EBCDIC (Spain-Euro), IBM01146: IBM EBCDIC (UK-Euro), IBM01147: IBM EBCDIC (France-Euro), IBM01148: IBM EBCDIC (International-Euro), IBM01149: IBM EBCDIC (Icelandic-Euro), utf-16: Unicode, utf-16BE: Unicode (Big-Endian), windows-1250: Central European (Windows), windows-1251: Cyrillic (Windows), Windows-1252: Western European (Windows), windows-1253: Greek (Windows), windows-1254: Turkish (Windows), windows-1255: Hebrew (Windows), windows-1256: Arabic (Windows), windows-1257: Baltic (Windows), windows-1258: Vietnamese (Windows), Johab: Korean (Johab), macintosh: Western European (Mac), x-mac-japanese: Japanese (Mac), x-mac-chinesetrad: Chinese Traditional (Mac), x-mac-korean: Korean (Mac), x-mac-arabic: Arabic (Mac), x-mac-hebrew: Hebrew (Mac), x-mac-greek: Greek (Mac), x-mac-cyrillic: Cyrillic (Mac), x-mac-chinesesimp: Chinese Simplified (Mac), x-mac-romanian: Romanian (Mac), x-mac-ukrainian: Ukrainian (Mac), x-mac-thai: Thai (Mac), x-mac-ce: Central European (Mac), x-mac-icelandic: Icelandic (Mac), x-mac-turkish: Turkish (Mac), x-mac-croatian: Croatian (Mac), utf-32: Unicode (UTF-32), utf-32BE: Unicode (UTF-32 Big-Endian), x-Chinese-CNS: Chinese Traditional (CNS), x-cp20001: TCA Taiwan, x-Chinese-Eten: Chinese Traditional (Eten), x-cp20003: IBM5550 Taiwan, x-cp20004: TeleText Taiwan, x-cp20005: Wang Taiwan, x-IA5: Western European (IA5), x-IA5-German: German (IA5), x-IA5-Swedish: Swedish (IA5), x-IA5-Norwegian: Norwegian (IA5), us-ascii: US-ASCII, x-cp20261: T.61, x-cp20269: ISO-6937, IBM273: IBM EBCDIC (Germany), IBM277: IBM EBCDIC (Denmark-Norway), IBM278: IBM EBCDIC (Finland-Sweden), IBM280: IBM EBCDIC (Italy), IBM284: IBM EBCDIC (Spain), IBM285: IBM EBCDIC (UK), IBM290: IBM EBCDIC (Japanese katakana), IBM297: IBM EBCDIC (France), IBM420: IBM EBCDIC (Arabic), IBM423: IBM EBCDIC (Greek), IBM424: IBM EBCDIC (Hebrew), x-EBCDIC-KoreanExtended: IBM EBCDIC (Korean Extended), IBM-Thai: IBM EBCDIC (Thai), koi8-r: Cyrillic (KOI8-R), IBM871: IBM EBCDIC (Icelandic), IBM880: IBM EBCDIC (Cyrillic Russian), IBM905: IBM EBCDIC (Turkish), IBM00924: IBM Latin-1, EUC-JP: Japanese (JIS 0208-1990 and 0212-1990), x-cp20936: Chinese Simplified (GB2312-80), x-cp20949: Korean Wansung, cp1025: IBM EBCDIC (Cyrillic Serbian-Bulgarian), koi8-u: Cyrillic (KOI8-U), iso-8859-1: Western European (ISO), iso-8859-2: Central European (ISO), iso-8859-3: Latin 3 (ISO), iso-8859-4: Baltic (ISO), iso-8859-5: Cyrillic (ISO), iso-8859-6: Arabic (ISO), iso-8859-7: Greek (ISO), iso-8859-8: Hebrew (ISO-Visual), iso-8859-9: Turkish (ISO), iso-8859-13: Estonian (ISO), iso-8859-15: Latin 9 (ISO), x-Europa: Europa, iso-8859-8-i: Hebrew (ISO-Logical), iso-2022-jp: Japanese (JIS), csISO2022JP: Japanese (JIS-Allow 1 byte Kana), iso-2022-jp: Japanese (JIS-Allow 1 byte Kana - SO/SI), iso-2022-kr: Korean (ISO), x-cp50227: Chinese Simplified (ISO-2022), euc-jp: Japanese (EUC), EUC-CN: Chinese Simplified (EUC), euc-kr: Korean (EUC), hz-gb-2312: Chinese Simplified (HZ), GB18030: Chinese Simplified (GB18030), x-iscii-de: ISCII Devanagari, x-iscii-be: ISCII Bengali, x-iscii-ta: ISCII Tamil, x-iscii-te: ISCII Telugu, x-iscii-as: ISCII Assamese, x-iscii-or: ISCII Oriya, x-iscii-ka: ISCII Kannada, x-iscii-ma: ISCII Malayalam, x-iscii-gu: ISCII Gujarati, x-iscii-pa: ISCII Punjabi, utf-7: Unicode (UTF-7), utf-8: Unicode (UTF-8)",
        "Description": "The encoding used for the web service response. If the auto-detect option is chosen, the encoding to be used will be specified by the web service"
      },
      {
        "Argument": "Accept untrusted certificates",
        "Type": "Boolean value",
        "Description": "Specify whether untrusted certificates will be accepted"
      },
      {
        "Argument": "HTTP Authentication",
        "Type": "Boolean value",
        "Description": "Specify whether the web server requires authentication. This property refers to HTTP authentication (that is, when the browser displays a popup window asking for user name and password)"
      },
      {
        "Argument": "User name",
        "Type": "Text value",
        "Description": "The user name for the web server"
      },
      {
        "Argument": "Password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password for the web server"
      },
      {
        "Argument": "Trim whitespaces",
        "Type": "Boolean value",
        "Description": "Enable this to trim the whitespaces at the end of the request body of the web service response"
      },
      {
        "Argument": "Name",
        "Type": "Text value",
        "Description": "The name of the attachment"
      },
      {
        "Argument": "Attachment",
        "Type": "File",
        "Description": "The file to be attached"
      },
      {
        "Argument": "Type",
        "Type": "File, Name",
        "Description": "The attachment type"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WebServiceResponseHeaders",
        "Type": "List of Text values",
        "Description": "The HTTP headers of the response"
      },
      {
        "Argument": "DownloadedFile",
        "Type": "File",
        "Description": "The downloaded file"
      },
      {
        "Argument": "WebServiceResponse",
        "Type": "Text value",
        "Description": "The web service response text"
      },
      {
        "Argument": "StatusCode",
        "Type": "Numeric value",
        "Description": "The status code returned"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Invoke web service error",
        "Description": "Indicates a problem invoking the web service"
      },
      {
        "Exception": "Directory doesn't exist",
        "Description": "Indicates that a required directory doesn't exist"
      },
      {
        "Exception": "Invalid header in custom headers",
        "Description": "Indicates that some custom headers were invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Run flow",
    "action": "Run desktop flow",
    "description": "Runs a desktop flow that can receive input variables and might produce output variables. The parent flow run will be paused until the called desktop flow completes.",
    "Input parameters": [
      {
        "Argument": "Desktop flow",
        "Type": "Desktop flow",
        "Description": "Select the desktop flow to run from within this flow. The called flow always runs in the same Windows session as the parent flow."
      },
      {
        "Argument": "Wait for flow to complete",
        "Type": "Boolean value",
        "Description": "If enabled, this desktop flow waits for the invoked desktop flow to complete before resuming. The invoked desktop flow's output variables are available to the current flow. If disabled, the invoked desktop flow runs concurrently, and its output variables are ignored."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Run desktop flow failed",
        "Description": "Indicates a problem while running the desktop flow"
      },
      {
        "Exception": "Desktop flow timed out",
        "Description": "Indicates that the desktop flow timed out before completing its run"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Process work queue items",
    "description": "The Process work queue items action indicates to the queue orchestrator that the machine is ready to process one or more work queue items. The user context requesting a new item needs to have sufficient privileges on the work queue and work queue items table in order to process work queues.",
    "Input parameters": [
      {
        "Argument": "Work queue",
        "Type": "Text",
        "Description": "The work queue ID of the work queue that contains items to process."
      },
      {
        "Argument": "Filter rows",
        "Type": "Text",
        "Description": "The FetchXML query expression used to retrieve items from the work queue."
      },
      {
        "Argument": "Overwrite work queue auto-retry configuration",
        "Type": "Boolean",
        "Description": "When enabled, a field appears allowing you to set or overwrite the maximum number of retries for IT Exceptions."
      },
      {
        "Argument": "Max retry count",
        "Type": "Text value, Numeric value",
        "Description": "The maximum allowed number of retries for IT Exceptions. This parameter lets you adjust the retry count to a higher or lower value, or even disable the retry mechanism by setting the count to 0."
      }
    ],
    "Variables produced": [
      {
        "Argument": "WorkQueueItem",
        "Type": "No",
        "Description": "Information stored in the work queue item being processed"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The value entered into the work queue parameter is invalid."
      },
      {
        "Exception": "Work queue paused or stopped",
        "Description": "The work queue is either paused or stopped, which isn't a valid state when processing items."
      },
      {
        "Exception": "Invalid FetchXML",
        "Description": "An invalid FetchXML expression was provided."
      },
      {
        "Exception": "Failed to process work queue",
        "Description": "Bad request - error in query syntax."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Processworkqueueitemaction",
    "description": "The Process work queue item action action requires the following arguments.",
    "Input parameters": [
      {
        "Argument": "Work queue",
        "Type": "Text",
        "Description": "The work queue ID of the work queue that contains items to process."
      },
      {
        "Argument": "Filter rows",
        "Type": "Text",
        "Description": "The FetchXML query expression used to retrieve items from the work queue."
      },
      {
        "Argument": "Overwrite work queue auto-retry configuration",
        "Type": "Boolean",
        "Description": "When enabled, a field appears allowing you to set or overwrite the maximum number of retries for IT Exceptions."
      },
      {
        "Argument": "Max retry count",
        "Type": "Text value, Numeric value",
        "Description": "The maximum allowed number of retries for IT Exceptions. This parameter lets you adjust the retry count to a higher or lower value, or even disable the retry mechanism by setting the count to 0."
      }
    ],
    "Variables produced": [
      {
        "Argument": "WorkQueueItem",
        "Type": "No",
        "Description": "Information stored in the work queue item being processed"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The value entered into the work queue parameter is invalid."
      },
      {
        "Exception": "Work queue paused or stopped",
        "Description": "The work queue is either paused or stopped, which isn't a valid state when processing items."
      },
      {
        "Exception": "Invalid FetchXML",
        "Description": "An invalid FetchXML expression was provided."
      },
      {
        "Exception": "Failed to process work queue",
        "Description": "Bad request - error in query syntax."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Update work queue item",
    "description": "The Update work queue item action allows users to change the status and processing results of the selected work queue item.",
    "Input parameters": [
      {
        "Argument": "Work queue item",
        "Type": "Text",
        "Description": "Work queue item variable that has been previously returned by the queue orchestrator"
      },
      {
        "Argument": "Status",
        "Type": "Processed, Generic Exception",
        "Description": "Update the work queue item being processed using a status from the list of options."
      },
      {
        "Argument": "Processing notes",
        "Type": "Text",
        "Description": "Custom processing notes or value to append to the queue item being processed."
      },
      {
        "Argument": "Clear processing notes",
        "Type": "Boolean",
        "Description": "When enabled, hides and clears the processing notes field on this screen and removes any processing notes from the database that have been previously captured for this item."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Work queue item not found",
        "Description": "The work queue item being processed has either been deleted or no longer belongs to the queue that it was called from."
      },
      {
        "Exception": "Work queue item on hold",
        "Description": "The work queue item being processed contains a status of on hold in the queue orchestrator and can no longer be updated."
      },
      {
        "Exception": "Failed to update work queue item",
        "Description": "The work queue item being updated has encountered an unexpected error. Check the error message for more details."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Updateworkqueueitemaction",
    "description": "The Update work queue item action action requires the following arguments.",
    "Input parameters": [
      {
        "Argument": "Work queue item",
        "Type": "Text",
        "Description": "Work queue item variable that has been previously returned by the queue orchestrator"
      },
      {
        "Argument": "Status",
        "Type": "Processed, Generic Exception",
        "Description": "Update the work queue item being processed using a status from the list of options."
      },
      {
        "Argument": "Processing notes",
        "Type": "Text",
        "Description": "Custom processing notes or value to append to the queue item being processed."
      },
      {
        "Argument": "Clear processing notes",
        "Type": "Boolean",
        "Description": "When enabled, hides and clears the processing notes field on this screen and removes any processing notes from the database that have been previously captured for this item."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Work queue item not found",
        "Description": "The work queue item being processed has either been deleted or no longer belongs to the queue that it was called from."
      },
      {
        "Exception": "Work queue item on hold",
        "Description": "The work queue item being processed contains a status of on hold in the queue orchestrator and can no longer be updated."
      },
      {
        "Exception": "Failed to update work queue item",
        "Description": "The work queue item being updated has encountered an unexpected error. Check the error message for more details."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Add work queue item",
    "description": "The Add work queue item action allows users to populate work queue items into a work queue, which has been set up in the flow portal.",
    "Input parameters": [
      {
        "Argument": "Work queue",
        "Type": "Text value",
        "Description": "The work queue item to add the item into"
      },
      {
        "Argument": "Priority",
        "Type": "High, Normal, Low",
        "Description": "The priority to set the work queue item to"
      },
      {
        "Argument": "Name",
        "Type": "Text value, Numeric value",
        "Description": "Custom name or ID for the new work queue item"
      },
      {
        "Argument": "Input",
        "Type": "Text value, Numeric value",
        "Description": "The data, which belongs to the value column to be processed"
      },
      {
        "Argument": "Expires",
        "Type": "Datetime",
        "Description": "The datetime value set to expire the queue item, otherwise adopts the default value if one is set for the queue"
      },
      {
        "Argument": "Processing notes",
        "Type": "Text value, Numeric value",
        "Description": "Custom processing notes to be added to the new queue item"
      },
      {
        "Argument": "Has unique id or reference",
        "Type": "Text value, Numeric value",
        "Description": "When enabled, a value should be provided that is unique within this queue. If left empty, a unique value in the format of system-<GUID> is automatically provided by the system"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WorkQueueItem",
        "Type": "No",
        "Description": "Information stored for the work queue item being added"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The value entered into the work queue parameter is invalid"
      },
      {
        "Exception": "Failed to add item into work queue",
        "Description": "The work queue item couldn't be added into the work queue. Bad request - error in query syntax"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Enqueueworkqueueitemaction",
    "description": "The Add work queue item action requires the following arguments.",
    "Input parameters": [
      {
        "Argument": "Work queue",
        "Type": "Text value",
        "Description": "The work queue item to add the item into"
      },
      {
        "Argument": "Priority",
        "Type": "High, Normal, Low",
        "Description": "The priority to set the work queue item to"
      },
      {
        "Argument": "Name",
        "Type": "Text value, Numeric value",
        "Description": "Custom name or ID for the new work queue item"
      },
      {
        "Argument": "Input",
        "Type": "Text value, Numeric value",
        "Description": "The data, which belongs to the value column to be processed"
      },
      {
        "Argument": "Expires",
        "Type": "Datetime",
        "Description": "The datetime value set to expire the queue item, otherwise adopts the default value if one is set for the queue"
      },
      {
        "Argument": "Processing notes",
        "Type": "Text value, Numeric value",
        "Description": "Custom processing notes to be added to the new queue item"
      },
      {
        "Argument": "Has unique id or reference",
        "Type": "Text value, Numeric value",
        "Description": "When enabled, a value should be provided that is unique within this queue. If left empty, a unique value in the format of system-<GUID> is automatically provided by the system"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WorkQueueItem",
        "Type": "No",
        "Description": "Information stored for the work queue item being added"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The value entered into the work queue parameter is invalid"
      },
      {
        "Exception": "Failed to add item into work queue",
        "Description": "The work queue item couldn't be added into the work queue. Bad request - error in query syntax"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Add multiple work queue items",
    "description": "The Add multiple work queue items action allows users to add one or more work queue items to a work queue based on the data provided as work queue item data table.",
    "Input parameters": [
      {
        "Description": "The name of the item."
      },
      {
        "Description": "Input details or data of the item."
      },
      {
        "Description": "Specifies the duration until the item expires."
      },
      {
        "Description": "Processing notes related to the item."
      },
      {
        "Description": "The priority level of the item."
      },
      {
        "Description": "A unique identifier or reference value for the item."
      },
      {
        "Description": "Status of the item on ingestion."
      },
      {
        "Description": "Specifies a date and time until the work queue items should be ignored for processing."
      },
      {
        "Argument": "Work queue",
        "Type": "Text value",
        "Description": "The work queue item to add the item into"
      },
      {
        "Argument": "Work queue item data",
        "Type": "Datatable",
        "Description": "The custom data table holding work queue items to be added to the work queue"
      }
    ],
    "Variables produced": [
      {
        "Argument": "FailedWorkQueueItems",
        "Type": "No",
        "Description": "If there are failures, this object holds the index of the item that failed to be inserted together with an error code. The index returned is the position (index) of the item in the provided work queue data table of the Add multiple work queue items action."
      },
      {
        "Argument": "HasFailedItems",
        "Type": "No",
        "Description": "An indicator for whether the actions encountered ingestion errors because of work queue item data issues."
      },
      {
        "Argument": "SuccessfulWorkQueueItems",
        "Type": "Disabled",
        "Description": "A custom object holding the index and work queue items that were successfully added to the work queue."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The value entered into the work queue parameter is invalid"
      },
      {
        "Exception": "Work queue paused or stopped",
        "Description": "The work queue item couldn't be added into the work queue because the work queue is either paused or stopped."
      },
      {
        "Exception": "Failed to batch enqueue a list of work queue items",
        "Description": "The work queue items couldn't be added into the work queue because of a request or communication error."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Batchenqueueworkqueueitemsaction",
    "description": "The Add multiple work queue items action requires the following arguments.",
    "Input parameters": [
      {
        "Argument": "Work queue",
        "Type": "Text value",
        "Description": "The work queue item to add the item into"
      },
      {
        "Argument": "Work queue item data",
        "Type": "Datatable",
        "Description": "The custom data table holding work queue items to be added to the work queue"
      }
    ],
    "Variables produced": [
      {
        "Argument": "FailedWorkQueueItems",
        "Type": "No",
        "Description": "If there are failures, this object holds the index of the item that failed to be inserted together with an error code. The index returned is the position (index) of the item in the provided work queue data table of the Add multiple work queue items action."
      },
      {
        "Argument": "HasFailedItems",
        "Type": "No",
        "Description": "An indicator for whether the actions encountered ingestion errors because of work queue item data issues."
      },
      {
        "Argument": "SuccessfulWorkQueueItems",
        "Type": "Disabled",
        "Description": "A custom object holding the index and work queue items that were successfully added to the work queue."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The value entered into the work queue parameter is invalid"
      },
      {
        "Exception": "Work queue paused or stopped",
        "Description": "The work queue item couldn't be added into the work queue because the work queue is either paused or stopped."
      },
      {
        "Exception": "Failed to batch enqueue a list of work queue items",
        "Description": "The work queue items couldn't be added into the work queue because of a request or communication error."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Requeue item with delay",
    "description": "The Requeue item with delay action allows users to readd a queue item being processed in the desktop flow, back into its originating queue. In addition, the queued item can be held and released until a defined time.",
    "Input parameters": [
      {
        "Argument": "Work queue item",
        "Type": "Work queue item",
        "Description": "The work queue item to add the item into"
      },
      {
        "Argument": "Delay until",
        "Type": "Datetime value",
        "Description": "The datetime value applied to delay the queue item until"
      },
      {
        "Argument": "Expires",
        "Type": "Datetime value",
        "Description": "Custom expiration time for the item being requeued"
      },
      {
        "Argument": "Processing notes",
        "Type": "Text value, Numeric value",
        "Description": "Custom processing notes to be added to the new queue item"
      },
      {
        "Argument": "Clear processing notes",
        "Type": "Boolean",
        "Description": "When enabled, hides and clears the processing notes field on this screen and removes any processing notes from the database that have been previously captured for this item"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The value entered into the work queue parameter is invalid"
      },
      {
        "Exception": "Work queue item not found",
        "Description": "The queue item value is invalid"
      },
      {
        "Exception": "Failed to requeue work queue item",
        "Description": "The work queue item couldn't be added into the work queue. Bad request - error in query syntax"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Requeueworkqueueitemaction",
    "description": "The Requeue item with delay action requires the following arguments.",
    "Input parameters": [
      {
        "Argument": "Work queue item",
        "Type": "Work queue item",
        "Description": "The work queue item to add the item into"
      },
      {
        "Argument": "Delay until",
        "Type": "Datetime value",
        "Description": "The datetime value applied to delay the queue item until"
      },
      {
        "Argument": "Expires",
        "Type": "Datetime value",
        "Description": "Custom expiration time for the item being requeued"
      },
      {
        "Argument": "Processing notes",
        "Type": "Text value, Numeric value",
        "Description": "Custom processing notes to be added to the new queue item"
      },
      {
        "Argument": "Clear processing notes",
        "Type": "Boolean",
        "Description": "When enabled, hides and clears the processing notes field on this screen and removes any processing notes from the database that have been previously captured for this item"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The value entered into the work queue parameter is invalid"
      },
      {
        "Exception": "Work queue item not found",
        "Description": "The queue item value is invalid"
      },
      {
        "Exception": "Failed to requeue work queue item",
        "Description": "The work queue item couldn't be added into the work queue. Bad request - error in query syntax"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Update work queue item processing notes",
    "description": "The Update work queue item processing notes action allows users to update or clear processing notes of the selected work queue item without changing its state or any other property.",
    "Input parameters": [
      {
        "Argument": "Work queue item",
        "Type": "Text",
        "Description": "Work queue item variable that's been previously returned by the queue orchestrator"
      },
      {
        "Argument": "Processing notes",
        "Type": "Text",
        "Description": "Custom processing result or value to append to the queue item processed"
      },
      {
        "Argument": "Clear processing notes",
        "Type": "Boolean",
        "Description": "When enabled, hides and clears the processing notes field on this screen and removes any processing notes from the database that were previously captured for this item"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The work queue associated with the item has either been deleted or is no longer accessible"
      },
      {
        "Exception": "Work queue item not found",
        "Description": "The work queue item is invalid"
      },
      {
        "Exception": "Failed to append the processing results",
        "Description": "The work queue item being updated has encountered an unexpected error. Check the error message for more details."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "updateprocessingnotesaction",
    "description": "The Update work queue item processing notes action action requires the following arguments.",
    "Input parameters": [
      {
        "Argument": "Work queue item",
        "Type": "Text",
        "Description": "Work queue item variable that's been previously returned by the queue orchestrator"
      },
      {
        "Argument": "Processing notes",
        "Type": "Text",
        "Description": "Custom processing result or value to append to the queue item processed"
      },
      {
        "Argument": "Clear processing notes",
        "Type": "Boolean",
        "Description": "When enabled, hides and clears the processing notes field on this screen and removes any processing notes from the database that were previously captured for this item"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Work queue not found",
        "Description": "The work queue associated with the item has either been deleted or is no longer accessible"
      },
      {
        "Exception": "Work queue item not found",
        "Description": "The work queue item is invalid"
      },
      {
        "Exception": "Failed to append the processing results",
        "Description": "The work queue item being updated has encountered an unexpected error. Check the error message for more details."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Get work queue items by filter",
    "description": "The Get work queue items by filter action allows users to retrieve one or more work queue items based on a FetchXML filter expression.",
    "Input parameters": [
      {
        "Argument": "Work queue",
        "Type": "Text",
        "Description": "Work queue to retrieve items from"
      },
      {
        "Argument": "Filter rows",
        "Type": "Text",
        "Description": "FetchXML query expression used to retrieve items from the work queue"
      },
      {
        "Argument": "Rows to return",
        "Type": "Number",
        "Description": "The maximum number of work queue items returned by the orchestrator"
      },
      {
        "Description": "Item is queued"
      },
      {
        "Description": "Item is being processed"
      },
      {
        "Description": "Item was processed"
      },
      {
        "Description": "Item is on hold"
      },
      {
        "Description": "Item encountered an error"
      },
      {
        "Description": "Item is queued"
      },
      {
        "Description": "Item is being processed"
      },
      {
        "Description": "Item was processed"
      },
      {
        "Description": "Item is on hold (paused)"
      },
      {
        "Description": "Item encountered a generic exception"
      },
      {
        "Description": "Item encountered an IT exception"
      },
      {
        "Description": "Item encountered a business exception"
      },
      {
        "Description": "Item is in on-hold"
      },
      {
        "Description": "Item processing timed out"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WorkQueueItems",
        "Type": "No",
        "Description": "List of work queue items matching the filter expression."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Work queue",
        "Description": "The work queue to retrieve items from."
      },
      {
        "Exception": "Filter rows",
        "Description": "The FetchXML query expression used to retrieve items from the work queue."
      },
      {
        "Exception": "Rows to return",
        "Description": "The maximum number of work queue items returned by the orchestrator (default is 5000)."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Getworkqueueitemsaction",
    "description": "The Get work queue items by filter action requires the following arguments.",
    "Input parameters": [
      {
        "Argument": "Work queue",
        "Type": "Text",
        "Description": "Work queue to retrieve items from"
      },
      {
        "Argument": "Filter rows",
        "Type": "Text",
        "Description": "FetchXML query expression used to retrieve items from the work queue"
      },
      {
        "Argument": "Rows to return",
        "Type": "Number",
        "Description": "The maximum number of work queue items returned by the orchestrator"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WorkQueueItems",
        "Type": "No",
        "Description": "List of work queue items matching the filter expression."
      }
    ],
    "Exceptions": [
      {
        "Exception": "Work queue",
        "Description": "The work queue to retrieve items from."
      },
      {
        "Exception": "Filter rows",
        "Description": "The FetchXML query expression used to retrieve items from the work queue."
      },
      {
        "Exception": "Rows to return",
        "Description": "The maximum number of work queue items returned by the orchestrator (default is 5000)."
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Query support details and reference data",
    "description": "N/A",
    "Input parameters": [
      {
        "Description": "Item is queued"
      },
      {
        "Description": "Item is being processed"
      },
      {
        "Description": "Item was processed"
      },
      {
        "Description": "Item is on hold"
      },
      {
        "Description": "Item encountered an error"
      },
      {
        "Description": "Item is queued"
      },
      {
        "Description": "Item is being processed"
      },
      {
        "Description": "Item was processed"
      },
      {
        "Description": "Item is on hold (paused)"
      },
      {
        "Description": "Item encountered a generic exception"
      },
      {
        "Description": "Item encountered an IT exception"
      },
      {
        "Description": "Item encountered a business exception"
      },
      {
        "Description": "Item is in on-hold"
      },
      {
        "Description": "Item processing timed out"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Status (statecode)",
    "description": "N/A",
    "Input parameters": [
      {
        "Description": "Item is queued"
      },
      {
        "Description": "Item is being processed"
      },
      {
        "Description": "Item was processed"
      },
      {
        "Description": "Item is on hold"
      },
      {
        "Description": "Item encountered an error"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Workqueues",
    "action": "Status Reason (statuscode)",
    "description": "N/A",
    "Input parameters": [
      {
        "Description": "Item is queued"
      },
      {
        "Description": "Item is being processed"
      },
      {
        "Description": "Item was processed"
      },
      {
        "Description": "Item is on hold (paused)"
      },
      {
        "Description": "Item encountered a generic exception"
      },
      {
        "Description": "Item encountered an IT exception"
      },
      {
        "Description": "Item encountered a business exception"
      },
      {
        "Description": "Item is in on-hold"
      },
      {
        "Description": "Item processing timed out"
      }
    ],
    "Variables produced": [],
    "Exceptions": []
  },
  {
    "tool": "Power Automate",
    "category": "Cryptography",
    "action": "Encrypt text with AES",
    "description": "Encrypt a string with AES, using a key and a specified encoding format.",
    "Input parameters": [
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Big-endian Unicode, UTF-8",
        "Description": "The encoding of the text to encrypt"
      },
      {
        "Argument": "Text to encrypt",
        "Type": "Text value",
        "Description": "The text to encrypt"
      },
      {
        "Argument": "Encryption key",
        "Type": "Direct encrypted input or Text value",
        "Description": "The encryption key to use"
      },
      {
        "Argument": "Padding",
        "Type": "None, PKCS7, Zeros, ANSIX923, ISO10126",
        "Description": "The padding to use for the selected encryption algorithm"
      },
      {
        "Argument": "Key size",
        "Type": "128 bits, 192 bits, 256 bits",
        "Description": "The size of the key in bits to use for the encryption"
      },
      {
        "Argument": "Use salt",
        "Type": "Boolean value",
        "Description": "Specifies whether to use salt for encryption. When this option is enabled, the randomly generated salt becomes an output in the form of a base64 string."
      },
      {
        "Argument": "Use initialization vector",
        "Type": "Boolean value",
        "Description": "Specifies whether to use an initialization vector. When this option is enabled, the randomly generated initialization vector becomes an output in the form of a base64 string"
      }
    ],
    "Variables produced": [
      {
        "Argument": "EncryptedText",
        "Type": "Text value",
        "Description": "The encrypted text for later processing"
      },
      {
        "Argument": "Salt",
        "Type": "Text value",
        "Description": "The randomly generated salt value for later processing"
      },
      {
        "Argument": "InitializationVector",
        "Type": "Text value",
        "Description": "The randomly generated initialization vector value for later processing"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to encrypt text",
        "Description": "Indicates that an error occurred during encryption"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Cryptography",
    "action": "Decrypt text with AES",
    "description": "Decrypt a string with AES based on a specified key and an encoding format.",
    "Input parameters": [
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Big-endian Unicode, UTF-8",
        "Description": "The encoding for the decrypted text"
      },
      {
        "Argument": "Text to decrypt",
        "Type": "Text value",
        "Description": "The text to decrypt in the form of a base64 string"
      },
      {
        "Argument": "Decryption key",
        "Type": "Direct encrypted input or Text value",
        "Description": "The decryption key to use"
      },
      {
        "Argument": "Padding",
        "Type": "None, PKCS7, Zeros, ANSIX923, ISO10126",
        "Description": "The padding to use for the selected decryption algorithm"
      },
      {
        "Argument": "Key size",
        "Type": "128 bits, 192 bits, 256 bits",
        "Description": "The size of the key in bits to use for the decryption"
      },
      {
        "Argument": "Use salt",
        "Type": "Boolean value",
        "Description": "Specifies whether to use salt for the decryption"
      },
      {
        "Argument": "Salt",
        "Type": "Text value",
        "Description": "The salt to use for decryption in the form of a base64 string"
      },
      {
        "Argument": "Use initialization vector",
        "Type": "Boolean value",
        "Description": "Specifies whether to use an initialization vector"
      },
      {
        "Argument": "Initialization vector",
        "Type": "Text value",
        "Description": "The initialization vector to use for decryption in the form of a base64 string"
      }
    ],
    "Variables produced": [
      {
        "Argument": "DecryptedText",
        "Type": "Text value",
        "Description": "The decrypted text for later processing"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to decrypt text",
        "Description": "Indicates that an error occurred during decryption"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Cryptography",
    "action": "Encrypt from file with AES",
    "description": "Encrypt the contents of a file with AES, using a key and a specified encoding format.",
    "Input parameters": [
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Big-endian Unicode, UTF-8",
        "Description": "The encoding of the file to encrypt"
      },
      {
        "Argument": "File to encrypt",
        "Type": "File",
        "Description": "The text file that stores the contents to encrypt"
      },
      {
        "Argument": "Encryption key",
        "Type": "Direct encrypted input or Text value",
        "Description": "The encryption key to use"
      },
      {
        "Argument": "Padding",
        "Type": "None, PKCS7, Zeros, ANSIX923, ISO10126",
        "Description": "The padding to use for the selected encryption algorithm"
      },
      {
        "Argument": "Key size",
        "Type": "128 bits, 192 bits, 256 bits",
        "Description": "The size of the key in bits to use for the encryption"
      },
      {
        "Argument": "Use salt",
        "Type": "Boolean value",
        "Description": "Specifies whether to use salt for encryption. When this option is enabled, the randomly generated salt becomes an output in the form of a base64 string."
      },
      {
        "Argument": "Use initialization vector",
        "Type": "Boolean value",
        "Description": "Specifies whether to use an initialization vector. When this option is enabled, the randomly generated initialization vector becomes an output in the form of a base64 string"
      }
    ],
    "Variables produced": [
      {
        "Argument": "EncryptedText",
        "Type": "Text value",
        "Description": "The text of the encrypted file for later processing"
      },
      {
        "Argument": "Salt",
        "Type": "Text value",
        "Description": "The randomly generated salt value for later processing"
      },
      {
        "Argument": "InitializationVector",
        "Type": "Text value",
        "Description": "The randomly generated initialization vector value for later processing"
      }
    ],
    "Exceptions": [
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Failed to encrypt the contents of the file",
        "Description": "Indicates that an error occurred while encrypting the contents of the file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Cryptography",
    "action": "Decrypt to file with AES",
    "description": "Decrypt a string to a file with AES based on a specified key and an encoding format.",
    "Input parameters": [
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Big-endian Unicode, UTF-8",
        "Description": "The encoding of the text to decrypt"
      },
      {
        "Argument": "Text to decrypt",
        "Type": "Text value",
        "Description": "The text to decrypt in the form of a base64 string"
      },
      {
        "Argument": "Decryption key",
        "Type": "Direct encrypted input or Text value",
        "Description": "The decryption key to use"
      },
      {
        "Argument": "Decrypt to file",
        "Type": "File",
        "Description": "The file to save the decrypted text into"
      },
      {
        "Argument": "If file exists",
        "Type": "Overwrite, Don't decrypt to file, Add sequential suffix",
        "Description": "Specifies what to do in case the destination file already exists"
      },
      {
        "Argument": "Padding",
        "Type": "None, PKCS7, Zeros, ANSIX923, ISO10126",
        "Description": "The padding to use for the selected decryption algorithm"
      },
      {
        "Argument": "Key size",
        "Type": "128 bits, 192 bits, 256 bits",
        "Description": "The size of the key in bits to use for decryption"
      },
      {
        "Argument": "Use salt",
        "Type": "Boolean value",
        "Description": "Specifies whether to use salt for decryption"
      },
      {
        "Argument": "Salt",
        "Type": "Text value",
        "Description": "The salt to use for decryption in the form of a base64 string"
      },
      {
        "Argument": "Use initialization vector",
        "Type": "Boolean value",
        "Description": "Specifies whether to use an initialization vector. Enter the initialization vector in the form of a base64 string"
      },
      {
        "Argument": "Initialization vector",
        "Type": "Text value",
        "Description": "The initialization vector to use for decryption"
      }
    ],
    "Variables produced": [
      {
        "Argument": "DecryptedFile",
        "Type": "File",
        "Description": "The decrypted file for later processing"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to decrypt and store the contents to a file",
        "Description": "Indicates that an error occurred while decrypting or storing the contents to the specified file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Cryptography",
    "action": "Hash text",
    "description": "Hash a string, using a specified algorithm and an encoding format.",
    "Input parameters": [
      {
        "Argument": "Hash algorithm",
        "Type": "SHA256, SHA384, SHA512",
        "Description": "The algorithm to use for hashing"
      },
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Big-endian Unicode, UTF-8",
        "Description": "The encoding of the text to hash"
      },
      {
        "Argument": "Text to hash",
        "Type": "Text value",
        "Description": "The text to hash"
      }
    ],
    "Variables produced": [
      {
        "Argument": "HashedText",
        "Type": "Text value",
        "Description": "The hashed text for later processing"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to hash text",
        "Description": "Indicates that an error occurred during hashing"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Cryptography",
    "action": "Hash from file",
    "description": "Hash the contents of a file, using a specified algorithm and an encoding format.",
    "Input parameters": [
      {
        "Argument": "Hash algorithm",
        "Type": "SHA256, SHA384, SHA512",
        "Description": "The algorithm to use for hashing"
      },
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Big-endian Unicode, UTF-8",
        "Description": "The encoding of the file to hash"
      },
      {
        "Argument": "File to hash",
        "Type": "File",
        "Description": "The file to hash the contents of"
      }
    ],
    "Variables produced": [
      {
        "Argument": "HashedText",
        "Type": "Text value",
        "Description": "The hashed text for later processing"
      }
    ],
    "Exceptions": [
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Failed to hash the file",
        "Description": "Indicates that an error occurred while hashing the contents of the file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Cryptography",
    "action": "Hash text with key",
    "description": "Hash a string with a key, using a specified algorithm and an encoding format.",
    "Input parameters": [
      {
        "Argument": "Hash algorithm",
        "Type": "HMAC SHA256, HMAC SHA384, HMAC SHA512",
        "Description": "The algorithm to use for hashing"
      },
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Big-endian Unicode, UTF-8",
        "Description": "The encoding of the text to hash"
      },
      {
        "Argument": "Text to hash",
        "Type": "Text value",
        "Description": "The text to hash"
      },
      {
        "Argument": "Hash key",
        "Type": "Direct encrypted input or Text value",
        "Description": "The key to hash the text with"
      }
    ],
    "Variables produced": [
      {
        "Argument": "HashedText",
        "Type": "Text value",
        "Description": "The hashed text for later processing"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to hash text with key",
        "Description": "Indicates that an error occurred during hashing with key"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Cryptography",
    "action": "Hash from file with key",
    "description": "Hash the contents of a file with a key, using a specified algorithm and an encoding format.",
    "Input parameters": [
      {
        "Argument": "Hash algorithm",
        "Type": "HMAC SHA256, HMAC SHA384, HMAC SHA512",
        "Description": "The algorithm to use for hashing"
      },
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Big-endian Unicode, UTF-8",
        "Description": "The encoding of the file to hash"
      },
      {
        "Argument": "File to hash",
        "Type": "File",
        "Description": "The file to hash the contents of"
      },
      {
        "Argument": "Hash key",
        "Type": "Direct encrypted input or Text value",
        "Description": "The hash key to hash the text with"
      }
    ],
    "Variables produced": [
      {
        "Argument": "HashedText",
        "Type": "Text value",
        "Description": "The hashed text for later processing"
      }
    ],
    "Exceptions": [
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Failed to hash the file with key",
        "Description": "Indicates that an error occurred while hashing the contents of the file with the specified key"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Read XML from file",
    "description": "Read the contents of an XML file into a variable.",
    "Input parameters": [
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The file that contains the XML document to read"
      },
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Unicode big endian, UTF-8",
        "Description": "The encoding used for the specified file"
      }
    ],
    "Variables produced": [
      {
        "Argument": "XmlDocument",
        "Type": "XML node",
        "Description": "The variable that holds the read XML document"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Directory not found",
        "Description": "Indicates that the directory doesn't exist"
      },
      {
        "Exception": "File not found",
        "Description": "Indicates that the file doesn't exist"
      },
      {
        "Exception": "Failed to read from file",
        "Description": "Indicates a problem reading from file"
      },
      {
        "Exception": "File doesn't contain a valid XML document",
        "Description": "Indicates that the file doesn't contain a valid XML document"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Write XML to file",
    "description": "Write the contents of an XML node variable into a file.",
    "Input parameters": [
      {
        "Argument": "File path",
        "Type": "File",
        "Description": "The file to write the XML document into"
      },
      {
        "Argument": "XML to write",
        "Type": "Text value",
        "Description": "The XML node or document to write into the file"
      },
      {
        "Argument": "Encoding",
        "Type": "System default, ASCII, Unicode, Unicode big endian, UTF-8",
        "Description": "The encoding used for the specified file"
      },
      {
        "Argument": "Format XML",
        "Type": "Boolean value",
        "Description": "Specifies whether to format the XML"
      },
      {
        "Argument": "Indentation per level",
        "Type": "Numeric value",
        "Description": "Specifies by how many spaces to indent each level of the XML"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid directory specified",
        "Description": "Indicates that the specified directory is invalid"
      },
      {
        "Exception": "Failed to write XML to file",
        "Description": "Indicates a problem writing XML to file"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Execute XPath expression",
    "description": "Extract values from an XML document based on the provided XPath query.",
    "Input parameters": [
      {
        "Argument": "XML document to parse",
        "Type": "Text value",
        "Description": "The XML as text or a previously defined variable that contains the XML document to parse"
      },
      {
        "Argument": "XPath query",
        "Type": "Text value",
        "Description": "The XPath expression to execute against the XML document"
      },
      {
        "Argument": "Get first value only",
        "Type": "Boolean value",
        "Description": "Specifies whether to retrieve a single value (the first value only) or all the values that match the provided XPath expression"
      }
    ],
    "Variables produced": [
      {
        "Argument": "XPathResult",
        "Type": "XML node",
        "Description": "The extracted node(s) as an XML node"
      },
      {
        "Argument": "XPathResults",
        "Type": "List of XML nodes",
        "Description": "The extracted node(s) as a list of XML nodes"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Invalid XML document provided",
        "Description": "Indicates that the XML document provided is invalid"
      },
      {
        "Exception": "Invalid XPath expression provided",
        "Description": "Indicates that the XPath expression provided is invalid"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Get XML element attribute",
    "description": "Get the value of an attribute of an XML element.",
    "Input parameters": [
      {
        "Argument": "XML document",
        "Type": "XML node",
        "Description": "The XML document or XML element to retrieve its attribute"
      },
      {
        "Argument": "XPath query",
        "Type": "Text value",
        "Description": "The XPath expression to locate the subelement and retrieve its attribute"
      },
      {
        "Argument": "Attribute name",
        "Type": "Text value",
        "Description": "The name of the attribute to retrieve its value"
      },
      {
        "Argument": "Get value as",
        "Type": "Text value, Numeric value, Datetime value, Boolean value",
        "Description": "Specifies the data type for the attribute value"
      }
    ],
    "Variables produced": [
      {
        "Argument": "XmlAttributeValue",
        "Type": "Boolean value",
        "Description": "The retrieved value of the XML attribute"
      },
      {
        "Argument": "XmlAttributeValue",
        "Type": "Datetime",
        "Description": "The retrieved value of the XML attribute"
      },
      {
        "Argument": "XmlAttributeValue",
        "Type": "Numeric value",
        "Description": "The retrieved value of the XML attribute"
      },
      {
        "Argument": "XmlAttributeValue",
        "Type": "Text value",
        "Description": "The retrieved value of the XML attribute"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Invalid XPath expression provided",
        "Description": "Indicates that the XPath expression provided is invalid"
      },
      {
        "Exception": "XPath expression returns no element",
        "Description": "Indicates that the XPath expression returns no element"
      },
      {
        "Exception": "Attribute not found in element",
        "Description": "Indicates that the attribute doesn't exist in the element"
      },
      {
        "Exception": "Failed to convert attribute value to the requested data type",
        "Description": "Indicates a problem converting the attribute value to the requested data type"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Set XML element attribute",
    "description": "Set the value of an attribute of an XML element.",
    "Input parameters": [
      {
        "Argument": "XML document",
        "Type": "XML node",
        "Description": "The XML document or XML element to set its attribute"
      },
      {
        "Argument": "XPath query",
        "Type": "Text value",
        "Description": "The XPath expression to locate the subelement and set its attribute"
      },
      {
        "Argument": "Attribute name",
        "Type": "Text value",
        "Description": "The name of the attribute to set its value"
      },
      {
        "Argument": "Attribute value",
        "Type": "Text value",
        "Description": "The new value for the attribute"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid XPath expression provided",
        "Description": "Indicates that the XPath expression provided is invalid"
      },
      {
        "Exception": "XPath expression returns no element",
        "Description": "Indicates that the XPath expression returns no element"
      },
      {
        "Exception": "Failed to set XML attribute",
        "Description": "Indicates a problem setting the XML attribute"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Remove XML element attribute",
    "description": "Remove an attribute from an XML element.",
    "Input parameters": [
      {
        "Argument": "XML document",
        "Type": "XML node",
        "Description": "The XML document or XML element to remove its attribute"
      },
      {
        "Argument": "XPath query",
        "Type": "Text value",
        "Description": "The XPath expression to locate the subelement and remove its attribute"
      },
      {
        "Argument": "Attribute name",
        "Type": "Text value",
        "Description": "The name of the attribute to remove"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid XPath expression provided",
        "Description": "Indicates that the XPath expression provided is invalid"
      },
      {
        "Exception": "XPath expression returns no element",
        "Description": "Indicates that the XPath expression returns no element"
      },
      {
        "Exception": "Attribute not found in element",
        "Description": "Indicates that the attribute doesn't exist in the element"
      },
      {
        "Exception": "Failed to remove XML attribute",
        "Description": "Indicates a problem removing the XML attribute"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Get XML element value",
    "description": "Get the value of an XML element.",
    "Input parameters": [
      {
        "Argument": "XML document",
        "Type": "XML node",
        "Description": "The XML document or XML element to retrieve its value"
      },
      {
        "Argument": "XPath query",
        "Type": "Text value",
        "Description": "The XPath expression to locate the subelement and retrieve its value"
      },
      {
        "Argument": "Get value as",
        "Type": "Text value, Numeric value, Datetime value, Boolean value",
        "Description": "Specifies the data type for the XML element value"
      }
    ],
    "Variables produced": [
      {
        "Argument": "XmlElementValue",
        "Type": "Boolean value",
        "Description": "The XML element value"
      },
      {
        "Argument": "XmlElementValue",
        "Type": "Datetime",
        "Description": "The XML element value"
      },
      {
        "Argument": "XmlElementValue",
        "Type": "Numeric value",
        "Description": "The XML element value"
      },
      {
        "Argument": "XmlElementValue",
        "Type": "Text value",
        "Description": "The XML element value"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Invalid XPath expression provided",
        "Description": "Indicates that the XPath expression provided is invalid"
      },
      {
        "Exception": "XPath expression returns no element",
        "Description": "Indicates that the XPath expression returns no element"
      },
      {
        "Exception": "Failed to convert element value to the requested data type",
        "Description": "Indicates a problem converting the element value to the requested data type"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Set XML element value",
    "description": "Set the value of an XML element.",
    "Input parameters": [
      {
        "Argument": "XML document",
        "Type": "XML node",
        "Description": "The XML document or XML element to retrieve it value"
      },
      {
        "Argument": "XPath query",
        "Type": "Text value",
        "Description": "The XPath expression to locate the subelement and retrieve its value"
      },
      {
        "Argument": "XML element value",
        "Type": "Text value",
        "Description": "The new value for the XML element"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid XPath expression provided",
        "Description": "Indicates that the XPath expression provided is invalid"
      },
      {
        "Exception": "XPath expression returns no element",
        "Description": "Indicates that the XPath expression returns no element"
      },
      {
        "Exception": "Failed to set element value",
        "Description": "Indicates a problem setting the element value"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Insert XML element",
    "description": "Insert a new XML element into an XML document.",
    "Input parameters": [
      {
        "Argument": "XML document",
        "Type": "XML node",
        "Description": "The XML document to insert the new XML element"
      },
      {
        "Argument": "XPath query",
        "Type": "Text value",
        "Description": "The XPath expression to locate the parent XML element and insert the new element into it"
      },
      {
        "Argument": "XML element to insert",
        "Type": "XML node",
        "Description": "The new XML element to insert into the XML document"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid XPath expression provided",
        "Description": "Indicates that the XPath expression provided is invalid"
      },
      {
        "Exception": "XPath expression returns no element",
        "Description": "Indicates that the XPath expression returns no element"
      },
      {
        "Exception": "Failed to insert XML element",
        "Description": "Indicates a problem inserting the XML element"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "XML",
    "action": "Remove XML element",
    "description": "Remove one or more XML elements from an XML document.",
    "Input parameters": [
      {
        "Argument": "XML document",
        "Type": "XML node",
        "Description": "The XML document that contains the XML element(s) to remove"
      },
      {
        "Argument": "XPath query",
        "Type": "Text value",
        "Description": "The XPath expression to locate the element(s) to remove"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Invalid XPath expression provided",
        "Description": "Indicates that the XPath expression provided is invalid"
      },
      {
        "Exception": "Failed to remove XML element",
        "Description": "Indicates a problem removing the XML element"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "CyberArk",
    "action": "Get password from CyberArk",
    "description": "Retrieves a password for a specific application from CyberArk.",
    "Input parameters": [
      {
        "Argument": "Server address",
        "Type": "Text value",
        "Description": "The base URI for the web request to connect. For example, https://yourservice.skytap.com:111"
      },
      {
        "Argument": "Application ID",
        "Type": "Text value",
        "Description": "The application ID to use for the web request. To find the application ID, open CyberArk Password Vault on a web browser and navigate to the Applications tab. Select Components, open the Private Ark application, and then select the desired Vault. You can add Owners here."
      },
      {
        "Argument": "Safe",
        "Type": "Text value",
        "Description": "The safe on CyberArk in which the application belongs"
      },
      {
        "Argument": "Folder",
        "Type": "Text value",
        "Description": "The folder necessary for the web request query"
      },
      {
        "Argument": "Object",
        "Type": "Text value",
        "Description": "The object necessary for the web request query"
      },
      {
        "Argument": "Extra data",
        "Type": "Text value",
        "Description": "The extra data (if any) for the web request's query"
      },
      {
        "Argument": "Accept untrusted certificates",
        "Type": "Boolean value",
        "Description": "Specifies whether to accept untrusted certificates"
      },
      {
        "Argument": "Certificate location",
        "Type": "Don't use certificate, Load certificate from Windows Store, Load certificate from file",
        "Description": "Specifies how to load (if needed) the certificate for the request"
      },
      {
        "Argument": "Use only valid certificates",
        "Type": "Boolean value",
        "Description": "Specifies whether to load only valid certificates from the store"
      },
      {
        "Argument": "Store certificate path",
        "Type": "Text value",
        "Description": "The path of the certificate in the certificate store. The certificate is represented by its serial number. The path should use the following format: (local path to certificate)/(certificate serial)"
      },
      {
        "Argument": "Certificates path",
        "Type": "File",
        "Description": "The path of the certificate."
      },
      {
        "Argument": "Certificate password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The password for the certificate file"
      },
      {
        "Argument": "Timeout",
        "Type": "Numeric value",
        "Description": "The waiting time (in seconds) to get results from CyberArk"
      }
    ],
    "Variables produced": [
      {
        "Argument": "JSONResponse",
        "Type": "Custom object",
        "Description": "The API response result"
      },
      {
        "Argument": "CyberArkPassword",
        "Type": "Encrypted value",
        "Description": "The password retrieved from CyberArk"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to send web request",
        "Description": "Indicates a problem sending the web request"
      },
      {
        "Exception": "Timeout expired",
        "Description": "Indicates that the request timed out"
      },
      {
        "Exception": "Error response from web request",
        "Description": "Indicates that the web request returned an error response"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Word",
    "action": "Launch Word",
    "description": "Opens a new Word instance or opens a Word document.",
    "Input parameters": [
      {
        "Argument": "Launch Word",
        "Type": "With a blank document, and open the following document",
        "Description": "Specify whether to open a new Word document, or an existing one"
      },
      {
        "Argument": "Document path",
        "Type": "File",
        "Description": "The full path of the existing Word document to open"
      },
      {
        "Argument": "Make instance visible",
        "Type": "Boolean value",
        "Description": "Specify whether to make the Word window visible or hide it"
      },
      {
        "Argument": "Open as ReadOnly",
        "Type": "Boolean value",
        "Description": "Specify whether to open the stored document in read-only mode or not"
      },
      {
        "Argument": "Read protection password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The read protection password on the Word document, if it's password protected"
      },
      {
        "Argument": "Write protection password",
        "Type": "Direct encrypted input or Text value",
        "Description": "The write protection password on the Word document, if it's password protected"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WordInstance",
        "Type": "Word instance",
        "Description": "The specific Word instance for use with later Word actions. This allows the user to specify which of possibly several Word documents to access"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to launch Word",
        "Description": "Indicates a problem launching a Word instance"
      },
      {
        "Exception": "The Word document was not found",
        "Description": "Indicates that the specific Word document could not be found in the provided location"
      },
      {
        "Exception": "Failed to open existing Word document",
        "Description": "Indicates a problem opening the specified Word document"
      },
      {
        "Exception": "Failed to launch Word application",
        "Description": "Indicates that Word application could not be launched due to an internal error"
      },
      {
        "Exception": "Word application is not installed",
        "Description": "Indicates that Word application isn't installed on the specific machine"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Word",
    "action": "Attach to running Word",
    "description": "Attaches to a Word document that's already open.",
    "Input parameters": [
      {
        "Argument": "Document name",
        "Type": "File",
        "Description": "The name or the path of the Word document to attach to"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WordInstance",
        "Type": "Word instance",
        "Description": "The Word instance this action has attached to for use with later Word actions"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to attach to Word document",
        "Description": "Indicates a problem attaching to the specified Word document"
      },
      {
        "Exception": "Specified Word document not found",
        "Description": "Indicates that the specific Word document couldn't be found in the provided location"
      },
      {
        "Exception": "Failed to launch Word",
        "Description": "Indicates that Word application couldn't be launched due to an internal error"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Word",
    "action": "Save Word",
    "description": "Saves a previously launched Word instance.",
    "Input parameters": [
      {
        "Argument": "Word instance",
        "Type": "Word instance",
        "Description": "The Word instance to save. This variable must have been previously specified in a Launch Word or Attach to running Word action."
      },
      {
        "Argument": "Save mode",
        "Type": "Save document, Save document as",
        "Description": "How to save the document of this instance."
      },
      {
        "Argument": "Document format",
        "Type": "All available formats from Word app",
        "Description": "The format of the document."
      },
      {
        "Argument": "Document path",
        "Type": "File",
        "Description": "The full path of the document. Insert the desired document file extension according to the selection in the Document format parameter."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to save Word",
        "Description": "Indicates a problem saving the Word document"
      },
      {
        "Exception": "The Word instance or the Word document is not initialized",
        "Description": "Indicates that Word instance or Word document specified in action isn't initialized"
      },
      {
        "Exception": "The operation cannot be performed on a read-only document",
        "Description": "Indicates that Word document can't be saved because it is opened as read-only"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Word",
    "action": "Close Word",
    "description": "Closes a Word instance.",
    "Input parameters": [
      {
        "Argument": "Word instance",
        "Type": "Word instance",
        "Description": "The Word instance to close. This variable must have been previously specified in a Launch Word or Attach to running Word action."
      },
      {
        "Argument": "Before closing Word",
        "Type": "Do not save document, Save document, Save document as",
        "Description": "Specify whether and how to save the document of this instance before closing that instance."
      },
      {
        "Argument": "Document format",
        "Type": "All available formats from Word app",
        "Description": "The format of the document."
      },
      {
        "Argument": "Document path",
        "Type": "File",
        "Description": "The full path of the document. Insert the desired document file extension according to the selection in the Document format parameter."
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to close Word",
        "Description": "Indicates a problem closing the Word document"
      },
      {
        "Exception": "Failed to save Word",
        "Description": "Indicates a problem saving the Word document"
      },
      {
        "Exception": "The operation cannot be performed on a read-only document",
        "Description": "Indicates that Word document can't be saved because it is opened as read-only"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Word",
    "action": "Read from Word document",
    "description": "Reads the text content from a document of a Word instance.",
    "Input parameters": [
      {
        "Argument": "Word instance",
        "Type": "Word instance",
        "Description": "This variable must have been previously specified in a Launch Word or Attach to running Word action"
      },
      {
        "Argument": "Retrieve",
        "Type": "Whole document/Pages/Bookmark",
        "Description": "Whether to retrieve the content of the whole document, of specific pages, or a bookmark"
      },
      {
        "Argument": "Page",
        "Type": "Numeric value",
        "Description": "The pages of the Word document to be read. A range of pages or a list can be provided as 2-5, which will retrieve content from page 2 to page 5 or 2,3,7, retrieve content from 2,3,7 pages"
      },
      {
        "Argument": "Bookmark",
        "Type": "Text value",
        "Description": "The bookmark of the Word document to be read"
      }
    ],
    "Variables produced": [
      {
        "Argument": "WordData",
        "Type": "Text value",
        "Description": "The value of the retrieved content"
      }
    ],
    "Exceptions": [
      {
        "Exception": "Failed to read the content from a Word document",
        "Description": "Indicates a problem retrieving the content from the specified Word document"
      },
      {
        "Exception": "The Word instance or the Word document is not initialized",
        "Description": "Indicates that Word instance or Word document specified in action isn't initialized"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Word",
    "action": "Write to Word document",
    "description": "Write or append text to a Word file.",
    "Input parameters": [
      {
        "Argument": "Word instance",
        "Type": "Word instance",
        "Description": "This variable must have been previously specified in a Launch Word or Attach to running Word action"
      },
      {
        "Argument": "Text to write",
        "Type": "General value"
      },
      {
        "Argument": "Append new line",
        "Type": "Boolean value",
        "Description": "Specifies whether to append a new line at the start of the overall text to write to the document"
      },
      {
        "Argument": "Write text to",
        "Type": "Beginning of Word file/End of Word file/Before of Bookmark/After of Bookmark",
        "Description": "Specifies the position of the Word document where the text will be appended"
      },
      {
        "Argument": "Bookmark",
        "Type": "Text value",
        "Description": "This action appends text before or after of the specified bookmark in the Word document"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "The Word instance or the Word document is not initialized",
        "Description": "Indicates that Word instance or Word document specified in action isn't initialized"
      },
      {
        "Exception": "The operation cannot be performed on a read-only document",
        "Description": "Indicates that Word document can't be edited because it is opened as read-only"
      },
      {
        "Exception": "The write operation on the Word document instance failed",
        "Description": "Indicates a problem writing content in the specified Word document"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Word",
    "action": "Insert image in Word document",
    "description": "Insert an image to a Word file.",
    "Input parameters": [
      {
        "Argument": "Word instance",
        "Type": "Word instance",
        "Description": "This variable must have been previously specified in a Launch Word or Attach to running Word action"
      },
      {
        "Argument": "Insert image to",
        "Type": "Beginning of Word file/End of Word file/Before of Bookmark/After of Bookmark/Before specific text /After specific text",
        "Description": "Specifies the position of the Word document that image will be appended"
      },
      {
        "Argument": "Insert image from",
        "Type": "File/Clipboard",
        "Description": "The location of the image to be inserted in the specified Word document"
      },
      {
        "Argument": "Image path",
        "Type": "File",
        "Description": "The full path of the image to be inserted"
      },
      {
        "Argument": "Text to find",
        "Type": "Text value",
        "Description": "Image will be appended before or after any occurrence of the specified text"
      },
      {
        "Argument": "Bookmark",
        "Type": "Text value"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "The Word instance or the Word document is not initialized",
        "Description": "Indicates that Word instance or Word document specified in action isn't initialized"
      },
      {
        "Exception": "The operation cannot be performed on a read-only document",
        "Description": "Indicates that Word document can't be edited because it is opened as read-only"
      },
      {
        "Exception": "Failed to insert image",
        "Description": "Indicates a problem inserting the image in the specified Word document"
      }
    ]
  },
  {
    "tool": "Power Automate",
    "category": "Word",
    "action": "Find and replace words in Word document",
    "description": "Finds text and replaces it with another in the active worksheet of an Excel instance.",
    "Input parameters": [
      {
        "Argument": "Word instance",
        "Type": "Word instance",
        "Description": "This variable must have been previously specified in a Launch Word or Attach to running Word action"
      },
      {
        "Argument": "All matches",
        "Type": "Boolean value",
        "Description": "Whether to find/ and replace text in all the matching occurrences found or in the first matching occurrence only"
      },
      {
        "Argument": "Text to find",
        "Type": "Text value"
      },
      {
        "Argument": "Text to replace with",
        "Type": "Text value",
        "Description": "The text used to replace the matching cells"
      },
      {
        "Argument": "Use wildcards",
        "Type": "Boolean value",
        "Description": "Whether to use wildcards for the text to find"
      },
      {
        "Argument": "Match case",
        "Type": "Boolean value",
        "Description": "Whether to search for case-sensitive data"
      },
      {
        "Argument": "Match whole words only",
        "Type": "Boolean value",
        "Description": "Whether to search for words that are the same as the specified text"
      }
    ],
    "Variables produced": [],
    "Exceptions": [
      {
        "Exception": "Failed to replace text in Word document",
        "Description": "Indicates a problem replacing the specified text with the provided input"
      },
      {
        "Exception": "The Word instance or the Word document is not initialized",
        "Description": "Indicates that Word instance or Word document specified in action isn't initialized"
      },
      {
        "Exception": "The operation cannot be performed on a read-only document",
        "Description": "Indicates that Word document can't be edited because it is opened as read-only"
      }
    ]
  }
]